
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e30  08000e30  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e30  08000e30  00002414  2**0
                  CONTENTS
  4 .ARM          00000008  08000e30  08000e30  00001e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e38  08000e38  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e38  08000e38  00001e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e3c  08000e3c  00001e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08000e40  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002414  2**0
                  CONTENTS
 10 .bss          00000040  20000414  20000414  00002414  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  00002414  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000176f  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000619  00000000  00000000  00003bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  000041d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000127  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002840  00000000  00000000  0000448f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002449  00000000  00000000  00006ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a56f  00000000  00000000  00009118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00013687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000057c  00000000  00000000  000136cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00013c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000414 	.word	0x20000414
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e18 	.word	0x08000e18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000418 	.word	0x20000418
 80001c4:	08000e18 	.word	0x08000e18

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:

#include "stm32f407xx.h"
#include <string.h>
#include <stdint.h>

void delay(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>

}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <USART2_GPIOInit>:
char msg[1024] = "USART Tx testing... \n\r";

USART_Handle_t usart2_handle;

void USART2_GPIOInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <USART2_GPIOInit+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000212:	2300      	movs	r3, #0
 8000214:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800021e:	2307      	movs	r3, #7
 8000220:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000222:	2302      	movs	r3, #2
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f983 	bl	8000534 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800022e:	2303      	movs	r3, #3
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f97d 	bl	8000534 <GPIO_Init>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020000 	.word	0x40020000

08000248 <USART2_Init>:

void USART2_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <USART2_Init+0x3c>)
 800024e:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <USART2_Init+0x40>)
 8000250:	601a      	str	r2, [r3, #0]
	usart2_handle.USARTConfig.USART_Baud = USART_STD_BAUD_115200;
 8000252:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <USART2_Init+0x3c>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000258:	609a      	str	r2, [r3, #8]
	usart2_handle.USARTConfig.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800025a:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <USART2_Init+0x3c>)
 800025c:	2200      	movs	r2, #0
 800025e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USARTConfig.USART_Mode = USART_MODE_ONLY_TX;
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <USART2_Init+0x3c>)
 8000262:	2200      	movs	r2, #0
 8000264:	711a      	strb	r2, [r3, #4]
	usart2_handle.USARTConfig.USART_NoOfStopBits = USART_STOPBITS_1;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <USART2_Init+0x3c>)
 8000268:	2200      	movs	r2, #0
 800026a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USARTConfig.USART_ParityControl = USART_PARITY_DISABLE;
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <USART2_Init+0x3c>)
 800026e:	2200      	movs	r2, #0
 8000270:	739a      	strb	r2, [r3, #14]
	usart2_handle.USARTConfig.USART_WordLength = USART_WORDLEN_8BITS;
 8000272:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <USART2_Init+0x3c>)
 8000274:	2200      	movs	r2, #0
 8000276:	735a      	strb	r2, [r3, #13]
	USART_Init(&usart2_handle);
 8000278:	4802      	ldr	r0, [pc, #8]	@ (8000284 <USART2_Init+0x3c>)
 800027a:	f000 fb83 	bl	8000984 <USART_Init>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000430 	.word	0x20000430
 8000288:	40004400 	.word	0x40004400

0800028c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <GPIO_ButtonInit+0x2c>)
 8000294:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000296:	2300      	movs	r3, #0
 8000298:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029a:	2300      	movs	r3, #0
 800029c:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800029e:	2302      	movs	r3, #2
 80002a0:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GpioBtn);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f943 	bl	8000534 <GPIO_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020000 	.word	0x40020000

080002bc <main>:

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002c0:	f7ff ffe4 	bl	800028c <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002c4:	f7ff ff9e 	bl	8000204 <USART2_GPIOInit>

	USART2_Init();
 80002c8:	f7ff ffbe 	bl	8000248 <USART2_Init>

	USART_PeripheralControl(USART2, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	480c      	ldr	r0, [pc, #48]	@ (8000300 <main+0x44>)
 80002d0:	f000 fc46 	bl	8000b60 <USART_PeripheralControl>

	// wait until button is pressed
	while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002d4:	bf00      	nop
 80002d6:	2100      	movs	r1, #0
 80002d8:	480a      	ldr	r0, [pc, #40]	@ (8000304 <main+0x48>)
 80002da:	f000 facb 	bl	8000874 <GPIO_ReadFromInputPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f8      	beq.n	80002d6 <main+0x1a>

	// avoid button de-bouncing
	delay();
 80002e4:	f7ff ff78 	bl	80001d8 <delay>

	USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg));
 80002e8:	4807      	ldr	r0, [pc, #28]	@ (8000308 <main+0x4c>)
 80002ea:	f7ff ff6d 	bl	80001c8 <strlen>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	4905      	ldr	r1, [pc, #20]	@ (8000308 <main+0x4c>)
 80002f4:	4805      	ldr	r0, [pc, #20]	@ (800030c <main+0x50>)
 80002f6:	f000 fc64 	bl	8000bc2 <USART_SendData>

	while(1);
 80002fa:	bf00      	nop
 80002fc:	e7fd      	b.n	80002fa <main+0x3e>
 80002fe:	bf00      	nop
 8000300:	40004400 	.word	0x40004400
 8000304:	40020000 	.word	0x40020000
 8000308:	20000000 	.word	0x20000000
 800030c:	20000430 	.word	0x20000430

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 fd47 	bl	8000dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffbb 	bl	80002bc <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000354:	08000e40 	.word	0x08000e40
  ldr r2, =_sbss
 8000358:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 800035c:	20000454 	.word	0x20000454

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_PeriClckCtrl>:
 */

#include "stm32f407_gpio_driver.h"

void GPIO_PeriClckCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d162      	bne.n	800043c <GPIO_PeriClckCtrl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a64      	ldr	r2, [pc, #400]	@ (800050c <GPIO_PeriClckCtrl+0x1a8>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClckCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 800037e:	4b64      	ldr	r3, [pc, #400]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a63      	ldr	r2, [pc, #396]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800038a:	e0b9      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a61      	ldr	r2, [pc, #388]	@ (8000514 <GPIO_PeriClckCtrl+0x1b0>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClckCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000394:	4b5e      	ldr	r3, [pc, #376]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a5d      	ldr	r2, [pc, #372]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a0:	e0ae      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a5c      	ldr	r2, [pc, #368]	@ (8000518 <GPIO_PeriClckCtrl+0x1b4>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClckCtrl+0x54>
			GPIOC_PCLK_EN();
 80003aa:	4b59      	ldr	r3, [pc, #356]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a58      	ldr	r2, [pc, #352]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b6:	e0a3      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a58      	ldr	r2, [pc, #352]	@ (800051c <GPIO_PeriClckCtrl+0x1b8>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClckCtrl+0x6a>
			GPIOD_PCLK_EN();
 80003c0:	4b53      	ldr	r3, [pc, #332]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a52      	ldr	r2, [pc, #328]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	e098      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a53      	ldr	r2, [pc, #332]	@ (8000520 <GPIO_PeriClckCtrl+0x1bc>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClckCtrl+0x80>
			GPIOE_PCLK_EN();
 80003d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a4d      	ldr	r2, [pc, #308]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e2:	e08d      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a4f      	ldr	r2, [pc, #316]	@ (8000524 <GPIO_PeriClckCtrl+0x1c0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClckCtrl+0x96>
			GPIOF_PCLK_EN();
 80003ec:	4b48      	ldr	r3, [pc, #288]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a47      	ldr	r2, [pc, #284]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f8:	e082      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a4a      	ldr	r2, [pc, #296]	@ (8000528 <GPIO_PeriClckCtrl+0x1c4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClckCtrl+0xac>
			GPIOG_PCLK_EN();
 8000402:	4b43      	ldr	r3, [pc, #268]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a42      	ldr	r2, [pc, #264]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040e:	e077      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a46      	ldr	r2, [pc, #280]	@ (800052c <GPIO_PeriClckCtrl+0x1c8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClckCtrl+0xc2>
			GPIOH_PCLK_EN();
 8000418:	4b3d      	ldr	r3, [pc, #244]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a3c      	ldr	r2, [pc, #240]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e06c      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a41      	ldr	r2, [pc, #260]	@ (8000530 <GPIO_PeriClckCtrl+0x1cc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d168      	bne.n	8000500 <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_EN();
 800042e:	4b38      	ldr	r3, [pc, #224]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a37      	ldr	r2, [pc, #220]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043a:	e061      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		if(pGPIOx == GPIOA)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a33      	ldr	r2, [pc, #204]	@ (800050c <GPIO_PeriClckCtrl+0x1a8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClckCtrl+0xee>
			GPIOA_PCLK_DI();
 8000444:	4b32      	ldr	r3, [pc, #200]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a31      	ldr	r2, [pc, #196]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	e056      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a2f      	ldr	r2, [pc, #188]	@ (8000514 <GPIO_PeriClckCtrl+0x1b0>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClckCtrl+0x104>
			GPIOB_PCLK_DI();
 800045a:	4b2d      	ldr	r3, [pc, #180]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a2c      	ldr	r2, [pc, #176]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000460:	f023 0302 	bic.w	r3, r3, #2
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000466:	e04b      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a2b      	ldr	r2, [pc, #172]	@ (8000518 <GPIO_PeriClckCtrl+0x1b4>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClckCtrl+0x11a>
			GPIOC_PCLK_DI();
 8000470:	4b27      	ldr	r3, [pc, #156]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a26      	ldr	r2, [pc, #152]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000476:	f023 0304 	bic.w	r3, r3, #4
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047c:	e040      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a26      	ldr	r2, [pc, #152]	@ (800051c <GPIO_PeriClckCtrl+0x1b8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClckCtrl+0x130>
			GPIOD_PCLK_DI();
 8000486:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a21      	ldr	r2, [pc, #132]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800048c:	f023 0308 	bic.w	r3, r3, #8
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000492:	e035      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a22      	ldr	r2, [pc, #136]	@ (8000520 <GPIO_PeriClckCtrl+0x1bc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClckCtrl+0x146>
			GPIOE_PCLK_DI();
 800049c:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004a2:	f023 0310 	bic.w	r3, r3, #16
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a8:	e02a      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000524 <GPIO_PeriClckCtrl+0x1c0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClckCtrl+0x15c>
			GPIOF_PCLK_DI();
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a16      	ldr	r2, [pc, #88]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004b8:	f023 0320 	bic.w	r3, r3, #32
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004be:	e01f      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a19      	ldr	r2, [pc, #100]	@ (8000528 <GPIO_PeriClckCtrl+0x1c4>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClckCtrl+0x172>
			GPIOG_PCLK_DI();
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004cc:	4a10      	ldr	r2, [pc, #64]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d4:	e014      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a14      	ldr	r2, [pc, #80]	@ (800052c <GPIO_PeriClckCtrl+0x1c8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClckCtrl+0x188>
			GPIOH_PCLK_DI();
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ea:	e009      	b.n	8000500 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <GPIO_PeriClckCtrl+0x1cc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d105      	bne.n	8000500 <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_DI();
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f8:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <GPIO_PeriClckCtrl+0x1ac>)
 80004fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40020000 	.word	0x40020000
 8000510:	40023800 	.word	0x40023800
 8000514:	40020400 	.word	0x40020400
 8000518:	40020800 	.word	0x40020800
 800051c:	40020c00 	.word	0x40020c00
 8000520:	40021000 	.word	0x40021000
 8000524:	40021400 	.word	0x40021400
 8000528:	40021800 	.word	0x40021800
 800052c:	40021c00 	.word	0x40021c00
 8000530:	40022000 	.word	0x40022000

08000534 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]

	GPIO_PeriClckCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff0c 	bl	8000364 <GPIO_PeriClckCtrl>

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d81f      	bhi.n	8000594 <GPIO_Init+0x60>
	{
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	4619      	mov	r1, r3
 8000572:	2303      	movs	r3, #3
 8000574:	408b      	lsls	r3, r1
 8000576:	43db      	mvns	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting bits
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6819      	ldr	r1, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	e0ca      	b.n	800072a <GPIO_Init+0x1f6>

	}else
	{
		//interrupt mode (TODO)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d117      	bne.n	80005cc <GPIO_Init+0x98>

			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b4a      	ldr	r3, [pc, #296]	@ (80006c8 <GPIO_Init+0x194>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a46      	ldr	r2, [pc, #280]	@ (80006c8 <GPIO_Init+0x194>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b45      	ldr	r3, [pc, #276]	@ (80006c8 <GPIO_Init+0x194>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a40      	ldr	r2, [pc, #256]	@ (80006c8 <GPIO_Init+0x194>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	6093      	str	r3, [r2, #8]
 80005ca:	e035      	b.n	8000638 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d117      	bne.n	8000604 <GPIO_Init+0xd0>
			//1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b3c      	ldr	r3, [pc, #240]	@ (80006c8 <GPIO_Init+0x194>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a38      	ldr	r2, [pc, #224]	@ (80006c8 <GPIO_Init+0x194>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <GPIO_Init+0x194>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <GPIO_Init+0x194>)
 80005fe:	400b      	ands	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
 8000602:	e019      	b.n	8000638 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b06      	cmp	r3, #6
 800060a:	d115      	bne.n	8000638 <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <GPIO_Init+0x194>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a2a      	ldr	r2, [pc, #168]	@ (80006c8 <GPIO_Init+0x194>)
 800061e:	430b      	orrs	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <GPIO_Init+0x194>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <GPIO_Init+0x194>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6093      	str	r3, [r2, #8]

		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <GPIO_Init+0x198>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d04d      	beq.n	80006f0 <GPIO_Init+0x1bc>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <GPIO_Init+0x19c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d032      	beq.n	80006c4 <GPIO_Init+0x190>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <GPIO_Init+0x1a0>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d02b      	beq.n	80006c0 <GPIO_Init+0x18c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <GPIO_Init+0x1a4>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d024      	beq.n	80006bc <GPIO_Init+0x188>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <GPIO_Init+0x1a8>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d01d      	beq.n	80006b8 <GPIO_Init+0x184>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <GPIO_Init+0x1ac>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d016      	beq.n	80006b4 <GPIO_Init+0x180>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GPIO_Init+0x1b0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d00f      	beq.n	80006b0 <GPIO_Init+0x17c>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <GPIO_Init+0x1b4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d008      	beq.n	80006ac <GPIO_Init+0x178>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <GPIO_Init+0x1b8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <GPIO_Init+0x174>
 80006a4:	2308      	movs	r3, #8
 80006a6:	e024      	b.n	80006f2 <GPIO_Init+0x1be>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e022      	b.n	80006f2 <GPIO_Init+0x1be>
 80006ac:	2307      	movs	r3, #7
 80006ae:	e020      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b0:	2306      	movs	r3, #6
 80006b2:	e01e      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b4:	2305      	movs	r3, #5
 80006b6:	e01c      	b.n	80006f2 <GPIO_Init+0x1be>
 80006b8:	2304      	movs	r3, #4
 80006ba:	e01a      	b.n	80006f2 <GPIO_Init+0x1be>
 80006bc:	2303      	movs	r3, #3
 80006be:	e018      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c0:	2302      	movs	r3, #2
 80006c2:	e016      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e014      	b.n	80006f2 <GPIO_Init+0x1be>
 80006c8:	40013c00 	.word	0x40013c00
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40021400 	.word	0x40021400
 80006e4:	40021800 	.word	0x40021800
 80006e8:	40021c00 	.word	0x40021c00
 80006ec:	40022000 	.word	0x40022000
 80006f0:	2300      	movs	r3, #0
 80006f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000868 <GPIO_Init+0x334>)
 80006f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f8:	4a5b      	ldr	r2, [pc, #364]	@ (8000868 <GPIO_Init+0x334>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fe:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000700:	7c7a      	ldrb	r2, [r7, #17]
 8000702:	7cbb      	ldrb	r3, [r7, #18]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fa02 f103 	lsl.w	r1, r2, r3
 800070a:	4a58      	ldr	r2, [pc, #352]	@ (800086c <GPIO_Init+0x338>)
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3302      	adds	r3, #2
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000714:	4b56      	ldr	r3, [pc, #344]	@ (8000870 <GPIO_Init+0x33c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a52      	ldr	r2, [pc, #328]	@ (8000870 <GPIO_Init+0x33c>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	799b      	ldrb	r3, [r3, #6]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	2303      	movs	r3, #3
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6899      	ldr	r1, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	430a      	orrs	r2, r1
 800076a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]


	//3. configure pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	79db      	ldrb	r3, [r3, #7]
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	4619      	mov	r1, r3
 800078e:	2303      	movs	r3, #3
 8000790:	408b      	lsls	r3, r1
 8000792:	43db      	mvns	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	400a      	ands	r2, r1
 800079c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68d9      	ldr	r1, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	430a      	orrs	r2, r1
 80007ac:	60da      	str	r2, [r3, #12]
	temp = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7a1b      	ldrb	r3, [r3, #8]
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	685a      	ldr	r2, [r3, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2301      	movs	r3, #1
 80007d0:	408b      	lsls	r3, r1
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6859      	ldr	r1, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d131      	bne.n	800085e <GPIO_Init+0x32a>
	{
		//configure alt fun registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	7c3a      	ldrb	r2, [r7, #16]
 8000812:	3208      	adds	r2, #8
 8000814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	220f      	movs	r2, #15
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	7c3a      	ldrb	r2, [r7, #16]
 800082c:	4001      	ands	r1, r0
 800082e:	3208      	adds	r2, #8
 8000830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c3a      	ldrb	r2, [r7, #16]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7a5b      	ldrb	r3, [r3, #9]
 8000844:	461a      	mov	r2, r3
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	7c3a      	ldrb	r2, [r7, #16]
 8000856:	4301      	orrs	r1, r0
 8000858:	3208      	adds	r2, #8
 800085a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40013800 	.word	0x40013800
 8000870:	40013c00 	.word	0x40013c00

08000874 <GPIO_ReadFromInputPin>:


}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

	return value;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a31      	ldr	r2, [pc, #196]	@ (8000978 <USART_SetBaudRate+0xd8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d003      	beq.n	80008be <USART_SetBaudRate+0x1e>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a30      	ldr	r2, [pc, #192]	@ (800097c <USART_SetBaudRate+0xdc>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d103      	bne.n	80008c6 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 80008be:	f000 fa27 	bl	8000d10 <RCC_GetPCLK2Value>
 80008c2:	61f8      	str	r0, [r7, #28]
 80008c4:	e002      	b.n	80008cc <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 80008c6:	f000 f9cb 	bl	8000c60 <RCC_GetPCLK1Value>
 80008ca:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00b      	beq.n	80008f0 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	009a      	lsls	r2, r3, #2
 80008e2:	441a      	add	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	e00a      	b.n	8000906 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009a      	lsls	r2, r3, #2
 80008fa:	441a      	add	r2, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	4a1d      	ldr	r2, [pc, #116]	@ (8000980 <USART_SetBaudRate+0xe0>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2264      	movs	r2, #100	@ 0x64
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00a      	beq.n	800094c <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	3332      	adds	r3, #50	@ 0x32
 800093c:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <USART_SetBaudRate+0xe0>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e009      	b.n	8000960 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	3332      	adds	r3, #50	@ 0x32
 8000952:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <USART_SetBaudRate+0xe0>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	095b      	lsrs	r3, r3, #5
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]

  //copy the value of temp reg in to BRR register
  pUSARTx->BRR = tempreg;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	609a      	str	r2, [r3, #8]
}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400
 8000980:	51eb851f 	.word	0x51eb851f

08000984 <USART_Init>:


void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//Temporary variable
		uint32_t tempreg=0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

		//enable the Clock for given USART peripheral
		 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f872 	bl	8000a80 <USART_PeriClockControl>

		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		if ( pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_ONLY_RX)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d104      	bne.n	80009ae <USART_Init+0x2a>
		{
			//enable the Receiver bit field
			tempreg|= (1 << USART_CR1_RE);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e010      	b.n	80009d0 <USART_Init+0x4c>
		}else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_ONLY_TX)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <USART_Init+0x3c>
		{
			//enable the Transmitter bit field
			tempreg |= ( 1 << USART_CR1_TE );
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e007      	b.n	80009d0 <USART_Init+0x4c>

		}else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_TXRX)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d103      	bne.n	80009d0 <USART_Init+0x4c>
		{
			//enable the both Transmitter and Receiver bit fields
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 030c 	orr.w	r3, r3, #12
 80009ce:	60fb      	str	r3, [r7, #12]
		}

	    //configure the Word length configuration item
		tempreg |= pUSARTHandle->USARTConfig.USART_WordLength << USART_CR1_M ;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7b5b      	ldrb	r3, [r3, #13]
 80009d4:	031b      	lsls	r3, r3, #12
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]


	    //Configuration of parity control bit fields
		if ( pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_EVEN)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7b9b      	ldrb	r3, [r3, #14]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d104      	bne.n	80009ee <USART_Init+0x6a>
		{
			//enable the parity control
			tempreg |= ( 1 << USART_CR1_PCE);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00b      	b.n	8000a06 <USART_Init+0x82>

			//Implement the code to enable EVEN parity
			//Not required because by default EVEN parity will be selected once you enable the parity control

		}else if (pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_ODD )
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7b9b      	ldrb	r3, [r3, #14]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d107      	bne.n	8000a06 <USART_Init+0x82>
		{
			//Implement the code to enable the parity control
		    tempreg |= ( 1 << USART_CR1_PCE);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fc:	60fb      	str	r3, [r7, #12]

		    //Implement the code to enable ODD parity
		    tempreg |= ( 1 << USART_CR1_PS);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a04:	60fb      	str	r3, [r7, #12]

		}

	   //Program the CR1 register
		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

		tempreg=0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		tempreg |= pUSARTHandle->USARTConfig.USART_NoOfStopBits << USART_CR2_STOP;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7b1b      	ldrb	r3, [r3, #12]
 8000a16:	031b      	lsls	r3, r3, #12
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

		tempreg=0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		if ( pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7bdb      	ldrb	r3, [r3, #15]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d104      	bne.n	8000a3c <USART_Init+0xb8>
		{
			//Implement the code to enable CTS flow control
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e010      	b.n	8000a5e <USART_Init+0xda>


		}else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7bdb      	ldrb	r3, [r3, #15]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d104      	bne.n	8000a4e <USART_Init+0xca>
		{
			//Implement the code to enable RTS flow control
			tempreg |= (1 << USART_CR3_RTSE);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e007      	b.n	8000a5e <USART_Init+0xda>

		}else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7bdb      	ldrb	r3, [r3, #15]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d103      	bne.n	8000a5e <USART_Init+0xda>
		{
			//Implement the code to enable both CTS and RTS Flow control
			tempreg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a5c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baud rate register)******************************************/

		USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USARTConfig.USART_Baud);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4610      	mov	r0, r2
 8000a72:	f7ff ff15 	bl	80008a0 <USART_SetBaudRate>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <USART_PeriClockControl>:
		USART6_REG_RESET();
	}
}

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d12b      	bne.n	8000aea <USART_PeriClockControl+0x6a>
	{
		if(pUSARTx == USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <USART_PeriClockControl+0xcc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000aa6:	e04b      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000b54 <USART_PeriClockControl+0xd4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	4a26      	ldr	r2, [pc, #152]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000abc:	e040      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a25      	ldr	r2, [pc, #148]	@ (8000b58 <USART_PeriClockControl+0xd8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000ac6:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ad2:	e035      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART6)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <USART_PeriClockControl+0xdc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d131      	bne.n	8000b40 <USART_PeriClockControl+0xc0>
			USART6_PCLK_EN();
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000ae2:	f043 0320 	orr.w	r3, r3, #32
 8000ae6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ae8:	e02a      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		if(pUSARTx == USART1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <USART_PeriClockControl+0xcc>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <USART_PeriClockControl+0x80>
			USART1_PCLK_DI();
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000af8:	f023 0310 	bic.w	r3, r3, #16
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000afe:	e01f      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <USART_PeriClockControl+0xd4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <USART_PeriClockControl+0x96>
			USART2_PCLK_DI();
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b0e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b14:	e014      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART3)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <USART_PeriClockControl+0xd8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <USART_PeriClockControl+0xac>
			USART3_PCLK_DI();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a0b      	ldr	r2, [pc, #44]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b2a:	e009      	b.n	8000b40 <USART_PeriClockControl+0xc0>
		else if(pUSARTx == USART6)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <USART_PeriClockControl+0xdc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d105      	bne.n	8000b40 <USART_PeriClockControl+0xc0>
			USART6_PCLK_DI();
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b38:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <USART_PeriClockControl+0xd0>)
 8000b3a:	f023 0320 	bic.w	r3, r3, #32
 8000b3e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40004800 	.word	0x40004800
 8000b5c:	40011400 	.word	0x40011400

08000b60 <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d106      	bne.n	8000b80 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000b7e:	e005      	b.n	8000b8c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60da      	str	r2, [r3, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <USART_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e031      	b.n	8000c38 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000bd4:	bf00      	nop
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffdb 	bl	8000b98 <USART_GetFlagStatus>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f6      	beq.n	8000bd6 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USARTConfig.USART_WordLength == USART_WORDLEN_9BITS)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7b5b      	ldrb	r3, [r3, #13]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d118      	bne.n	8000c22 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c02:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_DISABLE)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	7b9b      	ldrb	r3, [r3, #14]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	e00b      	b.n	8000c32 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	e007      	b.n	8000c32 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3c9      	bcc.n	8000bd4 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000c40:	bf00      	nop
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2140      	movs	r1, #64	@ 0x40
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffa5 	bl	8000b98 <USART_GetFlagStatus>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f6      	beq.n	8000c42 <USART_SendData+0x80>
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <RCC_GetPCLK1Value+0x9c>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000c74:	7a7b      	ldrb	r3, [r7, #9]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <RCC_GetPCLK1Value+0xa0>)
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e00b      	b.n	8000c98 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000c80:	7a7b      	ldrb	r3, [r7, #9]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d102      	bne.n	8000c8c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <RCC_GetPCLK1Value+0xa4>)
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e005      	b.n	8000c98 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8000c8c:	7a7b      	ldrb	r3, [r7, #9]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d102      	bne.n	8000c98 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutPutClock();
 8000c92:	f000 f895 	bl	8000dc0 <RCC_GetPLLOutPutClock>
 8000c96:	60f8      	str	r0, [r7, #12]
	}

	temp = (RCC->CFGR >> 4) & 0xf;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <RCC_GetPCLK1Value+0x9c>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000ca6:	7a3b      	ldrb	r3, [r7, #8]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d802      	bhi.n	8000cb2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	72fb      	strb	r3, [r7, #11]
 8000cb0:	e005      	b.n	8000cbe <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000cb2:	7a3b      	ldrb	r3, [r7, #8]
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <RCC_GetPCLK1Value+0xa8>)
 8000cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cbc:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 10) & 0x7;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <RCC_GetPCLK1Value+0x9c>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	0a9b      	lsrs	r3, r3, #10
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000ccc:	7a3b      	ldrb	r3, [r7, #8]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d802      	bhi.n	8000cd8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	72bb      	strb	r3, [r7, #10]
 8000cd6:	e004      	b.n	8000ce2 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000cd8:	7a3b      	ldrb	r3, [r7, #8]
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <RCC_GetPCLK1Value+0xac>)
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	72bb      	strb	r3, [r7, #10]
	}

		pclk1 = (SystemClk / ahbp) / apb1p;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cea:	7abb      	ldrb	r3, [r7, #10]
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	00f42400 	.word	0x00f42400
 8000d04:	007a1200 	.word	0x007a1200
 8000d08:	20000400 	.word	0x20000400
 8000d0c:	20000410 	.word	0x20000410

08000d10 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;
	uint8_t clksrc, temp, ahbp, apb2p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <RCC_GetPCLK2Value+0x9c>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000d24:	7a7b      	ldrb	r3, [r7, #9]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <RCC_GetPCLK2Value+0xa0>)
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e00b      	b.n	8000d48 <RCC_GetPCLK2Value+0x38>
	}
	else if (clksrc == 1)
 8000d30:	7a7b      	ldrb	r3, [r7, #9]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d102      	bne.n	8000d3c <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <RCC_GetPCLK2Value+0xa4>)
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e005      	b.n	8000d48 <RCC_GetPCLK2Value+0x38>
	}
	else if (clksrc == 2)
 8000d3c:	7a7b      	ldrb	r3, [r7, #9]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d102      	bne.n	8000d48 <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GetPLLOutPutClock();
 8000d42:	f000 f83d 	bl	8000dc0 <RCC_GetPLLOutPutClock>
 8000d46:	60f8      	str	r0, [r7, #12]
	}

	temp = (RCC->CFGR >> 4) & 0xf;
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <RCC_GetPCLK2Value+0x9c>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000d56:	7a3b      	ldrb	r3, [r7, #8]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d802      	bhi.n	8000d62 <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	72fb      	strb	r3, [r7, #11]
 8000d60:	e005      	b.n	8000d6e <RCC_GetPCLK2Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000d62:	7a3b      	ldrb	r3, [r7, #8]
 8000d64:	3b08      	subs	r3, #8
 8000d66:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <RCC_GetPCLK2Value+0xa8>)
 8000d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6c:	72fb      	strb	r3, [r7, #11]
	}

	//apb2
	temp = (RCC->CFGR >> 13) & 0x7;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <RCC_GetPCLK2Value+0x9c>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	0b5b      	lsrs	r3, r3, #13
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000d7c:	7a3b      	ldrb	r3, [r7, #8]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d802      	bhi.n	8000d88 <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	72bb      	strb	r3, [r7, #10]
 8000d86:	e004      	b.n	8000d92 <RCC_GetPCLK2Value+0x82>
	}
	else
	{
		apb2p = APB1_PreScaler[temp-4];
 8000d88:	7a3b      	ldrb	r3, [r7, #8]
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <RCC_GetPCLK2Value+0xac>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	72bb      	strb	r3, [r7, #10]
	}

		pclk2 = (SystemClk / ahbp) / apb2p;
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d9a:	7abb      	ldrb	r3, [r7, #10]
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000da2:	687b      	ldr	r3, [r7, #4]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	00f42400 	.word	0x00f42400
 8000db4:	007a1200 	.word	0x007a1200
 8000db8:	20000400 	.word	0x20000400
 8000dbc:	20000410 	.word	0x20000410

08000dc0 <RCC_GetPLLOutPutClock>:

uint32_t RCC_GetPLLOutPutClock()
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	// TODO
}
 8000dc4:	bf00      	nop
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <__libc_init_array>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8000e08 <__libc_init_array+0x38>)
 8000dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8000e0c <__libc_init_array+0x3c>)
 8000dd6:	1b64      	subs	r4, r4, r5
 8000dd8:	10a4      	asrs	r4, r4, #2
 8000dda:	2600      	movs	r6, #0
 8000ddc:	42a6      	cmp	r6, r4
 8000dde:	d109      	bne.n	8000df4 <__libc_init_array+0x24>
 8000de0:	4d0b      	ldr	r5, [pc, #44]	@ (8000e10 <__libc_init_array+0x40>)
 8000de2:	4c0c      	ldr	r4, [pc, #48]	@ (8000e14 <__libc_init_array+0x44>)
 8000de4:	f000 f818 	bl	8000e18 <_init>
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	10a4      	asrs	r4, r4, #2
 8000dec:	2600      	movs	r6, #0
 8000dee:	42a6      	cmp	r6, r4
 8000df0:	d105      	bne.n	8000dfe <__libc_init_array+0x2e>
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df8:	4798      	blx	r3
 8000dfa:	3601      	adds	r6, #1
 8000dfc:	e7ee      	b.n	8000ddc <__libc_init_array+0xc>
 8000dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e02:	4798      	blx	r3
 8000e04:	3601      	adds	r6, #1
 8000e06:	e7f2      	b.n	8000dee <__libc_init_array+0x1e>
 8000e08:	08000e38 	.word	0x08000e38
 8000e0c:	08000e38 	.word	0x08000e38
 8000e10:	08000e38 	.word	0x08000e38
 8000e14:	08000e3c 	.word	0x08000e3c

08000e18 <_init>:
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	bf00      	nop
 8000e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1e:	bc08      	pop	{r3}
 8000e20:	469e      	mov	lr, r3
 8000e22:	4770      	bx	lr

08000e24 <_fini>:
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	bf00      	nop
 8000e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2a:	bc08      	pop	{r3}
 8000e2c:	469e      	mov	lr, r3
 8000e2e:	4770      	bx	lr
