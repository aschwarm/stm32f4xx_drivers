
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800201c  0800201c  0000301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002070  08002070  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  08002070  08002070  00003070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002078  08002078  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00003078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002080  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004070  2**0
                  CONTENTS
 10 .bss          00000198  20000070  20000070  00004070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00004070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bdd  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007c4  00000000  00000000  00005c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  00006448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019e  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000351a  00000000  00000000  00006826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a56  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c12e  00000000  00000000  0000c796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000188c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001014  00000000  00000000  00018908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0001991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002004 	.word	0x08002004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002004 	.word	0x08002004

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay>:
extern void initialise_monitor_handles();

#define MY_ADDR  	0x61
#define SLAVE_ADDR 	0x68

void delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d9f8      	bls.n	800027c <delay+0xc>

}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	0007a11f 	.word	0x0007a11f

0800029c <I2C1_GPIOInits>:
 * PB6 -> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <I2C1_GPIOInits+0x40>)
 80002a4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002a6:	2302      	movs	r3, #2
 80002a8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002aa:	2301      	movs	r3, #1
 80002ac:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80002ae:	2301      	movs	r3, #1
 80002b0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002b6:	2302      	movs	r3, #2
 80002b8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002ba:	2306      	movs	r3, #6
 80002bc:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa59 	bl	8000778 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002c6:	2307      	movs	r3, #7
 80002c8:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa53 	bl	8000778 <GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020400 	.word	0x40020400

080002e0 <I2C1_Inits>:

void I2C1_Inits(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <I2C1_Inits+0x2c>)
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <I2C1_Inits+0x30>)
 80002e8:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <I2C1_Inits+0x2c>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <I2C1_Inits+0x2c>)
 80002f2:	2261      	movs	r2, #97	@ 0x61
 80002f4:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002f6:	4b05      	ldr	r3, [pc, #20]	@ (800030c <I2C1_Inits+0x2c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002fc:	4b03      	ldr	r3, [pc, #12]	@ (800030c <I2C1_Inits+0x2c>)
 80002fe:	4a05      	ldr	r2, [pc, #20]	@ (8000314 <I2C1_Inits+0x34>)
 8000300:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000302:	4802      	ldr	r0, [pc, #8]	@ (800030c <I2C1_Inits+0x2c>)
 8000304:	f000 fcd2 	bl	8000cac <I2C_Init>

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000008c 	.word	0x2000008c
 8000310:	40005400 	.word	0x40005400
 8000314:	000186a0 	.word	0x000186a0

08000318 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <GPIO_ButtonInit+0x2c>)
 8000320:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000322:	2300      	movs	r3, #0
 8000324:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000326:	2300      	movs	r3, #0
 8000328:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800032a:	2302      	movs	r3, #2
 800032c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800032e:	2300      	movs	r3, #0
 8000330:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GpioBtn);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fa1f 	bl	8000778 <GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <main>:

int main()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af02      	add	r7, sp, #8
	uint8_t command_code, len;

	initialise_monitor_handles();
 800034e:	f000 f857 	bl	8000400 <initialise_monitor_handles>

	printf("Application is running\n");
 8000352:	4825      	ldr	r0, [pc, #148]	@ (80003e8 <main+0xa0>)
 8000354:	f000 fff2 	bl	800133c <puts>

	I2C1_GPIOInits();
 8000358:	f7ff ffa0 	bl	800029c <I2C1_GPIOInits>

	I2C1_Inits();
 800035c:	f7ff ffc0 	bl	80002e0 <I2C1_Inits>

	GPIO_ButtonInit();
 8000360:	f7ff ffda 	bl	8000318 <GPIO_ButtonInit>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000364:	2101      	movs	r1, #1
 8000366:	4821      	ldr	r0, [pc, #132]	@ (80003ec <main+0xa4>)
 8000368:	f000 fc14 	bl	8000b94 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 800036c:	2101      	movs	r1, #1
 800036e:	481f      	ldr	r0, [pc, #124]	@ (80003ec <main+0xa4>)
 8000370:	f000 fe41 	bl	8000ff6 <I2C_ManageAcking>



	while(1){
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000374:	bf00      	nop
 8000376:	2100      	movs	r1, #0
 8000378:	481d      	ldr	r0, [pc, #116]	@ (80003f0 <main+0xa8>)
 800037a:	f000 fb9d 	bl	8000ab8 <GPIO_ReadFromInputPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000384:	f7ff ff74 	bl	8000270 <delay>

		command_code = 0x51;
 8000388:	2351      	movs	r3, #81	@ 0x51
 800038a:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle, &command_code, 1, SLAVE_ADDR,I2C_ENABLE_REPEAT_START);
 800038c:	1df9      	adds	r1, r7, #7
 800038e:	2301      	movs	r3, #1
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2368      	movs	r3, #104	@ 0x68
 8000394:	2201      	movs	r2, #1
 8000396:	4817      	ldr	r0, [pc, #92]	@ (80003f4 <main+0xac>)
 8000398:	f000 fd36 	bl	8000e08 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR,I2C_ENABLE_REPEAT_START);
 800039c:	1db9      	adds	r1, r7, #6
 800039e:	2301      	movs	r3, #1
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2368      	movs	r3, #104	@ 0x68
 80003a4:	2201      	movs	r2, #1
 80003a6:	4813      	ldr	r0, [pc, #76]	@ (80003f4 <main+0xac>)
 80003a8:	f000 fd93 	bl	8000ed2 <I2C_MasterReceiveData>

		command_code = 0x52;
 80003ac:	2352      	movs	r3, #82	@ 0x52
 80003ae:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle, &command_code, 1, SLAVE_ADDR,I2C_ENABLE_REPEAT_START);
 80003b0:	1df9      	adds	r1, r7, #7
 80003b2:	2301      	movs	r3, #1
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2368      	movs	r3, #104	@ 0x68
 80003b8:	2201      	movs	r2, #1
 80003ba:	480e      	ldr	r0, [pc, #56]	@ (80003f4 <main+0xac>)
 80003bc:	f000 fd24 	bl	8000e08 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buf, len, SLAVE_ADDR,I2C_DISABLE_REPEAT_START);
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	461a      	mov	r2, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2368      	movs	r3, #104	@ 0x68
 80003ca:	490b      	ldr	r1, [pc, #44]	@ (80003f8 <main+0xb0>)
 80003cc:	4809      	ldr	r0, [pc, #36]	@ (80003f4 <main+0xac>)
 80003ce:	f000 fd80 	bl	8000ed2 <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a08      	ldr	r2, [pc, #32]	@ (80003f8 <main+0xb0>)
 80003d8:	2100      	movs	r1, #0
 80003da:	54d1      	strb	r1, [r2, r3]

		printf("Data: %s", rcv_buf);
 80003dc:	4906      	ldr	r1, [pc, #24]	@ (80003f8 <main+0xb0>)
 80003de:	4807      	ldr	r0, [pc, #28]	@ (80003fc <main+0xb4>)
 80003e0:	f000 ff44 	bl	800126c <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003e4:	e7c6      	b.n	8000374 <main+0x2c>
 80003e6:	bf00      	nop
 80003e8:	0800201c 	.word	0x0800201c
 80003ec:	40005400 	.word	0x40005400
 80003f0:	40020000 	.word	0x40020000
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	20000098 	.word	0x20000098
 80003fc:	08002034 	.word	0x08002034

08000400 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e00a      	b.n	8000436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000420:	f3af 8000 	nop.w
 8000424:	4601      	mov	r1, r0
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	b2ca      	uxtb	r2, r1
 800042e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	3301      	adds	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	dbf0      	blt.n	8000420 <_read+0x12>
  }

  return len;
 800043e:	687b      	ldr	r3, [r7, #4]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	e009      	b.n	800046e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	60ba      	str	r2, [r7, #8]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	dbf1      	blt.n	800045a <_write+0x12>
  }
  return len;
 8000476:	687b      	ldr	r3, [r7, #4]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <_close>:

int _close(int file)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004a8:	605a      	str	r2, [r3, #4]
  return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_isatty>:

int _isatty(int file)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c0:	2301      	movs	r3, #1
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b085      	sub	sp, #20
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <_sbrk+0x5c>)
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <_sbrk+0x60>)
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <_sbrk+0x64>)
 8000506:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <_sbrk+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d207      	bcs.n	8000528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000518:	f001 f83e 	bl	8001598 <__errno>
 800051c:	4603      	mov	r3, r0
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	e009      	b.n	800053c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <_sbrk+0x64>)
 8000538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20020000 	.word	0x20020000
 8000548:	00000400 	.word	0x00000400
 800054c:	200000b8 	.word	0x200000b8
 8000550:	20000208 	.word	0x20000208

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	@ (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	@ (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f001 f80f 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fedf 	bl	8000348 <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000598:	08002080 	.word	0x08002080
  ldr r2, =_sbss
 800059c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005a0:	20000208 	.word	0x20000208

080005a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC_IRQHandler>
	...

080005a8 <GPIO_PeriClckCtrl>:
 */

#include "stm32f407_gpio_driver.h"

void GPIO_PeriClckCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d162      	bne.n	8000680 <GPIO_PeriClckCtrl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a64      	ldr	r2, [pc, #400]	@ (8000750 <GPIO_PeriClckCtrl+0x1a8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClckCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 80005c2:	4b64      	ldr	r3, [pc, #400]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a63      	ldr	r2, [pc, #396]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80005ce:	e0b9      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a61      	ldr	r2, [pc, #388]	@ (8000758 <GPIO_PeriClckCtrl+0x1b0>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClckCtrl+0x3e>
			GPIOB_PCLK_EN();
 80005d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e4:	e0ae      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a5c      	ldr	r2, [pc, #368]	@ (800075c <GPIO_PeriClckCtrl+0x1b4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClckCtrl+0x54>
			GPIOC_PCLK_EN();
 80005ee:	4b59      	ldr	r3, [pc, #356]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a58      	ldr	r2, [pc, #352]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fa:	e0a3      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a58      	ldr	r2, [pc, #352]	@ (8000760 <GPIO_PeriClckCtrl+0x1b8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <GPIO_PeriClckCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000604:	4b53      	ldr	r3, [pc, #332]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a52      	ldr	r2, [pc, #328]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000610:	e098      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a53      	ldr	r2, [pc, #332]	@ (8000764 <GPIO_PeriClckCtrl+0x1bc>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClckCtrl+0x80>
			GPIOE_PCLK_EN();
 800061a:	4b4e      	ldr	r3, [pc, #312]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a4d      	ldr	r2, [pc, #308]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000626:	e08d      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a4f      	ldr	r2, [pc, #316]	@ (8000768 <GPIO_PeriClckCtrl+0x1c0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PeriClckCtrl+0x96>
			GPIOF_PCLK_EN();
 8000630:	4b48      	ldr	r3, [pc, #288]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a47      	ldr	r2, [pc, #284]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800063c:	e082      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a4a      	ldr	r2, [pc, #296]	@ (800076c <GPIO_PeriClckCtrl+0x1c4>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PeriClckCtrl+0xac>
			GPIOG_PCLK_EN();
 8000646:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a42      	ldr	r2, [pc, #264]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800064c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000652:	e077      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a46      	ldr	r2, [pc, #280]	@ (8000770 <GPIO_PeriClckCtrl+0x1c8>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClckCtrl+0xc2>
			GPIOH_PCLK_EN();
 800065c:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a3c      	ldr	r2, [pc, #240]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000668:	e06c      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a41      	ldr	r2, [pc, #260]	@ (8000774 <GPIO_PeriClckCtrl+0x1cc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d168      	bne.n	8000744 <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_EN();
 8000672:	4b38      	ldr	r3, [pc, #224]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a37      	ldr	r2, [pc, #220]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800067e:	e061      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		if(pGPIOx == GPIOA)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a33      	ldr	r2, [pc, #204]	@ (8000750 <GPIO_PeriClckCtrl+0x1a8>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClckCtrl+0xee>
			GPIOA_PCLK_DI();
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a31      	ldr	r2, [pc, #196]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000694:	e056      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <GPIO_PeriClckCtrl+0x1b0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClckCtrl+0x104>
			GPIOB_PCLK_DI();
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006a4:	f023 0302 	bic.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006aa:	e04b      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <GPIO_PeriClckCtrl+0x1b4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <GPIO_PeriClckCtrl+0x11a>
			GPIOC_PCLK_DI();
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006ba:	f023 0304 	bic.w	r3, r3, #4
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c0:	e040      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a26      	ldr	r2, [pc, #152]	@ (8000760 <GPIO_PeriClckCtrl+0x1b8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PeriClckCtrl+0x130>
			GPIOD_PCLK_DI();
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006d0:	f023 0308 	bic.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006d6:	e035      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <GPIO_PeriClckCtrl+0x1bc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <GPIO_PeriClckCtrl+0x146>
			GPIOE_PCLK_DI();
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006e6:	f023 0310 	bic.w	r3, r3, #16
 80006ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ec:	e02a      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000768 <GPIO_PeriClckCtrl+0x1c0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <GPIO_PeriClckCtrl+0x15c>
			GPIOF_PCLK_DI();
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 80006fc:	f023 0320 	bic.w	r3, r3, #32
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000702:	e01f      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <GPIO_PeriClckCtrl+0x1c4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d106      	bne.n	800071a <GPIO_PeriClckCtrl+0x172>
			GPIOG_PCLK_DI();
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000718:	e014      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <GPIO_PeriClckCtrl+0x1c8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d106      	bne.n	8000730 <GPIO_PeriClckCtrl+0x188>
			GPIOH_PCLK_DI();
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 8000728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800072e:	e009      	b.n	8000744 <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <GPIO_PeriClckCtrl+0x1cc>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d105      	bne.n	8000744 <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_DI();
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073c:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <GPIO_PeriClckCtrl+0x1ac>)
 800073e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000742:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40020000 	.word	0x40020000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800
 8000760:	40020c00 	.word	0x40020c00
 8000764:	40021000 	.word	0x40021000
 8000768:	40021400 	.word	0x40021400
 800076c:	40021800 	.word	0x40021800
 8000770:	40021c00 	.word	0x40021c00
 8000774:	40022000 	.word	0x40022000

08000778 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

	GPIO_PeriClckCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff0c 	bl	80005a8 <GPIO_PeriClckCtrl>

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	795b      	ldrb	r3, [r3, #5]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d81f      	bhi.n	80007d8 <GPIO_Init+0x60>
	{
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2303      	movs	r3, #3
 80007b8:	408b      	lsls	r3, r1
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	400a      	ands	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting bits
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e0ca      	b.n	800096e <GPIO_Init+0x1f6>

	}else
	{
		//interrupt mode (TODO)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d117      	bne.n	8000810 <GPIO_Init+0x98>

			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e0:	4b4a      	ldr	r3, [pc, #296]	@ (800090c <GPIO_Init+0x194>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	7912      	ldrb	r2, [r2, #4]
 80007e8:	4611      	mov	r1, r2
 80007ea:	2201      	movs	r2, #1
 80007ec:	408a      	lsls	r2, r1
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a46      	ldr	r2, [pc, #280]	@ (800090c <GPIO_Init+0x194>)
 80007f2:	430b      	orrs	r3, r1
 80007f4:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f6:	4b45      	ldr	r3, [pc, #276]	@ (800090c <GPIO_Init+0x194>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	7912      	ldrb	r2, [r2, #4]
 80007fe:	4611      	mov	r1, r2
 8000800:	2201      	movs	r2, #1
 8000802:	408a      	lsls	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a40      	ldr	r2, [pc, #256]	@ (800090c <GPIO_Init+0x194>)
 800080a:	400b      	ands	r3, r1
 800080c:	6093      	str	r3, [r2, #8]
 800080e:	e035      	b.n	800087c <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	795b      	ldrb	r3, [r3, #5]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d117      	bne.n	8000848 <GPIO_Init+0xd0>
			//1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000818:	4b3c      	ldr	r3, [pc, #240]	@ (800090c <GPIO_Init+0x194>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7912      	ldrb	r2, [r2, #4]
 8000820:	4611      	mov	r1, r2
 8000822:	2201      	movs	r2, #1
 8000824:	408a      	lsls	r2, r1
 8000826:	4611      	mov	r1, r2
 8000828:	4a38      	ldr	r2, [pc, #224]	@ (800090c <GPIO_Init+0x194>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082e:	4b37      	ldr	r3, [pc, #220]	@ (800090c <GPIO_Init+0x194>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7912      	ldrb	r2, [r2, #4]
 8000836:	4611      	mov	r1, r2
 8000838:	2201      	movs	r2, #1
 800083a:	408a      	lsls	r2, r1
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a32      	ldr	r2, [pc, #200]	@ (800090c <GPIO_Init+0x194>)
 8000842:	400b      	ands	r3, r1
 8000844:	60d3      	str	r3, [r2, #12]
 8000846:	e019      	b.n	800087c <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	795b      	ldrb	r3, [r3, #5]
 800084c:	2b06      	cmp	r3, #6
 800084e:	d115      	bne.n	800087c <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000850:	4b2e      	ldr	r3, [pc, #184]	@ (800090c <GPIO_Init+0x194>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	7912      	ldrb	r2, [r2, #4]
 8000858:	4611      	mov	r1, r2
 800085a:	2201      	movs	r2, #1
 800085c:	408a      	lsls	r2, r1
 800085e:	4611      	mov	r1, r2
 8000860:	4a2a      	ldr	r2, [pc, #168]	@ (800090c <GPIO_Init+0x194>)
 8000862:	430b      	orrs	r3, r1
 8000864:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000866:	4b29      	ldr	r3, [pc, #164]	@ (800090c <GPIO_Init+0x194>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7912      	ldrb	r2, [r2, #4]
 800086e:	4611      	mov	r1, r2
 8000870:	2201      	movs	r2, #1
 8000872:	408a      	lsls	r2, r1
 8000874:	4611      	mov	r1, r2
 8000876:	4a25      	ldr	r2, [pc, #148]	@ (800090c <GPIO_Init+0x194>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6093      	str	r3, [r2, #8]

		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1f      	ldr	r2, [pc, #124]	@ (8000910 <GPIO_Init+0x198>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d04d      	beq.n	8000934 <GPIO_Init+0x1bc>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <GPIO_Init+0x19c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d032      	beq.n	8000908 <GPIO_Init+0x190>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <GPIO_Init+0x1a0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d02b      	beq.n	8000904 <GPIO_Init+0x18c>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <GPIO_Init+0x1a4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d024      	beq.n	8000900 <GPIO_Init+0x188>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a19      	ldr	r2, [pc, #100]	@ (8000920 <GPIO_Init+0x1a8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d01d      	beq.n	80008fc <GPIO_Init+0x184>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <GPIO_Init+0x1ac>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d016      	beq.n	80008f8 <GPIO_Init+0x180>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <GPIO_Init+0x1b0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d00f      	beq.n	80008f4 <GPIO_Init+0x17c>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <GPIO_Init+0x1b4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d008      	beq.n	80008f0 <GPIO_Init+0x178>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <GPIO_Init+0x1b8>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d101      	bne.n	80008ec <GPIO_Init+0x174>
 80008e8:	2308      	movs	r3, #8
 80008ea:	e024      	b.n	8000936 <GPIO_Init+0x1be>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e022      	b.n	8000936 <GPIO_Init+0x1be>
 80008f0:	2307      	movs	r3, #7
 80008f2:	e020      	b.n	8000936 <GPIO_Init+0x1be>
 80008f4:	2306      	movs	r3, #6
 80008f6:	e01e      	b.n	8000936 <GPIO_Init+0x1be>
 80008f8:	2305      	movs	r3, #5
 80008fa:	e01c      	b.n	8000936 <GPIO_Init+0x1be>
 80008fc:	2304      	movs	r3, #4
 80008fe:	e01a      	b.n	8000936 <GPIO_Init+0x1be>
 8000900:	2303      	movs	r3, #3
 8000902:	e018      	b.n	8000936 <GPIO_Init+0x1be>
 8000904:	2302      	movs	r3, #2
 8000906:	e016      	b.n	8000936 <GPIO_Init+0x1be>
 8000908:	2301      	movs	r3, #1
 800090a:	e014      	b.n	8000936 <GPIO_Init+0x1be>
 800090c:	40013c00 	.word	0x40013c00
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40021000 	.word	0x40021000
 8000924:	40021400 	.word	0x40021400
 8000928:	40021800 	.word	0x40021800
 800092c:	40021c00 	.word	0x40021c00
 8000930:	40022000 	.word	0x40022000
 8000934:	2300      	movs	r3, #0
 8000936:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <GPIO_Init+0x334>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093c:	4a5b      	ldr	r2, [pc, #364]	@ (8000aac <GPIO_Init+0x334>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000942:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000944:	7c7a      	ldrb	r2, [r7, #17]
 8000946:	7cbb      	ldrb	r3, [r7, #18]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	fa02 f103 	lsl.w	r1, r2, r3
 800094e:	4a58      	ldr	r2, [pc, #352]	@ (8000ab0 <GPIO_Init+0x338>)
 8000950:	7cfb      	ldrb	r3, [r7, #19]
 8000952:	3302      	adds	r3, #2
 8000954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000958:	4b56      	ldr	r3, [pc, #344]	@ (8000ab4 <GPIO_Init+0x33c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	7912      	ldrb	r2, [r2, #4]
 8000960:	4611      	mov	r1, r2
 8000962:	2201      	movs	r2, #1
 8000964:	408a      	lsls	r2, r1
 8000966:	4611      	mov	r1, r2
 8000968:	4a52      	ldr	r2, [pc, #328]	@ (8000ab4 <GPIO_Init+0x33c>)
 800096a:	430b      	orrs	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	4619      	mov	r1, r3
 8000990:	2303      	movs	r3, #3
 8000992:	408b      	lsls	r3, r1
 8000994:	43db      	mvns	r3, r3
 8000996:	4619      	mov	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	400a      	ands	r2, r1
 800099e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6899      	ldr	r1, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	609a      	str	r2, [r3, #8]
	temp = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]


	//3. configure pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	79db      	ldrb	r3, [r3, #7]
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	4619      	mov	r1, r3
 80009d2:	2303      	movs	r3, #3
 80009d4:	408b      	lsls	r3, r1
 80009d6:	43db      	mvns	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	400a      	ands	r2, r1
 80009e0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68d9      	ldr	r1, [r3, #12]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	430a      	orrs	r2, r1
 80009f0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a1b      	ldrb	r3, [r3, #8]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	2301      	movs	r3, #1
 8000a14:	408b      	lsls	r3, r1
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6859      	ldr	r1, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	795b      	ldrb	r3, [r3, #5]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d131      	bne.n	8000aa2 <GPIO_Init+0x32a>
	{
		//configure alt fun registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	7c3a      	ldrb	r2, [r7, #16]
 8000a56:	3208      	adds	r2, #8
 8000a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	220f      	movs	r2, #15
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	7c3a      	ldrb	r2, [r7, #16]
 8000a70:	4001      	ands	r1, r0
 8000a72:	3208      	adds	r2, #8
 8000a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	7c3a      	ldrb	r2, [r7, #16]
 8000a7e:	3208      	adds	r2, #8
 8000a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7a5b      	ldrb	r3, [r3, #9]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	7c3a      	ldrb	r2, [r7, #16]
 8000a9a:	4301      	orrs	r1, r0
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40013c00 	.word	0x40013c00

08000ab8 <GPIO_ReadFromInputPin>:


}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691a      	ldr	r2, [r3, #16]
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]

	return value;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <I2C_PeriClckCtrl>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

void I2C_PeriClckCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d120      	bne.n	8000b38 <I2C_PeriClckCtrl+0x54>
	{
		if(pI2Cx == I2C1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a22      	ldr	r2, [pc, #136]	@ (8000b84 <I2C_PeriClckCtrl+0xa0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <I2C_PeriClckCtrl+0x28>
		{
			I2C1_PCLK_EN();
 8000afe:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
		{
			I2C3_PCLK_DI();
		}

	}
}
 8000b0a:	e035      	b.n	8000b78 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <I2C_PeriClckCtrl+0xa8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d106      	bne.n	8000b22 <I2C_PeriClckCtrl+0x3e>
			I2C2_PCLK_EN();
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b20:	e02a      	b.n	8000b78 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a1a      	ldr	r2, [pc, #104]	@ (8000b90 <I2C_PeriClckCtrl+0xac>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d126      	bne.n	8000b78 <I2C_PeriClckCtrl+0x94>
			I2C3_PCLK_EN();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b36:	e01f      	b.n	8000b78 <I2C_PeriClckCtrl+0x94>
		if(pI2Cx == I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <I2C_PeriClckCtrl+0xa0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d106      	bne.n	8000b4e <I2C_PeriClckCtrl+0x6a>
			I2C1_PCLK_DI();
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b4c:	e014      	b.n	8000b78 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <I2C_PeriClckCtrl+0xa8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <I2C_PeriClckCtrl+0x80>
			I2C2_PCLK_DI();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b5c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b62:	e009      	b.n	8000b78 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <I2C_PeriClckCtrl+0xac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d105      	bne.n	8000b78 <I2C_PeriClckCtrl+0x94>
			I2C3_PCLK_DI();
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <I2C_PeriClckCtrl+0xa4>)
 8000b72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	40005c00 	.word	0x40005c00

08000b94 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000bb2:	e005      	b.n	8000bc0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f023 0201 	bic.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <RCC_GetPLLOutPutClock>:

uint32_t RCC_GetPLLOutPutClock()
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	// TODO
}
 8000bd0:	bf00      	nop
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <RCC_GetPCLK1Value+0x98>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000c18:	7a7b      	ldrb	r3, [r7, #9]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00b      	beq.n	8000c36 <RCC_GetPCLK1Value+0x32>
	{
		SystemClk == 16000000;
	}
	else if (clksrc == 1)
 8000c1e:	7a7b      	ldrb	r3, [r7, #9]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d102      	bne.n	8000c2a <RCC_GetPCLK1Value+0x26>
	{
		SystemClk = 8000000;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <RCC_GetPCLK1Value+0x9c>)
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e005      	b.n	8000c36 <RCC_GetPCLK1Value+0x32>
	}
	else if (clksrc == 2)
 8000c2a:	7a7b      	ldrb	r3, [r7, #9]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d102      	bne.n	8000c36 <RCC_GetPCLK1Value+0x32>
	{
		SystemClk = RCC_GetPLLOutPutClock();
 8000c30:	f7ff ffcc 	bl	8000bcc <RCC_GetPLLOutPutClock>
 8000c34:	60f8      	str	r0, [r7, #12]
	}

	temp = (RCC->CFGR >> 4) & 0xf;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <RCC_GetPCLK1Value+0x98>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000c44:	7a3b      	ldrb	r3, [r7, #8]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d802      	bhi.n	8000c50 <RCC_GetPCLK1Value+0x4c>
	{
		ahbp = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	e005      	b.n	8000c5c <RCC_GetPCLK1Value+0x58>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8000c50:	7a3b      	ldrb	r3, [r7, #8]
 8000c52:	3b08      	subs	r3, #8
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <RCC_GetPCLK1Value+0xa0>)
 8000c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5a:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 10) & 0x7;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <RCC_GetPCLK1Value+0x98>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	0a9b      	lsrs	r3, r3, #10
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000c6a:	7a3b      	ldrb	r3, [r7, #8]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d802      	bhi.n	8000c76 <RCC_GetPCLK1Value+0x72>
	{
		apb1p = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	72bb      	strb	r3, [r7, #10]
 8000c74:	e004      	b.n	8000c80 <RCC_GetPCLK1Value+0x7c>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <RCC_GetPCLK1Value+0xa4>)
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	72bb      	strb	r3, [r7, #10]
	}

		pclk1 = (SystemClk / ahbp) / apb1p;
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c88:	7abb      	ldrb	r3, [r7, #10]
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	007a1200 	.word	0x007a1200
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000010 	.word	0x20000010

08000cac <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]

	//enable the clock for i2cx peripheral
	I2C_PeriClckCtrl(pI2CHandle->pI2Cx, ENABLE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff10 	bl	8000ae4 <I2C_PeriClckCtrl>


	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a5b      	ldrb	r3, [r3, #9]
 8000cc8:	029b      	lsls	r3, r3, #10
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000cdc:	f7ff ff92 	bl	8000c04 <RCC_GetPCLK1Value>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a46      	ldr	r2, [pc, #280]	@ (8000dfc <I2C_Init+0x150>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cfa:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a36      	ldr	r2, [pc, #216]	@ (8000e00 <I2C_Init+0x154>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d80f      	bhi.n	8000d4a <I2C_Init+0x9e>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000d2a:	f7ff ff6b 	bl	8000c04 <RCC_GetPCLK1Value>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e02c      	b.n	8000da4 <I2C_Init+0xf8>
	}else
	{
		//mode is fast mode
		tempreg |= (1 << 15);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d50:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7a9b      	ldrb	r3, [r3, #10]
 8000d56:	039b      	lsls	r3, r3, #14
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a9b      	ldrb	r3, [r3, #10]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10b      	bne.n	8000d7e <I2C_Init+0xd2>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000d66:	f7ff ff4d 	bl	8000c04 <RCC_GetPCLK1Value>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d7a:	817b      	strh	r3, [r7, #10]
 8000d7c:	e00c      	b.n	8000d98 <I2C_Init+0xec>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000d7e:	f7ff ff41 	bl	8000c04 <RCC_GetPCLK1Value>
 8000d82:	4601      	mov	r1, r0
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009a      	lsls	r2, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d96:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xfff);
 8000d98:	897b      	ldrh	r3, [r7, #10]
 8000d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR = tempreg;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a13      	ldr	r2, [pc, #76]	@ (8000e00 <I2C_Init+0x154>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d809      	bhi.n	8000dca <I2C_Init+0x11e>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000db6:	f7ff ff25 	bl	8000c04 <RCC_GetPCLK1Value>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <I2C_Init+0x150>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9b      	lsrs	r3, r3, #18
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e00d      	b.n	8000de6 <I2C_Init+0x13a>

	}else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000dca:	f7ff ff1b 	bl	8000c04 <RCC_GetPCLK1Value>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000dd4:	fb02 f303 	mul.w	r3, r2, r3
 8000dd8:	0a5b      	lsrs	r3, r3, #9
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <I2C_Init+0x158>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	09db      	lsrs	r3, r3, #7
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3f);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000df0:	621a      	str	r2, [r3, #32]
	//3. Configure the device address (Applicable when device is slave)

	//4. Enable the Acking

	//5. Configure the rise time for I2C pins
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	000186a0 	.word	0x000186a0
 8000e04:	00044b83 	.word	0x00044b83

08000e08 <I2C_MasterSendData>:
		I2C3_REG_RESET();
	}
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t RepeatStart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f907 	bl	800102e <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) );
 8000e20:	bf00      	nop
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fed7 	bl	8000bdc <I2C_GetFlagStatus>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f6      	beq.n	8000e22 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	78fa      	ldrb	r2, [r7, #3]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f916 	bl	800106e <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm the address phase is completed by checking the ADDR flag in the SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 8000e42:	bf00      	nop
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fec6 	bl	8000bdc <I2C_GetFlagStatus>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f6      	beq.n	8000e44 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	// note: until ADDR is cleared SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f933 	bl	80010c6 <I2C_ClearADDRFlag>

	//6. send data until len becomes 0
	while(Len > 0)
 8000e60:	e014      	b.n	8000e8c <I2C_MasterSendData+0x84>
	{
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) ); // wait until TXE is set
 8000e62:	bf00      	nop
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2180      	movs	r1, #128	@ 0x80
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff feb6 	bl	8000bdc <I2C_GetFlagStatus>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f6      	beq.n	8000e64 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
		Len--;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1e7      	bne.n	8000e62 <I2C_MasterSendData+0x5a>
	}

	//7. When Len becomes 0 wait for TXE=1 and BTF=1 before generating the STOP condition
	// Note: TXE=1 , BTF=1 means that both SR and DRare empty and next transmission should begin
	// when BTF=1 SCL will be stretched
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) );
 8000e92:	bf00      	nop
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe9e 	bl	8000bdc <I2C_GetFlagStatus>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f6      	beq.n	8000e94 <I2C_MasterSendData+0x8c>

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) );
 8000ea6:	bf00      	nop
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2104      	movs	r1, #4
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe94 	bl	8000bdc <I2C_GetFlagStatus>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f6      	beq.n	8000ea8 <I2C_MasterSendData+0xa0>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	// NOTE: Generating STOP, automatically clears BTF
	if(RepeatStart == I2C_DISABLE_REPEAT_START)
 8000eba:	7e3b      	ldrb	r3, [r7, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <I2C_MasterSendData+0xc2>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8c2 	bl	800104e <I2C_GenerateStopCondition>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t RepeatStart)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f8a2 	bl	800102e <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) );
 8000eea:	bf00      	nop
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe72 	bl	8000bdc <I2C_GetFlagStatus>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f6      	beq.n	8000eec <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f8c7 	bl	800109a <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 8000f0c:	bf00      	nop
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2102      	movs	r1, #2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe61 	bl	8000bdc <I2C_GetFlagStatus>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f6      	beq.n	8000f0e <I2C_MasterReceiveData+0x3c>

	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d123      	bne.n	8000f6e <I2C_MasterReceiveData+0x9c>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f862 	bl	8000ff6 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8c5 	bl	80010c6 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) );
 8000f3c:	bf00      	nop
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2140      	movs	r1, #64	@ 0x40
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe49 	bl	8000bdc <I2C_GetFlagStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f6      	beq.n	8000f3e <I2C_MasterReceiveData+0x6c>

		//generate STOP condition
		if(RepeatStart == I2C_DISABLE_REPEAT_START)
 8000f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <I2C_MasterReceiveData+0x90>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f876 	bl	800104e <I2C_GenerateStopCondition>
		}

		//read data into buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	701a      	strb	r2, [r3, #0]

	}

	if(Len > 1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d932      	bls.n	8000fda <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f8a4 	bl	80010c6 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for(uint32_t i = Len; i > 0; i--){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e027      	b.n	8000fd4 <I2C_MasterReceiveData+0x102>

			//wait until RXNE becomes 1
			while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) );
 8000f84:	bf00      	nop
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2140      	movs	r1, #64	@ 0x40
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe25 	bl	8000bdc <I2C_GetFlagStatus>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f6      	beq.n	8000f86 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d10e      	bne.n	8000fbc <I2C_MasterReceiveData+0xea>
			{
				//Disable ACKing
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f826 	bl	8000ff6 <I2C_ManageAcking>

				//generate STOP condition
				if(RepeatStart == I2C_DISABLE_REPEAT_START)
 8000faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d104      	bne.n	8000fbc <I2C_MasterReceiveData+0xea>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f849 	bl	800104e <I2C_GenerateStopCondition>
				}
			}

			//read the data from data register in to buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxbuffer++;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--){
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1d4      	bne.n	8000f84 <I2C_MasterReceiveData+0xb2>
	}
}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	7a5b      	ldrb	r3, [r3, #9]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d105      	bne.n	8000fee <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f804 	bl	8000ff6 <I2C_ManageAcking>
	}

}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d106      	bne.n	8001016 <I2C_ManageAcking+0x20>
	{
		//enalbe the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001014:	e005      	b.n	8001022 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // SlaveAddr is Slave addr + r/nw bit=0
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; // SlaveAddr is Slave addr + r/nw bit=1
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <std>:
 80010e8:	2300      	movs	r3, #0
 80010ea:	b510      	push	{r4, lr}
 80010ec:	4604      	mov	r4, r0
 80010ee:	e9c0 3300 	strd	r3, r3, [r0]
 80010f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010f6:	6083      	str	r3, [r0, #8]
 80010f8:	8181      	strh	r1, [r0, #12]
 80010fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80010fc:	81c2      	strh	r2, [r0, #14]
 80010fe:	6183      	str	r3, [r0, #24]
 8001100:	4619      	mov	r1, r3
 8001102:	2208      	movs	r2, #8
 8001104:	305c      	adds	r0, #92	@ 0x5c
 8001106:	f000 f9f9 	bl	80014fc <memset>
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <std+0x58>)
 800110c:	6263      	str	r3, [r4, #36]	@ 0x24
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <std+0x5c>)
 8001110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <std+0x60>)
 8001114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <std+0x64>)
 8001118:	6323      	str	r3, [r4, #48]	@ 0x30
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <std+0x68>)
 800111c:	6224      	str	r4, [r4, #32]
 800111e:	429c      	cmp	r4, r3
 8001120:	d006      	beq.n	8001130 <std+0x48>
 8001122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001126:	4294      	cmp	r4, r2
 8001128:	d002      	beq.n	8001130 <std+0x48>
 800112a:	33d0      	adds	r3, #208	@ 0xd0
 800112c:	429c      	cmp	r4, r3
 800112e:	d105      	bne.n	800113c <std+0x54>
 8001130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001138:	f000 ba58 	b.w	80015ec <__retarget_lock_init_recursive>
 800113c:	bd10      	pop	{r4, pc}
 800113e:	bf00      	nop
 8001140:	0800134d 	.word	0x0800134d
 8001144:	0800136f 	.word	0x0800136f
 8001148:	080013a7 	.word	0x080013a7
 800114c:	080013cb 	.word	0x080013cb
 8001150:	200000bc 	.word	0x200000bc

08001154 <stdio_exit_handler>:
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <stdio_exit_handler+0xc>)
 8001156:	4903      	ldr	r1, [pc, #12]	@ (8001164 <stdio_exit_handler+0x10>)
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <stdio_exit_handler+0x14>)
 800115a:	f000 b869 	b.w	8001230 <_fwalk_sglue>
 800115e:	bf00      	nop
 8001160:	20000014 	.word	0x20000014
 8001164:	08001e8d 	.word	0x08001e8d
 8001168:	20000024 	.word	0x20000024

0800116c <cleanup_stdio>:
 800116c:	6841      	ldr	r1, [r0, #4]
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <cleanup_stdio+0x34>)
 8001170:	4299      	cmp	r1, r3
 8001172:	b510      	push	{r4, lr}
 8001174:	4604      	mov	r4, r0
 8001176:	d001      	beq.n	800117c <cleanup_stdio+0x10>
 8001178:	f000 fe88 	bl	8001e8c <_fflush_r>
 800117c:	68a1      	ldr	r1, [r4, #8]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <cleanup_stdio+0x38>)
 8001180:	4299      	cmp	r1, r3
 8001182:	d002      	beq.n	800118a <cleanup_stdio+0x1e>
 8001184:	4620      	mov	r0, r4
 8001186:	f000 fe81 	bl	8001e8c <_fflush_r>
 800118a:	68e1      	ldr	r1, [r4, #12]
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <cleanup_stdio+0x3c>)
 800118e:	4299      	cmp	r1, r3
 8001190:	d004      	beq.n	800119c <cleanup_stdio+0x30>
 8001192:	4620      	mov	r0, r4
 8001194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001198:	f000 be78 	b.w	8001e8c <_fflush_r>
 800119c:	bd10      	pop	{r4, pc}
 800119e:	bf00      	nop
 80011a0:	200000bc 	.word	0x200000bc
 80011a4:	20000124 	.word	0x20000124
 80011a8:	2000018c 	.word	0x2000018c

080011ac <global_stdio_init.part.0>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <global_stdio_init.part.0+0x30>)
 80011b0:	4c0b      	ldr	r4, [pc, #44]	@ (80011e0 <global_stdio_init.part.0+0x34>)
 80011b2:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <global_stdio_init.part.0+0x38>)
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4620      	mov	r0, r4
 80011b8:	2200      	movs	r2, #0
 80011ba:	2104      	movs	r1, #4
 80011bc:	f7ff ff94 	bl	80010e8 <std>
 80011c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011c4:	2201      	movs	r2, #1
 80011c6:	2109      	movs	r1, #9
 80011c8:	f7ff ff8e 	bl	80010e8 <std>
 80011cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011d0:	2202      	movs	r2, #2
 80011d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011d6:	2112      	movs	r1, #18
 80011d8:	f7ff bf86 	b.w	80010e8 <std>
 80011dc:	200001f4 	.word	0x200001f4
 80011e0:	200000bc 	.word	0x200000bc
 80011e4:	08001155 	.word	0x08001155

080011e8 <__sfp_lock_acquire>:
 80011e8:	4801      	ldr	r0, [pc, #4]	@ (80011f0 <__sfp_lock_acquire+0x8>)
 80011ea:	f000 ba00 	b.w	80015ee <__retarget_lock_acquire_recursive>
 80011ee:	bf00      	nop
 80011f0:	200001fd 	.word	0x200001fd

080011f4 <__sfp_lock_release>:
 80011f4:	4801      	ldr	r0, [pc, #4]	@ (80011fc <__sfp_lock_release+0x8>)
 80011f6:	f000 b9fb 	b.w	80015f0 <__retarget_lock_release_recursive>
 80011fa:	bf00      	nop
 80011fc:	200001fd 	.word	0x200001fd

08001200 <__sinit>:
 8001200:	b510      	push	{r4, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	f7ff fff0 	bl	80011e8 <__sfp_lock_acquire>
 8001208:	6a23      	ldr	r3, [r4, #32]
 800120a:	b11b      	cbz	r3, 8001214 <__sinit+0x14>
 800120c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001210:	f7ff bff0 	b.w	80011f4 <__sfp_lock_release>
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__sinit+0x28>)
 8001216:	6223      	str	r3, [r4, #32]
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__sinit+0x2c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f5      	bne.n	800120c <__sinit+0xc>
 8001220:	f7ff ffc4 	bl	80011ac <global_stdio_init.part.0>
 8001224:	e7f2      	b.n	800120c <__sinit+0xc>
 8001226:	bf00      	nop
 8001228:	0800116d 	.word	0x0800116d
 800122c:	200001f4 	.word	0x200001f4

08001230 <_fwalk_sglue>:
 8001230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001234:	4607      	mov	r7, r0
 8001236:	4688      	mov	r8, r1
 8001238:	4614      	mov	r4, r2
 800123a:	2600      	movs	r6, #0
 800123c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001240:	f1b9 0901 	subs.w	r9, r9, #1
 8001244:	d505      	bpl.n	8001252 <_fwalk_sglue+0x22>
 8001246:	6824      	ldr	r4, [r4, #0]
 8001248:	2c00      	cmp	r4, #0
 800124a:	d1f7      	bne.n	800123c <_fwalk_sglue+0xc>
 800124c:	4630      	mov	r0, r6
 800124e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001252:	89ab      	ldrh	r3, [r5, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d907      	bls.n	8001268 <_fwalk_sglue+0x38>
 8001258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800125c:	3301      	adds	r3, #1
 800125e:	d003      	beq.n	8001268 <_fwalk_sglue+0x38>
 8001260:	4629      	mov	r1, r5
 8001262:	4638      	mov	r0, r7
 8001264:	47c0      	blx	r8
 8001266:	4306      	orrs	r6, r0
 8001268:	3568      	adds	r5, #104	@ 0x68
 800126a:	e7e9      	b.n	8001240 <_fwalk_sglue+0x10>

0800126c <iprintf>:
 800126c:	b40f      	push	{r0, r1, r2, r3}
 800126e:	b507      	push	{r0, r1, r2, lr}
 8001270:	4906      	ldr	r1, [pc, #24]	@ (800128c <iprintf+0x20>)
 8001272:	ab04      	add	r3, sp, #16
 8001274:	6808      	ldr	r0, [r1, #0]
 8001276:	f853 2b04 	ldr.w	r2, [r3], #4
 800127a:	6881      	ldr	r1, [r0, #8]
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f000 fadb 	bl	8001838 <_vfiprintf_r>
 8001282:	b003      	add	sp, #12
 8001284:	f85d eb04 	ldr.w	lr, [sp], #4
 8001288:	b004      	add	sp, #16
 800128a:	4770      	bx	lr
 800128c:	20000020 	.word	0x20000020

08001290 <_puts_r>:
 8001290:	6a03      	ldr	r3, [r0, #32]
 8001292:	b570      	push	{r4, r5, r6, lr}
 8001294:	6884      	ldr	r4, [r0, #8]
 8001296:	4605      	mov	r5, r0
 8001298:	460e      	mov	r6, r1
 800129a:	b90b      	cbnz	r3, 80012a0 <_puts_r+0x10>
 800129c:	f7ff ffb0 	bl	8001200 <__sinit>
 80012a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012a2:	07db      	lsls	r3, r3, #31
 80012a4:	d405      	bmi.n	80012b2 <_puts_r+0x22>
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	0598      	lsls	r0, r3, #22
 80012aa:	d402      	bmi.n	80012b2 <_puts_r+0x22>
 80012ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ae:	f000 f99e 	bl	80015ee <__retarget_lock_acquire_recursive>
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	0719      	lsls	r1, r3, #28
 80012b6:	d502      	bpl.n	80012be <_puts_r+0x2e>
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d135      	bne.n	800132a <_puts_r+0x9a>
 80012be:	4621      	mov	r1, r4
 80012c0:	4628      	mov	r0, r5
 80012c2:	f000 f8c5 	bl	8001450 <__swsetup_r>
 80012c6:	b380      	cbz	r0, 800132a <_puts_r+0x9a>
 80012c8:	f04f 35ff 	mov.w	r5, #4294967295
 80012cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012ce:	07da      	lsls	r2, r3, #31
 80012d0:	d405      	bmi.n	80012de <_puts_r+0x4e>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	059b      	lsls	r3, r3, #22
 80012d6:	d402      	bmi.n	80012de <_puts_r+0x4e>
 80012d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012da:	f000 f989 	bl	80015f0 <__retarget_lock_release_recursive>
 80012de:	4628      	mov	r0, r5
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da04      	bge.n	80012f0 <_puts_r+0x60>
 80012e6:	69a2      	ldr	r2, [r4, #24]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dc17      	bgt.n	800131c <_puts_r+0x8c>
 80012ec:	290a      	cmp	r1, #10
 80012ee:	d015      	beq.n	800131c <_puts_r+0x8c>
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	6022      	str	r2, [r4, #0]
 80012f6:	7019      	strb	r1, [r3, #0]
 80012f8:	68a3      	ldr	r3, [r4, #8]
 80012fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012fe:	3b01      	subs	r3, #1
 8001300:	60a3      	str	r3, [r4, #8]
 8001302:	2900      	cmp	r1, #0
 8001304:	d1ed      	bne.n	80012e2 <_puts_r+0x52>
 8001306:	2b00      	cmp	r3, #0
 8001308:	da11      	bge.n	800132e <_puts_r+0x9e>
 800130a:	4622      	mov	r2, r4
 800130c:	210a      	movs	r1, #10
 800130e:	4628      	mov	r0, r5
 8001310:	f000 f85f 	bl	80013d2 <__swbuf_r>
 8001314:	3001      	adds	r0, #1
 8001316:	d0d7      	beq.n	80012c8 <_puts_r+0x38>
 8001318:	250a      	movs	r5, #10
 800131a:	e7d7      	b.n	80012cc <_puts_r+0x3c>
 800131c:	4622      	mov	r2, r4
 800131e:	4628      	mov	r0, r5
 8001320:	f000 f857 	bl	80013d2 <__swbuf_r>
 8001324:	3001      	adds	r0, #1
 8001326:	d1e7      	bne.n	80012f8 <_puts_r+0x68>
 8001328:	e7ce      	b.n	80012c8 <_puts_r+0x38>
 800132a:	3e01      	subs	r6, #1
 800132c:	e7e4      	b.n	80012f8 <_puts_r+0x68>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	6022      	str	r2, [r4, #0]
 8001334:	220a      	movs	r2, #10
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e7ee      	b.n	8001318 <_puts_r+0x88>
	...

0800133c <puts>:
 800133c:	4b02      	ldr	r3, [pc, #8]	@ (8001348 <puts+0xc>)
 800133e:	4601      	mov	r1, r0
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff bfa5 	b.w	8001290 <_puts_r>
 8001346:	bf00      	nop
 8001348:	20000020 	.word	0x20000020

0800134c <__sread>:
 800134c:	b510      	push	{r4, lr}
 800134e:	460c      	mov	r4, r1
 8001350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001354:	f000 f8fc 	bl	8001550 <_read_r>
 8001358:	2800      	cmp	r0, #0
 800135a:	bfab      	itete	ge
 800135c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800135e:	89a3      	ldrhlt	r3, [r4, #12]
 8001360:	181b      	addge	r3, r3, r0
 8001362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001366:	bfac      	ite	ge
 8001368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800136a:	81a3      	strhlt	r3, [r4, #12]
 800136c:	bd10      	pop	{r4, pc}

0800136e <__swrite>:
 800136e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001372:	461f      	mov	r7, r3
 8001374:	898b      	ldrh	r3, [r1, #12]
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	4605      	mov	r5, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4616      	mov	r6, r2
 800137e:	d505      	bpl.n	800138c <__swrite+0x1e>
 8001380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001384:	2302      	movs	r3, #2
 8001386:	2200      	movs	r2, #0
 8001388:	f000 f8d0 	bl	800152c <_lseek_r>
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001396:	81a3      	strh	r3, [r4, #12]
 8001398:	4632      	mov	r2, r6
 800139a:	463b      	mov	r3, r7
 800139c:	4628      	mov	r0, r5
 800139e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	f000 b8e7 	b.w	8001574 <_write_r>

080013a6 <__sseek>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	460c      	mov	r4, r1
 80013aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ae:	f000 f8bd 	bl	800152c <_lseek_r>
 80013b2:	1c43      	adds	r3, r0, #1
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	bf15      	itete	ne
 80013b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80013ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80013be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80013c2:	81a3      	strheq	r3, [r4, #12]
 80013c4:	bf18      	it	ne
 80013c6:	81a3      	strhne	r3, [r4, #12]
 80013c8:	bd10      	pop	{r4, pc}

080013ca <__sclose>:
 80013ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ce:	f000 b89d 	b.w	800150c <_close_r>

080013d2 <__swbuf_r>:
 80013d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d4:	460e      	mov	r6, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	4605      	mov	r5, r0
 80013da:	b118      	cbz	r0, 80013e4 <__swbuf_r+0x12>
 80013dc:	6a03      	ldr	r3, [r0, #32]
 80013de:	b90b      	cbnz	r3, 80013e4 <__swbuf_r+0x12>
 80013e0:	f7ff ff0e 	bl	8001200 <__sinit>
 80013e4:	69a3      	ldr	r3, [r4, #24]
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	89a3      	ldrh	r3, [r4, #12]
 80013ea:	071a      	lsls	r2, r3, #28
 80013ec:	d501      	bpl.n	80013f2 <__swbuf_r+0x20>
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	b943      	cbnz	r3, 8001404 <__swbuf_r+0x32>
 80013f2:	4621      	mov	r1, r4
 80013f4:	4628      	mov	r0, r5
 80013f6:	f000 f82b 	bl	8001450 <__swsetup_r>
 80013fa:	b118      	cbz	r0, 8001404 <__swbuf_r+0x32>
 80013fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001400:	4638      	mov	r0, r7
 8001402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	6922      	ldr	r2, [r4, #16]
 8001408:	1a98      	subs	r0, r3, r2
 800140a:	6963      	ldr	r3, [r4, #20]
 800140c:	b2f6      	uxtb	r6, r6
 800140e:	4283      	cmp	r3, r0
 8001410:	4637      	mov	r7, r6
 8001412:	dc05      	bgt.n	8001420 <__swbuf_r+0x4e>
 8001414:	4621      	mov	r1, r4
 8001416:	4628      	mov	r0, r5
 8001418:	f000 fd38 	bl	8001e8c <_fflush_r>
 800141c:	2800      	cmp	r0, #0
 800141e:	d1ed      	bne.n	80013fc <__swbuf_r+0x2a>
 8001420:	68a3      	ldr	r3, [r4, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	60a3      	str	r3, [r4, #8]
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	6022      	str	r2, [r4, #0]
 800142c:	701e      	strb	r6, [r3, #0]
 800142e:	6962      	ldr	r2, [r4, #20]
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	429a      	cmp	r2, r3
 8001434:	d004      	beq.n	8001440 <__swbuf_r+0x6e>
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	07db      	lsls	r3, r3, #31
 800143a:	d5e1      	bpl.n	8001400 <__swbuf_r+0x2e>
 800143c:	2e0a      	cmp	r6, #10
 800143e:	d1df      	bne.n	8001400 <__swbuf_r+0x2e>
 8001440:	4621      	mov	r1, r4
 8001442:	4628      	mov	r0, r5
 8001444:	f000 fd22 	bl	8001e8c <_fflush_r>
 8001448:	2800      	cmp	r0, #0
 800144a:	d0d9      	beq.n	8001400 <__swbuf_r+0x2e>
 800144c:	e7d6      	b.n	80013fc <__swbuf_r+0x2a>
	...

08001450 <__swsetup_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <__swsetup_r+0xa8>)
 8001454:	4605      	mov	r5, r0
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	460c      	mov	r4, r1
 800145a:	b118      	cbz	r0, 8001464 <__swsetup_r+0x14>
 800145c:	6a03      	ldr	r3, [r0, #32]
 800145e:	b90b      	cbnz	r3, 8001464 <__swsetup_r+0x14>
 8001460:	f7ff fece 	bl	8001200 <__sinit>
 8001464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001468:	0719      	lsls	r1, r3, #28
 800146a:	d422      	bmi.n	80014b2 <__swsetup_r+0x62>
 800146c:	06da      	lsls	r2, r3, #27
 800146e:	d407      	bmi.n	8001480 <__swsetup_r+0x30>
 8001470:	2209      	movs	r2, #9
 8001472:	602a      	str	r2, [r5, #0]
 8001474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	e033      	b.n	80014e8 <__swsetup_r+0x98>
 8001480:	0758      	lsls	r0, r3, #29
 8001482:	d512      	bpl.n	80014aa <__swsetup_r+0x5a>
 8001484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001486:	b141      	cbz	r1, 800149a <__swsetup_r+0x4a>
 8001488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800148c:	4299      	cmp	r1, r3
 800148e:	d002      	beq.n	8001496 <__swsetup_r+0x46>
 8001490:	4628      	mov	r0, r5
 8001492:	f000 f8af 	bl	80015f4 <_free_r>
 8001496:	2300      	movs	r3, #0
 8001498:	6363      	str	r3, [r4, #52]	@ 0x34
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014a0:	81a3      	strh	r3, [r4, #12]
 80014a2:	2300      	movs	r3, #0
 80014a4:	6063      	str	r3, [r4, #4]
 80014a6:	6923      	ldr	r3, [r4, #16]
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	89a3      	ldrh	r3, [r4, #12]
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	81a3      	strh	r3, [r4, #12]
 80014b2:	6923      	ldr	r3, [r4, #16]
 80014b4:	b94b      	cbnz	r3, 80014ca <__swsetup_r+0x7a>
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c0:	d003      	beq.n	80014ca <__swsetup_r+0x7a>
 80014c2:	4621      	mov	r1, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f000 fd2f 	bl	8001f28 <__smakebuf_r>
 80014ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ce:	f013 0201 	ands.w	r2, r3, #1
 80014d2:	d00a      	beq.n	80014ea <__swsetup_r+0x9a>
 80014d4:	2200      	movs	r2, #0
 80014d6:	60a2      	str	r2, [r4, #8]
 80014d8:	6962      	ldr	r2, [r4, #20]
 80014da:	4252      	negs	r2, r2
 80014dc:	61a2      	str	r2, [r4, #24]
 80014de:	6922      	ldr	r2, [r4, #16]
 80014e0:	b942      	cbnz	r2, 80014f4 <__swsetup_r+0xa4>
 80014e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014e6:	d1c5      	bne.n	8001474 <__swsetup_r+0x24>
 80014e8:	bd38      	pop	{r3, r4, r5, pc}
 80014ea:	0799      	lsls	r1, r3, #30
 80014ec:	bf58      	it	pl
 80014ee:	6962      	ldrpl	r2, [r4, #20]
 80014f0:	60a2      	str	r2, [r4, #8]
 80014f2:	e7f4      	b.n	80014de <__swsetup_r+0x8e>
 80014f4:	2000      	movs	r0, #0
 80014f6:	e7f7      	b.n	80014e8 <__swsetup_r+0x98>
 80014f8:	20000020 	.word	0x20000020

080014fc <memset>:
 80014fc:	4402      	add	r2, r0
 80014fe:	4603      	mov	r3, r0
 8001500:	4293      	cmp	r3, r2
 8001502:	d100      	bne.n	8001506 <memset+0xa>
 8001504:	4770      	bx	lr
 8001506:	f803 1b01 	strb.w	r1, [r3], #1
 800150a:	e7f9      	b.n	8001500 <memset+0x4>

0800150c <_close_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d06      	ldr	r5, [pc, #24]	@ (8001528 <_close_r+0x1c>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	f7fe ffb2 	bl	8000480 <_close>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_close_r+0x1a>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_close_r+0x1a>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	200001f8 	.word	0x200001f8

0800152c <_lseek_r>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4d07      	ldr	r5, [pc, #28]	@ (800154c <_lseek_r+0x20>)
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	2200      	movs	r2, #0
 8001538:	602a      	str	r2, [r5, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f7fe ffc7 	bl	80004ce <_lseek>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_lseek_r+0x1e>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_lseek_r+0x1e>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200001f8 	.word	0x200001f8

08001550 <_read_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d07      	ldr	r5, [pc, #28]	@ (8001570 <_read_r+0x20>)
 8001554:	4604      	mov	r4, r0
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	2200      	movs	r2, #0
 800155c:	602a      	str	r2, [r5, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	f7fe ff55 	bl	800040e <_read>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_read_r+0x1e>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_read_r+0x1e>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	200001f8 	.word	0x200001f8

08001574 <_write_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d07      	ldr	r5, [pc, #28]	@ (8001594 <_write_r+0x20>)
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	2200      	movs	r2, #0
 8001580:	602a      	str	r2, [r5, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f7fe ff60 	bl	8000448 <_write>
 8001588:	1c43      	adds	r3, r0, #1
 800158a:	d102      	bne.n	8001592 <_write_r+0x1e>
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	b103      	cbz	r3, 8001592 <_write_r+0x1e>
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	bd38      	pop	{r3, r4, r5, pc}
 8001594:	200001f8 	.word	0x200001f8

08001598 <__errno>:
 8001598:	4b01      	ldr	r3, [pc, #4]	@ (80015a0 <__errno+0x8>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000020 	.word	0x20000020

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4d0d      	ldr	r5, [pc, #52]	@ (80015dc <__libc_init_array+0x38>)
 80015a8:	4c0d      	ldr	r4, [pc, #52]	@ (80015e0 <__libc_init_array+0x3c>)
 80015aa:	1b64      	subs	r4, r4, r5
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	2600      	movs	r6, #0
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	4d0b      	ldr	r5, [pc, #44]	@ (80015e4 <__libc_init_array+0x40>)
 80015b6:	4c0c      	ldr	r4, [pc, #48]	@ (80015e8 <__libc_init_array+0x44>)
 80015b8:	f000 fd24 	bl	8002004 <_init>
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	2600      	movs	r6, #0
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	08002078 	.word	0x08002078
 80015e0:	08002078 	.word	0x08002078
 80015e4:	08002078 	.word	0x08002078
 80015e8:	0800207c 	.word	0x0800207c

080015ec <__retarget_lock_init_recursive>:
 80015ec:	4770      	bx	lr

080015ee <__retarget_lock_acquire_recursive>:
 80015ee:	4770      	bx	lr

080015f0 <__retarget_lock_release_recursive>:
 80015f0:	4770      	bx	lr
	...

080015f4 <_free_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4605      	mov	r5, r0
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d041      	beq.n	8001680 <_free_r+0x8c>
 80015fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001600:	1f0c      	subs	r4, r1, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	bfb8      	it	lt
 8001606:	18e4      	addlt	r4, r4, r3
 8001608:	f000 f8e0 	bl	80017cc <__malloc_lock>
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <_free_r+0x90>)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	b933      	cbnz	r3, 8001620 <_free_r+0x2c>
 8001612:	6063      	str	r3, [r4, #4]
 8001614:	6014      	str	r4, [r2, #0]
 8001616:	4628      	mov	r0, r5
 8001618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800161c:	f000 b8dc 	b.w	80017d8 <__malloc_unlock>
 8001620:	42a3      	cmp	r3, r4
 8001622:	d908      	bls.n	8001636 <_free_r+0x42>
 8001624:	6820      	ldr	r0, [r4, #0]
 8001626:	1821      	adds	r1, r4, r0
 8001628:	428b      	cmp	r3, r1
 800162a:	bf01      	itttt	eq
 800162c:	6819      	ldreq	r1, [r3, #0]
 800162e:	685b      	ldreq	r3, [r3, #4]
 8001630:	1809      	addeq	r1, r1, r0
 8001632:	6021      	streq	r1, [r4, #0]
 8001634:	e7ed      	b.n	8001612 <_free_r+0x1e>
 8001636:	461a      	mov	r2, r3
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	b10b      	cbz	r3, 8001640 <_free_r+0x4c>
 800163c:	42a3      	cmp	r3, r4
 800163e:	d9fa      	bls.n	8001636 <_free_r+0x42>
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	1850      	adds	r0, r2, r1
 8001644:	42a0      	cmp	r0, r4
 8001646:	d10b      	bne.n	8001660 <_free_r+0x6c>
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	4401      	add	r1, r0
 800164c:	1850      	adds	r0, r2, r1
 800164e:	4283      	cmp	r3, r0
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	d1e0      	bne.n	8001616 <_free_r+0x22>
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	6053      	str	r3, [r2, #4]
 800165a:	4408      	add	r0, r1
 800165c:	6010      	str	r0, [r2, #0]
 800165e:	e7da      	b.n	8001616 <_free_r+0x22>
 8001660:	d902      	bls.n	8001668 <_free_r+0x74>
 8001662:	230c      	movs	r3, #12
 8001664:	602b      	str	r3, [r5, #0]
 8001666:	e7d6      	b.n	8001616 <_free_r+0x22>
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	1821      	adds	r1, r4, r0
 800166c:	428b      	cmp	r3, r1
 800166e:	bf04      	itt	eq
 8001670:	6819      	ldreq	r1, [r3, #0]
 8001672:	685b      	ldreq	r3, [r3, #4]
 8001674:	6063      	str	r3, [r4, #4]
 8001676:	bf04      	itt	eq
 8001678:	1809      	addeq	r1, r1, r0
 800167a:	6021      	streq	r1, [r4, #0]
 800167c:	6054      	str	r4, [r2, #4]
 800167e:	e7ca      	b.n	8001616 <_free_r+0x22>
 8001680:	bd38      	pop	{r3, r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	20000204 	.word	0x20000204

08001688 <sbrk_aligned>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	4e0f      	ldr	r6, [pc, #60]	@ (80016c8 <sbrk_aligned+0x40>)
 800168c:	460c      	mov	r4, r1
 800168e:	6831      	ldr	r1, [r6, #0]
 8001690:	4605      	mov	r5, r0
 8001692:	b911      	cbnz	r1, 800169a <sbrk_aligned+0x12>
 8001694:	f000 fca6 	bl	8001fe4 <_sbrk_r>
 8001698:	6030      	str	r0, [r6, #0]
 800169a:	4621      	mov	r1, r4
 800169c:	4628      	mov	r0, r5
 800169e:	f000 fca1 	bl	8001fe4 <_sbrk_r>
 80016a2:	1c43      	adds	r3, r0, #1
 80016a4:	d103      	bne.n	80016ae <sbrk_aligned+0x26>
 80016a6:	f04f 34ff 	mov.w	r4, #4294967295
 80016aa:	4620      	mov	r0, r4
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	1cc4      	adds	r4, r0, #3
 80016b0:	f024 0403 	bic.w	r4, r4, #3
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d0f8      	beq.n	80016aa <sbrk_aligned+0x22>
 80016b8:	1a21      	subs	r1, r4, r0
 80016ba:	4628      	mov	r0, r5
 80016bc:	f000 fc92 	bl	8001fe4 <_sbrk_r>
 80016c0:	3001      	adds	r0, #1
 80016c2:	d1f2      	bne.n	80016aa <sbrk_aligned+0x22>
 80016c4:	e7ef      	b.n	80016a6 <sbrk_aligned+0x1e>
 80016c6:	bf00      	nop
 80016c8:	20000200 	.word	0x20000200

080016cc <_malloc_r>:
 80016cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d0:	1ccd      	adds	r5, r1, #3
 80016d2:	f025 0503 	bic.w	r5, r5, #3
 80016d6:	3508      	adds	r5, #8
 80016d8:	2d0c      	cmp	r5, #12
 80016da:	bf38      	it	cc
 80016dc:	250c      	movcc	r5, #12
 80016de:	2d00      	cmp	r5, #0
 80016e0:	4606      	mov	r6, r0
 80016e2:	db01      	blt.n	80016e8 <_malloc_r+0x1c>
 80016e4:	42a9      	cmp	r1, r5
 80016e6:	d904      	bls.n	80016f2 <_malloc_r+0x26>
 80016e8:	230c      	movs	r3, #12
 80016ea:	6033      	str	r3, [r6, #0]
 80016ec:	2000      	movs	r0, #0
 80016ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017c8 <_malloc_r+0xfc>
 80016f6:	f000 f869 	bl	80017cc <__malloc_lock>
 80016fa:	f8d8 3000 	ldr.w	r3, [r8]
 80016fe:	461c      	mov	r4, r3
 8001700:	bb44      	cbnz	r4, 8001754 <_malloc_r+0x88>
 8001702:	4629      	mov	r1, r5
 8001704:	4630      	mov	r0, r6
 8001706:	f7ff ffbf 	bl	8001688 <sbrk_aligned>
 800170a:	1c43      	adds	r3, r0, #1
 800170c:	4604      	mov	r4, r0
 800170e:	d158      	bne.n	80017c2 <_malloc_r+0xf6>
 8001710:	f8d8 4000 	ldr.w	r4, [r8]
 8001714:	4627      	mov	r7, r4
 8001716:	2f00      	cmp	r7, #0
 8001718:	d143      	bne.n	80017a2 <_malloc_r+0xd6>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d04b      	beq.n	80017b6 <_malloc_r+0xea>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	4639      	mov	r1, r7
 8001722:	4630      	mov	r0, r6
 8001724:	eb04 0903 	add.w	r9, r4, r3
 8001728:	f000 fc5c 	bl	8001fe4 <_sbrk_r>
 800172c:	4581      	cmp	r9, r0
 800172e:	d142      	bne.n	80017b6 <_malloc_r+0xea>
 8001730:	6821      	ldr	r1, [r4, #0]
 8001732:	1a6d      	subs	r5, r5, r1
 8001734:	4629      	mov	r1, r5
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff ffa6 	bl	8001688 <sbrk_aligned>
 800173c:	3001      	adds	r0, #1
 800173e:	d03a      	beq.n	80017b6 <_malloc_r+0xea>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	442b      	add	r3, r5
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	f8d8 3000 	ldr.w	r3, [r8]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	bb62      	cbnz	r2, 80017a8 <_malloc_r+0xdc>
 800174e:	f8c8 7000 	str.w	r7, [r8]
 8001752:	e00f      	b.n	8001774 <_malloc_r+0xa8>
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	1b52      	subs	r2, r2, r5
 8001758:	d420      	bmi.n	800179c <_malloc_r+0xd0>
 800175a:	2a0b      	cmp	r2, #11
 800175c:	d917      	bls.n	800178e <_malloc_r+0xc2>
 800175e:	1961      	adds	r1, r4, r5
 8001760:	42a3      	cmp	r3, r4
 8001762:	6025      	str	r5, [r4, #0]
 8001764:	bf18      	it	ne
 8001766:	6059      	strne	r1, [r3, #4]
 8001768:	6863      	ldr	r3, [r4, #4]
 800176a:	bf08      	it	eq
 800176c:	f8c8 1000 	streq.w	r1, [r8]
 8001770:	5162      	str	r2, [r4, r5]
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	4630      	mov	r0, r6
 8001776:	f000 f82f 	bl	80017d8 <__malloc_unlock>
 800177a:	f104 000b 	add.w	r0, r4, #11
 800177e:	1d23      	adds	r3, r4, #4
 8001780:	f020 0007 	bic.w	r0, r0, #7
 8001784:	1ac2      	subs	r2, r0, r3
 8001786:	bf1c      	itt	ne
 8001788:	1a1b      	subne	r3, r3, r0
 800178a:	50a3      	strne	r3, [r4, r2]
 800178c:	e7af      	b.n	80016ee <_malloc_r+0x22>
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	42a3      	cmp	r3, r4
 8001792:	bf0c      	ite	eq
 8001794:	f8c8 2000 	streq.w	r2, [r8]
 8001798:	605a      	strne	r2, [r3, #4]
 800179a:	e7eb      	b.n	8001774 <_malloc_r+0xa8>
 800179c:	4623      	mov	r3, r4
 800179e:	6864      	ldr	r4, [r4, #4]
 80017a0:	e7ae      	b.n	8001700 <_malloc_r+0x34>
 80017a2:	463c      	mov	r4, r7
 80017a4:	687f      	ldr	r7, [r7, #4]
 80017a6:	e7b6      	b.n	8001716 <_malloc_r+0x4a>
 80017a8:	461a      	mov	r2, r3
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	42a3      	cmp	r3, r4
 80017ae:	d1fb      	bne.n	80017a8 <_malloc_r+0xdc>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6053      	str	r3, [r2, #4]
 80017b4:	e7de      	b.n	8001774 <_malloc_r+0xa8>
 80017b6:	230c      	movs	r3, #12
 80017b8:	6033      	str	r3, [r6, #0]
 80017ba:	4630      	mov	r0, r6
 80017bc:	f000 f80c 	bl	80017d8 <__malloc_unlock>
 80017c0:	e794      	b.n	80016ec <_malloc_r+0x20>
 80017c2:	6005      	str	r5, [r0, #0]
 80017c4:	e7d6      	b.n	8001774 <_malloc_r+0xa8>
 80017c6:	bf00      	nop
 80017c8:	20000204 	.word	0x20000204

080017cc <__malloc_lock>:
 80017cc:	4801      	ldr	r0, [pc, #4]	@ (80017d4 <__malloc_lock+0x8>)
 80017ce:	f7ff bf0e 	b.w	80015ee <__retarget_lock_acquire_recursive>
 80017d2:	bf00      	nop
 80017d4:	200001fc 	.word	0x200001fc

080017d8 <__malloc_unlock>:
 80017d8:	4801      	ldr	r0, [pc, #4]	@ (80017e0 <__malloc_unlock+0x8>)
 80017da:	f7ff bf09 	b.w	80015f0 <__retarget_lock_release_recursive>
 80017de:	bf00      	nop
 80017e0:	200001fc 	.word	0x200001fc

080017e4 <__sfputc_r>:
 80017e4:	6893      	ldr	r3, [r2, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	b410      	push	{r4}
 80017ec:	6093      	str	r3, [r2, #8]
 80017ee:	da08      	bge.n	8001802 <__sfputc_r+0x1e>
 80017f0:	6994      	ldr	r4, [r2, #24]
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	db01      	blt.n	80017fa <__sfputc_r+0x16>
 80017f6:	290a      	cmp	r1, #10
 80017f8:	d103      	bne.n	8001802 <__sfputc_r+0x1e>
 80017fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017fe:	f7ff bde8 	b.w	80013d2 <__swbuf_r>
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	1c58      	adds	r0, r3, #1
 8001806:	6010      	str	r0, [r2, #0]
 8001808:	7019      	strb	r1, [r3, #0]
 800180a:	4608      	mov	r0, r1
 800180c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001810:	4770      	bx	lr

08001812 <__sfputs_r>:
 8001812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001814:	4606      	mov	r6, r0
 8001816:	460f      	mov	r7, r1
 8001818:	4614      	mov	r4, r2
 800181a:	18d5      	adds	r5, r2, r3
 800181c:	42ac      	cmp	r4, r5
 800181e:	d101      	bne.n	8001824 <__sfputs_r+0x12>
 8001820:	2000      	movs	r0, #0
 8001822:	e007      	b.n	8001834 <__sfputs_r+0x22>
 8001824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001828:	463a      	mov	r2, r7
 800182a:	4630      	mov	r0, r6
 800182c:	f7ff ffda 	bl	80017e4 <__sfputc_r>
 8001830:	1c43      	adds	r3, r0, #1
 8001832:	d1f3      	bne.n	800181c <__sfputs_r+0xa>
 8001834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001838 <_vfiprintf_r>:
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183c:	460d      	mov	r5, r1
 800183e:	b09d      	sub	sp, #116	@ 0x74
 8001840:	4614      	mov	r4, r2
 8001842:	4698      	mov	r8, r3
 8001844:	4606      	mov	r6, r0
 8001846:	b118      	cbz	r0, 8001850 <_vfiprintf_r+0x18>
 8001848:	6a03      	ldr	r3, [r0, #32]
 800184a:	b90b      	cbnz	r3, 8001850 <_vfiprintf_r+0x18>
 800184c:	f7ff fcd8 	bl	8001200 <__sinit>
 8001850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001852:	07d9      	lsls	r1, r3, #31
 8001854:	d405      	bmi.n	8001862 <_vfiprintf_r+0x2a>
 8001856:	89ab      	ldrh	r3, [r5, #12]
 8001858:	059a      	lsls	r2, r3, #22
 800185a:	d402      	bmi.n	8001862 <_vfiprintf_r+0x2a>
 800185c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800185e:	f7ff fec6 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001862:	89ab      	ldrh	r3, [r5, #12]
 8001864:	071b      	lsls	r3, r3, #28
 8001866:	d501      	bpl.n	800186c <_vfiprintf_r+0x34>
 8001868:	692b      	ldr	r3, [r5, #16]
 800186a:	b99b      	cbnz	r3, 8001894 <_vfiprintf_r+0x5c>
 800186c:	4629      	mov	r1, r5
 800186e:	4630      	mov	r0, r6
 8001870:	f7ff fdee 	bl	8001450 <__swsetup_r>
 8001874:	b170      	cbz	r0, 8001894 <_vfiprintf_r+0x5c>
 8001876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001878:	07dc      	lsls	r4, r3, #31
 800187a:	d504      	bpl.n	8001886 <_vfiprintf_r+0x4e>
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	b01d      	add	sp, #116	@ 0x74
 8001882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001886:	89ab      	ldrh	r3, [r5, #12]
 8001888:	0598      	lsls	r0, r3, #22
 800188a:	d4f7      	bmi.n	800187c <_vfiprintf_r+0x44>
 800188c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800188e:	f7ff feaf 	bl	80015f0 <__retarget_lock_release_recursive>
 8001892:	e7f3      	b.n	800187c <_vfiprintf_r+0x44>
 8001894:	2300      	movs	r3, #0
 8001896:	9309      	str	r3, [sp, #36]	@ 0x24
 8001898:	2320      	movs	r3, #32
 800189a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800189e:	f8cd 800c 	str.w	r8, [sp, #12]
 80018a2:	2330      	movs	r3, #48	@ 0x30
 80018a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a54 <_vfiprintf_r+0x21c>
 80018a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018ac:	f04f 0901 	mov.w	r9, #1
 80018b0:	4623      	mov	r3, r4
 80018b2:	469a      	mov	sl, r3
 80018b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018b8:	b10a      	cbz	r2, 80018be <_vfiprintf_r+0x86>
 80018ba:	2a25      	cmp	r2, #37	@ 0x25
 80018bc:	d1f9      	bne.n	80018b2 <_vfiprintf_r+0x7a>
 80018be:	ebba 0b04 	subs.w	fp, sl, r4
 80018c2:	d00b      	beq.n	80018dc <_vfiprintf_r+0xa4>
 80018c4:	465b      	mov	r3, fp
 80018c6:	4622      	mov	r2, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	4630      	mov	r0, r6
 80018cc:	f7ff ffa1 	bl	8001812 <__sfputs_r>
 80018d0:	3001      	adds	r0, #1
 80018d2:	f000 80a7 	beq.w	8001a24 <_vfiprintf_r+0x1ec>
 80018d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018d8:	445a      	add	r2, fp
 80018da:	9209      	str	r2, [sp, #36]	@ 0x24
 80018dc:	f89a 3000 	ldrb.w	r3, [sl]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 809f 	beq.w	8001a24 <_vfiprintf_r+0x1ec>
 80018e6:	2300      	movs	r3, #0
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018f0:	f10a 0a01 	add.w	sl, sl, #1
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	9307      	str	r3, [sp, #28]
 80018f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80018fe:	4654      	mov	r4, sl
 8001900:	2205      	movs	r2, #5
 8001902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001906:	4853      	ldr	r0, [pc, #332]	@ (8001a54 <_vfiprintf_r+0x21c>)
 8001908:	f7fe fc62 	bl	80001d0 <memchr>
 800190c:	9a04      	ldr	r2, [sp, #16]
 800190e:	b9d8      	cbnz	r0, 8001948 <_vfiprintf_r+0x110>
 8001910:	06d1      	lsls	r1, r2, #27
 8001912:	bf44      	itt	mi
 8001914:	2320      	movmi	r3, #32
 8001916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800191a:	0713      	lsls	r3, r2, #28
 800191c:	bf44      	itt	mi
 800191e:	232b      	movmi	r3, #43	@ 0x2b
 8001920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001924:	f89a 3000 	ldrb.w	r3, [sl]
 8001928:	2b2a      	cmp	r3, #42	@ 0x2a
 800192a:	d015      	beq.n	8001958 <_vfiprintf_r+0x120>
 800192c:	9a07      	ldr	r2, [sp, #28]
 800192e:	4654      	mov	r4, sl
 8001930:	2000      	movs	r0, #0
 8001932:	f04f 0c0a 	mov.w	ip, #10
 8001936:	4621      	mov	r1, r4
 8001938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800193c:	3b30      	subs	r3, #48	@ 0x30
 800193e:	2b09      	cmp	r3, #9
 8001940:	d94b      	bls.n	80019da <_vfiprintf_r+0x1a2>
 8001942:	b1b0      	cbz	r0, 8001972 <_vfiprintf_r+0x13a>
 8001944:	9207      	str	r2, [sp, #28]
 8001946:	e014      	b.n	8001972 <_vfiprintf_r+0x13a>
 8001948:	eba0 0308 	sub.w	r3, r0, r8
 800194c:	fa09 f303 	lsl.w	r3, r9, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	9304      	str	r3, [sp, #16]
 8001954:	46a2      	mov	sl, r4
 8001956:	e7d2      	b.n	80018fe <_vfiprintf_r+0xc6>
 8001958:	9b03      	ldr	r3, [sp, #12]
 800195a:	1d19      	adds	r1, r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	9103      	str	r1, [sp, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	bfbb      	ittet	lt
 8001964:	425b      	neglt	r3, r3
 8001966:	f042 0202 	orrlt.w	r2, r2, #2
 800196a:	9307      	strge	r3, [sp, #28]
 800196c:	9307      	strlt	r3, [sp, #28]
 800196e:	bfb8      	it	lt
 8001970:	9204      	strlt	r2, [sp, #16]
 8001972:	7823      	ldrb	r3, [r4, #0]
 8001974:	2b2e      	cmp	r3, #46	@ 0x2e
 8001976:	d10a      	bne.n	800198e <_vfiprintf_r+0x156>
 8001978:	7863      	ldrb	r3, [r4, #1]
 800197a:	2b2a      	cmp	r3, #42	@ 0x2a
 800197c:	d132      	bne.n	80019e4 <_vfiprintf_r+0x1ac>
 800197e:	9b03      	ldr	r3, [sp, #12]
 8001980:	1d1a      	adds	r2, r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	9203      	str	r2, [sp, #12]
 8001986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800198a:	3402      	adds	r4, #2
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a64 <_vfiprintf_r+0x22c>
 8001992:	7821      	ldrb	r1, [r4, #0]
 8001994:	2203      	movs	r2, #3
 8001996:	4650      	mov	r0, sl
 8001998:	f7fe fc1a 	bl	80001d0 <memchr>
 800199c:	b138      	cbz	r0, 80019ae <_vfiprintf_r+0x176>
 800199e:	9b04      	ldr	r3, [sp, #16]
 80019a0:	eba0 000a 	sub.w	r0, r0, sl
 80019a4:	2240      	movs	r2, #64	@ 0x40
 80019a6:	4082      	lsls	r2, r0
 80019a8:	4313      	orrs	r3, r2
 80019aa:	3401      	adds	r4, #1
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b2:	4829      	ldr	r0, [pc, #164]	@ (8001a58 <_vfiprintf_r+0x220>)
 80019b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019b8:	2206      	movs	r2, #6
 80019ba:	f7fe fc09 	bl	80001d0 <memchr>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d03f      	beq.n	8001a42 <_vfiprintf_r+0x20a>
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <_vfiprintf_r+0x224>)
 80019c4:	bb1b      	cbnz	r3, 8001a0e <_vfiprintf_r+0x1d6>
 80019c6:	9b03      	ldr	r3, [sp, #12]
 80019c8:	3307      	adds	r3, #7
 80019ca:	f023 0307 	bic.w	r3, r3, #7
 80019ce:	3308      	adds	r3, #8
 80019d0:	9303      	str	r3, [sp, #12]
 80019d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019d4:	443b      	add	r3, r7
 80019d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80019d8:	e76a      	b.n	80018b0 <_vfiprintf_r+0x78>
 80019da:	fb0c 3202 	mla	r2, ip, r2, r3
 80019de:	460c      	mov	r4, r1
 80019e0:	2001      	movs	r0, #1
 80019e2:	e7a8      	b.n	8001936 <_vfiprintf_r+0xfe>
 80019e4:	2300      	movs	r3, #0
 80019e6:	3401      	adds	r4, #1
 80019e8:	9305      	str	r3, [sp, #20]
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 0c0a 	mov.w	ip, #10
 80019f0:	4620      	mov	r0, r4
 80019f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019f6:	3a30      	subs	r2, #48	@ 0x30
 80019f8:	2a09      	cmp	r2, #9
 80019fa:	d903      	bls.n	8001a04 <_vfiprintf_r+0x1cc>
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0c6      	beq.n	800198e <_vfiprintf_r+0x156>
 8001a00:	9105      	str	r1, [sp, #20]
 8001a02:	e7c4      	b.n	800198e <_vfiprintf_r+0x156>
 8001a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a08:	4604      	mov	r4, r0
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e7f0      	b.n	80019f0 <_vfiprintf_r+0x1b8>
 8001a0e:	ab03      	add	r3, sp, #12
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	462a      	mov	r2, r5
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <_vfiprintf_r+0x228>)
 8001a16:	a904      	add	r1, sp, #16
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4607      	mov	r7, r0
 8001a20:	1c78      	adds	r0, r7, #1
 8001a22:	d1d6      	bne.n	80019d2 <_vfiprintf_r+0x19a>
 8001a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a26:	07d9      	lsls	r1, r3, #31
 8001a28:	d405      	bmi.n	8001a36 <_vfiprintf_r+0x1fe>
 8001a2a:	89ab      	ldrh	r3, [r5, #12]
 8001a2c:	059a      	lsls	r2, r3, #22
 8001a2e:	d402      	bmi.n	8001a36 <_vfiprintf_r+0x1fe>
 8001a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a32:	f7ff fddd 	bl	80015f0 <__retarget_lock_release_recursive>
 8001a36:	89ab      	ldrh	r3, [r5, #12]
 8001a38:	065b      	lsls	r3, r3, #25
 8001a3a:	f53f af1f 	bmi.w	800187c <_vfiprintf_r+0x44>
 8001a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a40:	e71e      	b.n	8001880 <_vfiprintf_r+0x48>
 8001a42:	ab03      	add	r3, sp, #12
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	462a      	mov	r2, r5
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <_vfiprintf_r+0x228>)
 8001a4a:	a904      	add	r1, sp, #16
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f000 f879 	bl	8001b44 <_printf_i>
 8001a52:	e7e4      	b.n	8001a1e <_vfiprintf_r+0x1e6>
 8001a54:	0800203d 	.word	0x0800203d
 8001a58:	08002047 	.word	0x08002047
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	08001813 	.word	0x08001813
 8001a64:	08002043 	.word	0x08002043

08001a68 <_printf_common>:
 8001a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	4616      	mov	r6, r2
 8001a6e:	4698      	mov	r8, r3
 8001a70:	688a      	ldr	r2, [r1, #8]
 8001a72:	690b      	ldr	r3, [r1, #16]
 8001a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bfb8      	it	lt
 8001a7c:	4613      	movlt	r3, r2
 8001a7e:	6033      	str	r3, [r6, #0]
 8001a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a84:	4607      	mov	r7, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	b10a      	cbz	r2, 8001a8e <_printf_common+0x26>
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	6033      	str	r3, [r6, #0]
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0699      	lsls	r1, r3, #26
 8001a92:	bf42      	ittt	mi
 8001a94:	6833      	ldrmi	r3, [r6, #0]
 8001a96:	3302      	addmi	r3, #2
 8001a98:	6033      	strmi	r3, [r6, #0]
 8001a9a:	6825      	ldr	r5, [r4, #0]
 8001a9c:	f015 0506 	ands.w	r5, r5, #6
 8001aa0:	d106      	bne.n	8001ab0 <_printf_common+0x48>
 8001aa2:	f104 0a19 	add.w	sl, r4, #25
 8001aa6:	68e3      	ldr	r3, [r4, #12]
 8001aa8:	6832      	ldr	r2, [r6, #0]
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	42ab      	cmp	r3, r5
 8001aae:	dc26      	bgt.n	8001afe <_printf_common+0x96>
 8001ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	3b00      	subs	r3, #0
 8001ab8:	bf18      	it	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	0692      	lsls	r2, r2, #26
 8001abe:	d42b      	bmi.n	8001b18 <_printf_common+0xb0>
 8001ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	47c8      	blx	r9
 8001aca:	3001      	adds	r0, #1
 8001acc:	d01e      	beq.n	8001b0c <_printf_common+0xa4>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	6922      	ldr	r2, [r4, #16]
 8001ad2:	f003 0306 	and.w	r3, r3, #6
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf02      	ittt	eq
 8001ada:	68e5      	ldreq	r5, [r4, #12]
 8001adc:	6833      	ldreq	r3, [r6, #0]
 8001ade:	1aed      	subeq	r5, r5, r3
 8001ae0:	68a3      	ldr	r3, [r4, #8]
 8001ae2:	bf0c      	ite	eq
 8001ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ae8:	2500      	movne	r5, #0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	bfc4      	itt	gt
 8001aee:	1a9b      	subgt	r3, r3, r2
 8001af0:	18ed      	addgt	r5, r5, r3
 8001af2:	2600      	movs	r6, #0
 8001af4:	341a      	adds	r4, #26
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d11a      	bne.n	8001b30 <_printf_common+0xc8>
 8001afa:	2000      	movs	r0, #0
 8001afc:	e008      	b.n	8001b10 <_printf_common+0xa8>
 8001afe:	2301      	movs	r3, #1
 8001b00:	4652      	mov	r2, sl
 8001b02:	4641      	mov	r1, r8
 8001b04:	4638      	mov	r0, r7
 8001b06:	47c8      	blx	r9
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d103      	bne.n	8001b14 <_printf_common+0xac>
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b14:	3501      	adds	r5, #1
 8001b16:	e7c6      	b.n	8001aa6 <_printf_common+0x3e>
 8001b18:	18e1      	adds	r1, r4, r3
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	2030      	movs	r0, #48	@ 0x30
 8001b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b22:	4422      	add	r2, r4
 8001b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	e7c7      	b.n	8001ac0 <_printf_common+0x58>
 8001b30:	2301      	movs	r3, #1
 8001b32:	4622      	mov	r2, r4
 8001b34:	4641      	mov	r1, r8
 8001b36:	4638      	mov	r0, r7
 8001b38:	47c8      	blx	r9
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d0e6      	beq.n	8001b0c <_printf_common+0xa4>
 8001b3e:	3601      	adds	r6, #1
 8001b40:	e7d9      	b.n	8001af6 <_printf_common+0x8e>
	...

08001b44 <_printf_i>:
 8001b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	7e0f      	ldrb	r7, [r1, #24]
 8001b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b4c:	2f78      	cmp	r7, #120	@ 0x78
 8001b4e:	4691      	mov	r9, r2
 8001b50:	4680      	mov	r8, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	469a      	mov	sl, r3
 8001b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b5a:	d807      	bhi.n	8001b6c <_printf_i+0x28>
 8001b5c:	2f62      	cmp	r7, #98	@ 0x62
 8001b5e:	d80a      	bhi.n	8001b76 <_printf_i+0x32>
 8001b60:	2f00      	cmp	r7, #0
 8001b62:	f000 80d2 	beq.w	8001d0a <_printf_i+0x1c6>
 8001b66:	2f58      	cmp	r7, #88	@ 0x58
 8001b68:	f000 80b9 	beq.w	8001cde <_printf_i+0x19a>
 8001b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b74:	e03a      	b.n	8001bec <_printf_i+0xa8>
 8001b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b7a:	2b15      	cmp	r3, #21
 8001b7c:	d8f6      	bhi.n	8001b6c <_printf_i+0x28>
 8001b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8001b84 <_printf_i+0x40>)
 8001b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b84:	08001bdd 	.word	0x08001bdd
 8001b88:	08001bf1 	.word	0x08001bf1
 8001b8c:	08001b6d 	.word	0x08001b6d
 8001b90:	08001b6d 	.word	0x08001b6d
 8001b94:	08001b6d 	.word	0x08001b6d
 8001b98:	08001b6d 	.word	0x08001b6d
 8001b9c:	08001bf1 	.word	0x08001bf1
 8001ba0:	08001b6d 	.word	0x08001b6d
 8001ba4:	08001b6d 	.word	0x08001b6d
 8001ba8:	08001b6d 	.word	0x08001b6d
 8001bac:	08001b6d 	.word	0x08001b6d
 8001bb0:	08001cf1 	.word	0x08001cf1
 8001bb4:	08001c1b 	.word	0x08001c1b
 8001bb8:	08001cab 	.word	0x08001cab
 8001bbc:	08001b6d 	.word	0x08001b6d
 8001bc0:	08001b6d 	.word	0x08001b6d
 8001bc4:	08001d13 	.word	0x08001d13
 8001bc8:	08001b6d 	.word	0x08001b6d
 8001bcc:	08001c1b 	.word	0x08001c1b
 8001bd0:	08001b6d 	.word	0x08001b6d
 8001bd4:	08001b6d 	.word	0x08001b6d
 8001bd8:	08001cb3 	.word	0x08001cb3
 8001bdc:	6833      	ldr	r3, [r6, #0]
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6032      	str	r2, [r6, #0]
 8001be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bec:	2301      	movs	r3, #1
 8001bee:	e09d      	b.n	8001d2c <_printf_i+0x1e8>
 8001bf0:	6833      	ldr	r3, [r6, #0]
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	1d19      	adds	r1, r3, #4
 8001bf6:	6031      	str	r1, [r6, #0]
 8001bf8:	0606      	lsls	r6, r0, #24
 8001bfa:	d501      	bpl.n	8001c00 <_printf_i+0xbc>
 8001bfc:	681d      	ldr	r5, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <_printf_i+0xc4>
 8001c00:	0645      	lsls	r5, r0, #25
 8001c02:	d5fb      	bpl.n	8001bfc <_printf_i+0xb8>
 8001c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	da03      	bge.n	8001c14 <_printf_i+0xd0>
 8001c0c:	232d      	movs	r3, #45	@ 0x2d
 8001c0e:	426d      	negs	r5, r5
 8001c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c14:	4859      	ldr	r0, [pc, #356]	@ (8001d7c <_printf_i+0x238>)
 8001c16:	230a      	movs	r3, #10
 8001c18:	e011      	b.n	8001c3e <_printf_i+0xfa>
 8001c1a:	6821      	ldr	r1, [r4, #0]
 8001c1c:	6833      	ldr	r3, [r6, #0]
 8001c1e:	0608      	lsls	r0, r1, #24
 8001c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c24:	d402      	bmi.n	8001c2c <_printf_i+0xe8>
 8001c26:	0649      	lsls	r1, r1, #25
 8001c28:	bf48      	it	mi
 8001c2a:	b2ad      	uxthmi	r5, r5
 8001c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c2e:	4853      	ldr	r0, [pc, #332]	@ (8001d7c <_printf_i+0x238>)
 8001c30:	6033      	str	r3, [r6, #0]
 8001c32:	bf14      	ite	ne
 8001c34:	230a      	movne	r3, #10
 8001c36:	2308      	moveq	r3, #8
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c3e:	6866      	ldr	r6, [r4, #4]
 8001c40:	60a6      	str	r6, [r4, #8]
 8001c42:	2e00      	cmp	r6, #0
 8001c44:	bfa2      	ittt	ge
 8001c46:	6821      	ldrge	r1, [r4, #0]
 8001c48:	f021 0104 	bicge.w	r1, r1, #4
 8001c4c:	6021      	strge	r1, [r4, #0]
 8001c4e:	b90d      	cbnz	r5, 8001c54 <_printf_i+0x110>
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	d04b      	beq.n	8001cec <_printf_i+0x1a8>
 8001c54:	4616      	mov	r6, r2
 8001c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8001c5e:	5dc7      	ldrb	r7, [r0, r7]
 8001c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c64:	462f      	mov	r7, r5
 8001c66:	42bb      	cmp	r3, r7
 8001c68:	460d      	mov	r5, r1
 8001c6a:	d9f4      	bls.n	8001c56 <_printf_i+0x112>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d10b      	bne.n	8001c88 <_printf_i+0x144>
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	07df      	lsls	r7, r3, #31
 8001c74:	d508      	bpl.n	8001c88 <_printf_i+0x144>
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	6861      	ldr	r1, [r4, #4]
 8001c7a:	4299      	cmp	r1, r3
 8001c7c:	bfde      	ittt	le
 8001c7e:	2330      	movle	r3, #48	@ 0x30
 8001c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c88:	1b92      	subs	r2, r2, r6
 8001c8a:	6122      	str	r2, [r4, #16]
 8001c8c:	f8cd a000 	str.w	sl, [sp]
 8001c90:	464b      	mov	r3, r9
 8001c92:	aa03      	add	r2, sp, #12
 8001c94:	4621      	mov	r1, r4
 8001c96:	4640      	mov	r0, r8
 8001c98:	f7ff fee6 	bl	8001a68 <_printf_common>
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	d14a      	bne.n	8001d36 <_printf_i+0x1f2>
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	b004      	add	sp, #16
 8001ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	4833      	ldr	r0, [pc, #204]	@ (8001d80 <_printf_i+0x23c>)
 8001cb4:	2778      	movs	r7, #120	@ 0x78
 8001cb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	6831      	ldr	r1, [r6, #0]
 8001cbe:	061f      	lsls	r7, r3, #24
 8001cc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8001cc4:	d402      	bmi.n	8001ccc <_printf_i+0x188>
 8001cc6:	065f      	lsls	r7, r3, #25
 8001cc8:	bf48      	it	mi
 8001cca:	b2ad      	uxthmi	r5, r5
 8001ccc:	6031      	str	r1, [r6, #0]
 8001cce:	07d9      	lsls	r1, r3, #31
 8001cd0:	bf44      	itt	mi
 8001cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8001cd6:	6023      	strmi	r3, [r4, #0]
 8001cd8:	b11d      	cbz	r5, 8001ce2 <_printf_i+0x19e>
 8001cda:	2310      	movs	r3, #16
 8001cdc:	e7ac      	b.n	8001c38 <_printf_i+0xf4>
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <_printf_i+0x238>)
 8001ce0:	e7e9      	b.n	8001cb6 <_printf_i+0x172>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f023 0320 	bic.w	r3, r3, #32
 8001ce8:	6023      	str	r3, [r4, #0]
 8001cea:	e7f6      	b.n	8001cda <_printf_i+0x196>
 8001cec:	4616      	mov	r6, r2
 8001cee:	e7bd      	b.n	8001c6c <_printf_i+0x128>
 8001cf0:	6833      	ldr	r3, [r6, #0]
 8001cf2:	6825      	ldr	r5, [r4, #0]
 8001cf4:	6961      	ldr	r1, [r4, #20]
 8001cf6:	1d18      	adds	r0, r3, #4
 8001cf8:	6030      	str	r0, [r6, #0]
 8001cfa:	062e      	lsls	r6, r5, #24
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	d501      	bpl.n	8001d04 <_printf_i+0x1c0>
 8001d00:	6019      	str	r1, [r3, #0]
 8001d02:	e002      	b.n	8001d0a <_printf_i+0x1c6>
 8001d04:	0668      	lsls	r0, r5, #25
 8001d06:	d5fb      	bpl.n	8001d00 <_printf_i+0x1bc>
 8001d08:	8019      	strh	r1, [r3, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6123      	str	r3, [r4, #16]
 8001d0e:	4616      	mov	r6, r2
 8001d10:	e7bc      	b.n	8001c8c <_printf_i+0x148>
 8001d12:	6833      	ldr	r3, [r6, #0]
 8001d14:	1d1a      	adds	r2, r3, #4
 8001d16:	6032      	str	r2, [r6, #0]
 8001d18:	681e      	ldr	r6, [r3, #0]
 8001d1a:	6862      	ldr	r2, [r4, #4]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f7fe fa56 	bl	80001d0 <memchr>
 8001d24:	b108      	cbz	r0, 8001d2a <_printf_i+0x1e6>
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	6060      	str	r0, [r4, #4]
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	6123      	str	r3, [r4, #16]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d34:	e7aa      	b.n	8001c8c <_printf_i+0x148>
 8001d36:	6923      	ldr	r3, [r4, #16]
 8001d38:	4632      	mov	r2, r6
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	4640      	mov	r0, r8
 8001d3e:	47d0      	blx	sl
 8001d40:	3001      	adds	r0, #1
 8001d42:	d0ad      	beq.n	8001ca0 <_printf_i+0x15c>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	079b      	lsls	r3, r3, #30
 8001d48:	d413      	bmi.n	8001d72 <_printf_i+0x22e>
 8001d4a:	68e0      	ldr	r0, [r4, #12]
 8001d4c:	9b03      	ldr	r3, [sp, #12]
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	bfb8      	it	lt
 8001d52:	4618      	movlt	r0, r3
 8001d54:	e7a6      	b.n	8001ca4 <_printf_i+0x160>
 8001d56:	2301      	movs	r3, #1
 8001d58:	4632      	mov	r2, r6
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	47d0      	blx	sl
 8001d60:	3001      	adds	r0, #1
 8001d62:	d09d      	beq.n	8001ca0 <_printf_i+0x15c>
 8001d64:	3501      	adds	r5, #1
 8001d66:	68e3      	ldr	r3, [r4, #12]
 8001d68:	9903      	ldr	r1, [sp, #12]
 8001d6a:	1a5b      	subs	r3, r3, r1
 8001d6c:	42ab      	cmp	r3, r5
 8001d6e:	dcf2      	bgt.n	8001d56 <_printf_i+0x212>
 8001d70:	e7eb      	b.n	8001d4a <_printf_i+0x206>
 8001d72:	2500      	movs	r5, #0
 8001d74:	f104 0619 	add.w	r6, r4, #25
 8001d78:	e7f5      	b.n	8001d66 <_printf_i+0x222>
 8001d7a:	bf00      	nop
 8001d7c:	0800204e 	.word	0x0800204e
 8001d80:	0800205f 	.word	0x0800205f

08001d84 <__sflush_r>:
 8001d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8c:	0716      	lsls	r6, r2, #28
 8001d8e:	4605      	mov	r5, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	d454      	bmi.n	8001e3e <__sflush_r+0xba>
 8001d94:	684b      	ldr	r3, [r1, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dc02      	bgt.n	8001da0 <__sflush_r+0x1c>
 8001d9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd48      	ble.n	8001e32 <__sflush_r+0xae>
 8001da0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	d045      	beq.n	8001e32 <__sflush_r+0xae>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001dac:	682f      	ldr	r7, [r5, #0]
 8001dae:	6a21      	ldr	r1, [r4, #32]
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	d030      	beq.n	8001e16 <__sflush_r+0x92>
 8001db4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	0759      	lsls	r1, r3, #29
 8001dba:	d505      	bpl.n	8001dc8 <__sflush_r+0x44>
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001dc2:	b10b      	cbz	r3, 8001dc8 <__sflush_r+0x44>
 8001dc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dcc:	6a21      	ldr	r1, [r4, #32]
 8001dce:	4628      	mov	r0, r5
 8001dd0:	47b0      	blx	r6
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	d106      	bne.n	8001de6 <__sflush_r+0x62>
 8001dd8:	6829      	ldr	r1, [r5, #0]
 8001dda:	291d      	cmp	r1, #29
 8001ddc:	d82b      	bhi.n	8001e36 <__sflush_r+0xb2>
 8001dde:	4a2a      	ldr	r2, [pc, #168]	@ (8001e88 <__sflush_r+0x104>)
 8001de0:	410a      	asrs	r2, r1
 8001de2:	07d6      	lsls	r6, r2, #31
 8001de4:	d427      	bmi.n	8001e36 <__sflush_r+0xb2>
 8001de6:	2200      	movs	r2, #0
 8001de8:	6062      	str	r2, [r4, #4]
 8001dea:	04d9      	lsls	r1, r3, #19
 8001dec:	6922      	ldr	r2, [r4, #16]
 8001dee:	6022      	str	r2, [r4, #0]
 8001df0:	d504      	bpl.n	8001dfc <__sflush_r+0x78>
 8001df2:	1c42      	adds	r2, r0, #1
 8001df4:	d101      	bne.n	8001dfa <__sflush_r+0x76>
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	b903      	cbnz	r3, 8001dfc <__sflush_r+0x78>
 8001dfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8001dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dfe:	602f      	str	r7, [r5, #0]
 8001e00:	b1b9      	cbz	r1, 8001e32 <__sflush_r+0xae>
 8001e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d002      	beq.n	8001e10 <__sflush_r+0x8c>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff fbf2 	bl	80015f4 <_free_r>
 8001e10:	2300      	movs	r3, #0
 8001e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e14:	e00d      	b.n	8001e32 <__sflush_r+0xae>
 8001e16:	2301      	movs	r3, #1
 8001e18:	4628      	mov	r0, r5
 8001e1a:	47b0      	blx	r6
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	1c50      	adds	r0, r2, #1
 8001e20:	d1c9      	bne.n	8001db6 <__sflush_r+0x32>
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0c6      	beq.n	8001db6 <__sflush_r+0x32>
 8001e28:	2b1d      	cmp	r3, #29
 8001e2a:	d001      	beq.n	8001e30 <__sflush_r+0xac>
 8001e2c:	2b16      	cmp	r3, #22
 8001e2e:	d11e      	bne.n	8001e6e <__sflush_r+0xea>
 8001e30:	602f      	str	r7, [r5, #0]
 8001e32:	2000      	movs	r0, #0
 8001e34:	e022      	b.n	8001e7c <__sflush_r+0xf8>
 8001e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	e01b      	b.n	8001e76 <__sflush_r+0xf2>
 8001e3e:	690f      	ldr	r7, [r1, #16]
 8001e40:	2f00      	cmp	r7, #0
 8001e42:	d0f6      	beq.n	8001e32 <__sflush_r+0xae>
 8001e44:	0793      	lsls	r3, r2, #30
 8001e46:	680e      	ldr	r6, [r1, #0]
 8001e48:	bf08      	it	eq
 8001e4a:	694b      	ldreq	r3, [r1, #20]
 8001e4c:	600f      	str	r7, [r1, #0]
 8001e4e:	bf18      	it	ne
 8001e50:	2300      	movne	r3, #0
 8001e52:	eba6 0807 	sub.w	r8, r6, r7
 8001e56:	608b      	str	r3, [r1, #8]
 8001e58:	f1b8 0f00 	cmp.w	r8, #0
 8001e5c:	dde9      	ble.n	8001e32 <__sflush_r+0xae>
 8001e5e:	6a21      	ldr	r1, [r4, #32]
 8001e60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e62:	4643      	mov	r3, r8
 8001e64:	463a      	mov	r2, r7
 8001e66:	4628      	mov	r0, r5
 8001e68:	47b0      	blx	r6
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	dc08      	bgt.n	8001e80 <__sflush_r+0xfc>
 8001e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e76:	81a3      	strh	r3, [r4, #12]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e80:	4407      	add	r7, r0
 8001e82:	eba8 0800 	sub.w	r8, r8, r0
 8001e86:	e7e7      	b.n	8001e58 <__sflush_r+0xd4>
 8001e88:	dfbffffe 	.word	0xdfbffffe

08001e8c <_fflush_r>:
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	690b      	ldr	r3, [r1, #16]
 8001e90:	4605      	mov	r5, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	b913      	cbnz	r3, 8001e9c <_fflush_r+0x10>
 8001e96:	2500      	movs	r5, #0
 8001e98:	4628      	mov	r0, r5
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	b118      	cbz	r0, 8001ea6 <_fflush_r+0x1a>
 8001e9e:	6a03      	ldr	r3, [r0, #32]
 8001ea0:	b90b      	cbnz	r3, 8001ea6 <_fflush_r+0x1a>
 8001ea2:	f7ff f9ad 	bl	8001200 <__sinit>
 8001ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f3      	beq.n	8001e96 <_fflush_r+0xa>
 8001eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001eb0:	07d0      	lsls	r0, r2, #31
 8001eb2:	d404      	bmi.n	8001ebe <_fflush_r+0x32>
 8001eb4:	0599      	lsls	r1, r3, #22
 8001eb6:	d402      	bmi.n	8001ebe <_fflush_r+0x32>
 8001eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eba:	f7ff fb98 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f7ff ff5f 	bl	8001d84 <__sflush_r>
 8001ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ec8:	07da      	lsls	r2, r3, #31
 8001eca:	4605      	mov	r5, r0
 8001ecc:	d4e4      	bmi.n	8001e98 <_fflush_r+0xc>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	059b      	lsls	r3, r3, #22
 8001ed2:	d4e1      	bmi.n	8001e98 <_fflush_r+0xc>
 8001ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ed6:	f7ff fb8b 	bl	80015f0 <__retarget_lock_release_recursive>
 8001eda:	e7dd      	b.n	8001e98 <_fflush_r+0xc>

08001edc <__swhatbuf_r>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	b096      	sub	sp, #88	@ 0x58
 8001ee8:	4615      	mov	r5, r2
 8001eea:	461e      	mov	r6, r3
 8001eec:	da0d      	bge.n	8001f0a <__swhatbuf_r+0x2e>
 8001eee:	89a3      	ldrh	r3, [r4, #12]
 8001ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2340      	movne	r3, #64	@ 0x40
 8001efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f00:	2000      	movs	r0, #0
 8001f02:	6031      	str	r1, [r6, #0]
 8001f04:	602b      	str	r3, [r5, #0]
 8001f06:	b016      	add	sp, #88	@ 0x58
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	466a      	mov	r2, sp
 8001f0c:	f000 f848 	bl	8001fa0 <_fstat_r>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	dbec      	blt.n	8001eee <__swhatbuf_r+0x12>
 8001f14:	9901      	ldr	r1, [sp, #4]
 8001f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f1e:	4259      	negs	r1, r3
 8001f20:	4159      	adcs	r1, r3
 8001f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f26:	e7eb      	b.n	8001f00 <__swhatbuf_r+0x24>

08001f28 <__smakebuf_r>:
 8001f28:	898b      	ldrh	r3, [r1, #12]
 8001f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f2c:	079d      	lsls	r5, r3, #30
 8001f2e:	4606      	mov	r6, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	d507      	bpl.n	8001f44 <__smakebuf_r+0x1c>
 8001f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	6123      	str	r3, [r4, #16]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	6163      	str	r3, [r4, #20]
 8001f40:	b003      	add	sp, #12
 8001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f44:	ab01      	add	r3, sp, #4
 8001f46:	466a      	mov	r2, sp
 8001f48:	f7ff ffc8 	bl	8001edc <__swhatbuf_r>
 8001f4c:	9f00      	ldr	r7, [sp, #0]
 8001f4e:	4605      	mov	r5, r0
 8001f50:	4639      	mov	r1, r7
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7ff fbba 	bl	80016cc <_malloc_r>
 8001f58:	b948      	cbnz	r0, 8001f6e <__smakebuf_r+0x46>
 8001f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f5e:	059a      	lsls	r2, r3, #22
 8001f60:	d4ee      	bmi.n	8001f40 <__smakebuf_r+0x18>
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	81a3      	strh	r3, [r4, #12]
 8001f6c:	e7e2      	b.n	8001f34 <__smakebuf_r+0xc>
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	6020      	str	r0, [r4, #0]
 8001f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f76:	81a3      	strh	r3, [r4, #12]
 8001f78:	9b01      	ldr	r3, [sp, #4]
 8001f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001f7e:	b15b      	cbz	r3, 8001f98 <__smakebuf_r+0x70>
 8001f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f84:	4630      	mov	r0, r6
 8001f86:	f000 f81d 	bl	8001fc4 <_isatty_r>
 8001f8a:	b128      	cbz	r0, 8001f98 <__smakebuf_r+0x70>
 8001f8c:	89a3      	ldrh	r3, [r4, #12]
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	81a3      	strh	r3, [r4, #12]
 8001f98:	89a3      	ldrh	r3, [r4, #12]
 8001f9a:	431d      	orrs	r5, r3
 8001f9c:	81a5      	strh	r5, [r4, #12]
 8001f9e:	e7cf      	b.n	8001f40 <__smakebuf_r+0x18>

08001fa0 <_fstat_r>:
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	4d07      	ldr	r5, [pc, #28]	@ (8001fc0 <_fstat_r+0x20>)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	f7fe fa73 	bl	8000498 <_fstat>
 8001fb2:	1c43      	adds	r3, r0, #1
 8001fb4:	d102      	bne.n	8001fbc <_fstat_r+0x1c>
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	b103      	cbz	r3, 8001fbc <_fstat_r+0x1c>
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200001f8 	.word	0x200001f8

08001fc4 <_isatty_r>:
 8001fc4:	b538      	push	{r3, r4, r5, lr}
 8001fc6:	4d06      	ldr	r5, [pc, #24]	@ (8001fe0 <_isatty_r+0x1c>)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	4604      	mov	r4, r0
 8001fcc:	4608      	mov	r0, r1
 8001fce:	602b      	str	r3, [r5, #0]
 8001fd0:	f7fe fa72 	bl	80004b8 <_isatty>
 8001fd4:	1c43      	adds	r3, r0, #1
 8001fd6:	d102      	bne.n	8001fde <_isatty_r+0x1a>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	b103      	cbz	r3, 8001fde <_isatty_r+0x1a>
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
 8001fe0:	200001f8 	.word	0x200001f8

08001fe4 <_sbrk_r>:
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d06      	ldr	r5, [pc, #24]	@ (8002000 <_sbrk_r+0x1c>)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	602b      	str	r3, [r5, #0]
 8001ff0:	f7fe fa7a 	bl	80004e8 <_sbrk>
 8001ff4:	1c43      	adds	r3, r0, #1
 8001ff6:	d102      	bne.n	8001ffe <_sbrk_r+0x1a>
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	b103      	cbz	r3, 8001ffe <_sbrk_r+0x1a>
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	bd38      	pop	{r3, r4, r5, pc}
 8002000:	200001f8 	.word	0x200001f8

08002004 <_init>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	bf00      	nop
 8002008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200a:	bc08      	pop	{r3}
 800200c:	469e      	mov	lr, r3
 800200e:	4770      	bx	lr

08002010 <_fini>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	bf00      	nop
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr
