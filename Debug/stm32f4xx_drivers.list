
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002360  08002360  00003360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d8  080023d8  00004070  2**0
                  CONTENTS
  4 .ARM          00000000  080023d8  080023d8  00004070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023d8  080023d8  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000033d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023dc  080023dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080023e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004070  2**0
                  CONTENTS
 10 .bss          000001ac  20000070  20000070  00004070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00004070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002be9  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c91  00000000  00000000  00006c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00007920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b3  00000000  00000000  00007cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ee6  00000000  00000000  00007f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000450a  00000000  00000000  0000be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d3f8  00000000  00000000  0001037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001d773  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001444  00000000  00000000  0001d7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0001ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002348 	.word	0x08002348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002348 	.word	0x08002348

080001c8 <ds1307_init>:
static uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2C_handle;

uint8_t ds1307_init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	//1. initialize the i2c pins
	ds1307_i2c_pin_config();
 80001ce:	f000 f90f 	bl	80003f0 <ds1307_i2c_pin_config>

	//2. Initialize the i2c peripheral
	ds1307_i2c_config();
 80001d2:	f000 f949 	bl	8000468 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80001d6:	2101      	movs	r1, #1
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <ds1307_init+0x38>)
 80001da:	f001 f939 	bl	8001450 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);
 80001de:	2100      	movs	r1, #0
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f957 	bl	8000494 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f970 	bl	80004cc <ds1307_read>
 80001ec:	4603      	mov	r3, r0
 80001ee:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1 );
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	09db      	lsrs	r3, r3, #7
 80001f4:	b2db      	uxtb	r3, r3
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40005400 	.word	0x40005400

08000204 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *pRtc_time)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(pRtc_time->seconds);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f979 	bl	8000508 <binary_to_bcd>
 8000216:	4603      	mov	r3, r0
 8000218:	73bb      	strb	r3, [r7, #14]
	seconds  &= ~(1<<7);
 800021a:	7bbb      	ldrb	r3, [r7, #14]
 800021c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000220:	73bb      	strb	r3, [r7, #14]

	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000222:	7bbb      	ldrb	r3, [r7, #14]
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f934 	bl	8000494 <ds1307_write>

	ds1307_write(binary_to_bcd(pRtc_time->minutes), DS1307_ADDR_MIN);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f969 	bl	8000508 <binary_to_bcd>
 8000236:	4603      	mov	r3, r0
 8000238:	2101      	movs	r1, #1
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f92a 	bl	8000494 <ds1307_write>

	hrs = binary_to_bcd(pRtc_time->hours);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f95f 	bl	8000508 <binary_to_bcd>
 800024a:	4603      	mov	r3, r0
 800024c:	73fb      	strb	r3, [r7, #15]

	if(pRtc_time->time_format == TIME_FORMAT_24HRS)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	78db      	ldrb	r3, [r3, #3]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d104      	bne.n	8000260 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1<<6);
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	e011      	b.n	8000284 <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1<<6);
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000266:	73fb      	strb	r3, [r7, #15]
		hrs = (pRtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1<<5) : hrs & ~(1<<5);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	78db      	ldrb	r3, [r3, #3]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d104      	bne.n	800027a <ds1307_set_current_time+0x76>
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	b2db      	uxtb	r3, r3
 8000278:	e003      	b.n	8000282 <ds1307_set_current_time+0x7e>
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	f023 0320 	bic.w	r3, r3, #32
 8000280:	b2db      	uxtb	r3, r3
 8000282:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs, DS1307_ADDR_HRS);
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	2102      	movs	r1, #2
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f903 	bl	8000494 <ds1307_write>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *pRtc_time)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f914 	bl	80004cc <ds1307_read>
 80002a4:	4603      	mov	r3, r0
 80002a6:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1<<7);
 80002a8:	7bbb      	ldrb	r3, [r7, #14]
 80002aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002ae:	73bb      	strb	r3, [r7, #14]

	pRtc_time->seconds = bcd_to_binary(seconds);
 80002b0:	7bbb      	ldrb	r3, [r7, #14]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f954 	bl	8000560 <bcd_to_binary>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	701a      	strb	r2, [r3, #0]
	pRtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 f903 	bl	80004cc <ds1307_read>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f949 	bl	8000560 <bcd_to_binary>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80002d6:	2002      	movs	r0, #2
 80002d8:	f000 f8f8 	bl	80004cc <ds1307_read>
 80002dc:	4603      	mov	r3, r0
 80002de:	73fb      	strb	r3, [r7, #15]

	if(hrs & (1<<6)){
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d00f      	beq.n	800030a <ds1307_get_current_time+0x74>
		//12 hrs format
		pRtc_time->time_format = !((hrs & (1 << 5)) == 0);
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	bf14      	ite	ne
 80002f4:	2301      	movne	r3, #1
 80002f6:	2300      	moveq	r3, #0
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5); //clear bit 6 and 5
 8000300:	7bfb      	ldrb	r3, [r7, #15]
 8000302:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000306:	73fb      	strb	r3, [r7, #15]
 8000308:	e002      	b.n	8000310 <ds1307_get_current_time+0x7a>
	}
	else{
		//24 hrs format
		pRtc_time->time_format = TIME_FORMAT_24HRS;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2202      	movs	r2, #2
 800030e:	70da      	strb	r2, [r3, #3]
	}
	pRtc_time->hours = bcd_to_binary(hrs);
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f924 	bl	8000560 <bcd_to_binary>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	709a      	strb	r2, [r3, #2]
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *pRtc_date)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(pRtc_date->date), DS1307_ADDR_DATE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f8e7 	bl	8000508 <binary_to_bcd>
 800033a:	4603      	mov	r3, r0
 800033c:	2104      	movs	r1, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f8a8 	bl	8000494 <ds1307_write>

	ds1307_write(binary_to_bcd(pRtc_date->month), DS1307_ADDR_MONTH);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f8dd 	bl	8000508 <binary_to_bcd>
 800034e:	4603      	mov	r3, r0
 8000350:	2105      	movs	r1, #5
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f89e 	bl	8000494 <ds1307_write>

	ds1307_write(binary_to_bcd(pRtc_date->year), DS1307_ADDR_YEAR);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	789b      	ldrb	r3, [r3, #2]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f8d3 	bl	8000508 <binary_to_bcd>
 8000362:	4603      	mov	r3, r0
 8000364:	2106      	movs	r1, #6
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f894 	bl	8000494 <ds1307_write>

	ds1307_write(binary_to_bcd(pRtc_date->day), DS1307_ADDR_DAY);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	78db      	ldrb	r3, [r3, #3]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f8c9 	bl	8000508 <binary_to_bcd>
 8000376:	4603      	mov	r3, r0
 8000378:	2103      	movs	r1, #3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f88a 	bl	8000494 <ds1307_write>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *pRtc_date)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	pRtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000390:	2004      	movs	r0, #4
 8000392:	f000 f89b 	bl	80004cc <ds1307_read>
 8000396:	4603      	mov	r3, r0
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f8e1 	bl	8000560 <bcd_to_binary>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	701a      	strb	r2, [r3, #0]

	pRtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80003a6:	2005      	movs	r0, #5
 80003a8:	f000 f890 	bl	80004cc <ds1307_read>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f8d6 	bl	8000560 <bcd_to_binary>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	705a      	strb	r2, [r3, #1]

	pRtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80003bc:	2006      	movs	r0, #6
 80003be:	f000 f885 	bl	80004cc <ds1307_read>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f8cb 	bl	8000560 <bcd_to_binary>
 80003ca:	4603      	mov	r3, r0
 80003cc:	461a      	mov	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	709a      	strb	r2, [r3, #2]

	pRtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80003d2:	2003      	movs	r0, #3
 80003d4:	f000 f87a 	bl	80004cc <ds1307_read>
 80003d8:	4603      	mov	r3, r0
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f8c0 	bl	8000560 <bcd_to_binary>
 80003e0:	4603      	mov	r3, r0
 80003e2:	461a      	mov	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	70da      	strb	r2, [r3, #3]
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	220c      	movs	r2, #12
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fcee 	bl	8001de0 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000404:	463b      	mov	r3, r7
 8000406:	220c      	movs	r2, #12
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fce8 	bl	8001de0 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <ds1307_i2c_pin_config+0x74>)
 8000412:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000414:	2302      	movs	r3, #2
 8000416:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000418:	2304      	movs	r3, #4
 800041a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800041c:	2301      	movs	r3, #1
 800041e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000420:	2302      	movs	r3, #2
 8000422:	74bb      	strb	r3, [r7, #18]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000424:	2307      	movs	r3, #7
 8000426:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000428:	2301      	movs	r3, #1
 800042a:	753b      	strb	r3, [r7, #20]

	GPIO_Init(&i2c_sda);
 800042c:	f107 030c 	add.w	r3, r7, #12
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fded 	bl	8001010 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <ds1307_i2c_pin_config+0x74>)
 8000438:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800043a:	2302      	movs	r3, #2
 800043c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800043e:	2304      	movs	r3, #4
 8000440:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000442:	2301      	movs	r3, #1
 8000444:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000446:	2302      	movs	r3, #2
 8000448:	71bb      	strb	r3, [r7, #6]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800044a:	2306      	movs	r3, #6
 800044c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800044e:	2301      	movs	r3, #1
 8000450:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&i2c_scl);
 8000452:	463b      	mov	r3, r7
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fddb 	bl	8001010 <GPIO_Init>

}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020400 	.word	0x40020400

08000468 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	g_ds1307I2C_handle.pI2Cx = DS1307_I2C;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <ds1307_i2c_config+0x20>)
 800046e:	4a07      	ldr	r2, [pc, #28]	@ (800048c <ds1307_i2c_config+0x24>)
 8000470:	601a      	str	r2, [r3, #0]
	g_ds1307I2C_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000472:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <ds1307_i2c_config+0x20>)
 8000474:	2201      	movs	r2, #1
 8000476:	725a      	strb	r2, [r3, #9]
	g_ds1307I2C_handle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000478:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <ds1307_i2c_config+0x20>)
 800047a:	4a05      	ldr	r2, [pc, #20]	@ (8000490 <ds1307_i2c_config+0x28>)
 800047c:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2C_handle);
 800047e:	4802      	ldr	r0, [pc, #8]	@ (8000488 <ds1307_i2c_config+0x20>)
 8000480:	f001 f816 	bl	80014b0 <I2C_Init>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000008c 	.word	0x2000008c
 800048c:	40005400 	.word	0x40005400
 8000490:	000186a0 	.word	0x000186a0

08000494 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t reg_address)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	460a      	mov	r2, r1
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];

	tx[0] = reg_address;
 80004a4:	79bb      	ldrb	r3, [r7, #6]
 80004a6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds1307I2C_handle, tx, 2, DS1307_I2C_ADDR, 0);
 80004ac:	f107 010c 	add.w	r1, r7, #12
 80004b0:	2300      	movs	r3, #0
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2368      	movs	r3, #104	@ 0x68
 80004b6:	2202      	movs	r2, #2
 80004b8:	4803      	ldr	r0, [pc, #12]	@ (80004c8 <ds1307_write+0x34>)
 80004ba:	f001 f8a9 	bl	8001610 <I2C_MasterSendData>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000008c 	.word	0x2000008c

080004cc <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_address)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2C_handle, &reg_address, 1, DS1307_I2C_ADDR, 0);
 80004d6:	1df9      	adds	r1, r7, #7
 80004d8:	2300      	movs	r3, #0
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2368      	movs	r3, #104	@ 0x68
 80004de:	2201      	movs	r2, #1
 80004e0:	4808      	ldr	r0, [pc, #32]	@ (8000504 <ds1307_read+0x38>)
 80004e2:	f001 f895 	bl	8001610 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2C_handle, &data, 1, DS1307_I2C_ADDR, 0);
 80004e6:	f107 010f 	add.w	r1, r7, #15
 80004ea:	2300      	movs	r3, #0
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2368      	movs	r3, #104	@ 0x68
 80004f0:	2201      	movs	r2, #1
 80004f2:	4804      	ldr	r0, [pc, #16]	@ (8000504 <ds1307_read+0x38>)
 80004f4:	f001 f8ef 	bl	80016d6 <I2C_MasterReceiveData>

	return data;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000008c 	.word	0x2000008c

08000508 <binary_to_bcd>:

static uint8_t binary_to_bcd( uint8_t value)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b09      	cmp	r3, #9
 800051a:	d918      	bls.n	800054e <binary_to_bcd+0x46>
	{
		m = value / 10;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4a0f      	ldr	r2, [pc, #60]	@ (800055c <binary_to_bcd+0x54>)
 8000520:	fba2 2303 	umull	r2, r3, r2, r3
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000528:	79fa      	ldrb	r2, [r7, #7]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <binary_to_bcd+0x54>)
 800052c:	fba3 1302 	umull	r1, r3, r3, r2
 8000530:	08d9      	lsrs	r1, r3, #3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	737b      	strb	r3, [r7, #13]
		bcd = ((m<<4) | n );
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	b25a      	sxtb	r2, r3
 8000544:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000548:	4313      	orrs	r3, r2
 800054a:	b25b      	sxtb	r3, r3
 800054c:	73fb      	strb	r3, [r7, #15]
	}



	return bcd;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	cccccccd 	.word	0xcccccccd

08000560 <bcd_to_binary>:

static uint8_t bcd_to_binary( uint8_t value)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;

	m = (uint8_t)(value >> 4) * 10;
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	091b      	lsrs	r3, r3, #4
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 030f 	and.w	r3, r3, #15
 8000580:	73bb      	strb	r3, [r7, #14]

	return (m+n);
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	4413      	add	r3, r2
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <lcd_send_command>:
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);
void lcd_set_cursor(uint8_t row, uint8_t column);

void lcd_send_command(uint8_t cmd)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	// RS=0 for LCD command
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <lcd_send_command+0x40>)
 80005a8:	f000 fed4 	bl	8001354 <GPIO_WriteToOutputPin>

	// R/w = 0 for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <lcd_send_command+0x40>)
 80005b2:	f000 fecf 	bl	8001354 <GPIO_WriteToOutputPin>

	write_4bits(cmd >> 4);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f8cd 	bl	800075c <write_4bits>
	write_4bits(cmd & 0x0F);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8c6 	bl	800075c <write_4bits>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020c00 	.word	0x40020c00

080005dc <lcd_print_char>:

void lcd_print_char(uint8_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	//RS=1 for LCD user data
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2100      	movs	r1, #0
 80005ea:	480c      	ldr	r0, [pc, #48]	@ (800061c <lcd_print_char+0x40>)
 80005ec:	f000 feb2 	bl	8001354 <GPIO_WriteToOutputPin>

	// R/w = 0 for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4809      	ldr	r0, [pc, #36]	@ (800061c <lcd_print_char+0x40>)
 80005f6:	f000 fead 	bl	8001354 <GPIO_WriteToOutputPin>

	write_4bits(data >> 4);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f8ab 	bl	800075c <write_4bits>
	write_4bits(data & 0x0F);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f8a4 	bl	800075c <write_4bits>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020c00 	.word	0x40020c00

08000620 <lcd_print_string>:

void lcd_print_string(char *message)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_print_char((uint8_t)*message++);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	607a      	str	r2, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffd3 	bl	80005dc <lcd_print_char>
	}
	while(*message != '\0');
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f4      	bne.n	8000628 <lcd_print_string+0x8>
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <lcd_init>:

void lcd_init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
	//1. configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 800064e:	4b42      	ldr	r3, [pc, #264]	@ (8000758 <lcd_init+0x110>)
 8000650:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000652:	2301      	movs	r3, #1
 8000654:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000656:	2300      	movs	r3, #0
 8000658:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800065a:	2300      	movs	r3, #0
 800065c:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800065e:	2300      	movs	r3, #0
 8000660:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000662:	2302      	movs	r3, #2
 8000664:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fcd1 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 800066e:	2301      	movs	r3, #1
 8000670:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fccb 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800067a:	2302      	movs	r3, #2
 800067c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fcc5 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000686:	2303      	movs	r3, #3
 8000688:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fcbf 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000692:	2304      	movs	r3, #4
 8000694:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fcb9 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800069e:	2305      	movs	r3, #5
 80006a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fcb3 	bl	8001010 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80006aa:	2306      	movs	r3, #6
 80006ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fcad 	bl	8001010 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	4827      	ldr	r0, [pc, #156]	@ (8000758 <lcd_init+0x110>)
 80006bc:	f000 fe4a 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	4824      	ldr	r0, [pc, #144]	@ (8000758 <lcd_init+0x110>)
 80006c6:	f000 fe45 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2102      	movs	r1, #2
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <lcd_init+0x110>)
 80006d0:	f000 fe40 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2103      	movs	r1, #3
 80006d8:	481f      	ldr	r0, [pc, #124]	@ (8000758 <lcd_init+0x110>)
 80006da:	f000 fe3b 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2104      	movs	r1, #4
 80006e2:	481d      	ldr	r0, [pc, #116]	@ (8000758 <lcd_init+0x110>)
 80006e4:	f000 fe36 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2105      	movs	r1, #5
 80006ec:	481a      	ldr	r0, [pc, #104]	@ (8000758 <lcd_init+0x110>)
 80006ee:	f000 fe31 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2106      	movs	r1, #6
 80006f6:	4818      	ldr	r0, [pc, #96]	@ (8000758 <lcd_init+0x110>)
 80006f8:	f000 fe2c 	bl	8001354 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80006fc:	2028      	movs	r0, #40	@ 0x28
 80006fe:	f000 f8b6 	bl	800086e <mdelay>

	// RS = 0, for LCD command
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	4814      	ldr	r0, [pc, #80]	@ (8000758 <lcd_init+0x110>)
 8000708:	f000 fe24 	bl	8001354 <GPIO_WriteToOutputPin>

	// RnW = 0, writing to LCD
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <lcd_init+0x110>)
 8000712:	f000 fe1f 	bl	8001354 <GPIO_WriteToOutputPin>

	write_4bits(0x3);
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f820 	bl	800075c <write_4bits>

	mdelay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f000 f8a6 	bl	800086e <mdelay>

	write_4bits(0x3);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f81a 	bl	800075c <write_4bits>

	udelay(150);
 8000728:	2096      	movs	r0, #150	@ 0x96
 800072a:	f000 f8b9 	bl	80008a0 <udelay>

	write_4bits(0x3);
 800072e:	2003      	movs	r0, #3
 8000730:	f000 f814 	bl	800075c <write_4bits>

	write_4bits(0x2);
 8000734:	2002      	movs	r0, #2
 8000736:	f000 f811 	bl	800075c <write_4bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800073a:	2028      	movs	r0, #40	@ 0x28
 800073c:	f7ff ff2c 	bl	8000598 <lcd_send_command>

	//display ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000740:	200e      	movs	r0, #14
 8000742:	f7ff ff29 	bl	8000598 <lcd_send_command>

	lcd_display_clear();
 8000746:	f000 f857 	bl	80007f8 <lcd_display_clear>

	lcd_send_command(LCD_CMD_INCADD);
 800074a:	2006      	movs	r0, #6
 800074c:	f7ff ff24 	bl	8000598 <lcd_send_command>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020c00 	.word	0x40020c00

0800075c <write_4bits>:

/* writes 4 bits of data/command on to D4, D5 D6D7 lines*/
static void write_4bits(uint8_t value)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ( (value >> 0) & 0x1) );
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	2103      	movs	r1, #3
 8000772:	4815      	ldr	r0, [pc, #84]	@ (80007c8 <write_4bits+0x6c>)
 8000774:	f000 fdee 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ( (value >> 1) & 0x1) );
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	085b      	lsrs	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	2104      	movs	r1, #4
 8000788:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <write_4bits+0x6c>)
 800078a:	f000 fde3 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ( (value >> 2) & 0x1) );
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	2105      	movs	r1, #5
 800079e:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <write_4bits+0x6c>)
 80007a0:	f000 fdd8 	bl	8001354 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ( (value >> 3) & 0x1) );
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	2106      	movs	r1, #6
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <write_4bits+0x6c>)
 80007b6:	f000 fdcd 	bl	8001354 <GPIO_WriteToOutputPin>

	lcd_enable();
 80007ba:	f000 f807 	bl	80007cc <lcd_enable>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020c00 	.word	0x40020c00

080007cc <lcd_enable>:

static void lcd_enable(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <lcd_enable+0x28>)
 80007d6:	f000 fdbd 	bl	8001354 <GPIO_WriteToOutputPin>
	udelay(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f000 f860 	bl	80008a0 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <lcd_enable+0x28>)
 80007e6:	f000 fdb5 	bl	8001354 <GPIO_WriteToOutputPin>
	udelay(100);
 80007ea:	2064      	movs	r0, #100	@ 0x64
 80007ec:	f000 f858 	bl	80008a0 <udelay>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <lcd_display_clear>:

void lcd_display_clear(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	//display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fecb 	bl	8000598 <lcd_send_command>

	mdelay(2);
 8000802:	2002      	movs	r0, #2
 8000804:	f000 f833 	bl	800086e <mdelay>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <lcd_display_return_home>:

void lcd_display_return_home(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fec1 	bl	8000598 <lcd_send_command>

	mdelay(2);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 f829 	bl	800086e <mdelay>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	column--;
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	3b01      	subs	r3, #1
 8000834:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d002      	beq.n	8000842 <lcd_set_cursor+0x22>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d009      	beq.n	8000854 <lcd_set_cursor+0x34>

	case 2:
		lcd_send_command((column |= 0xC0));
		break;
	default:
		break;
 8000840:	e011      	b.n	8000866 <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0x80));
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fea3 	bl	8000598 <lcd_send_command>
		break;
 8000852:	e008      	b.n	8000866 <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xC0));
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800085a:	71bb      	strb	r3, [r7, #6]
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe9a 	bl	8000598 <lcd_send_command>
		break;
 8000864:	bf00      	nop
	}
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <mdelay>:

static void mdelay(uint32_t cnt)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt *1000); i++);
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e002      	b.n	8000882 <mdelay+0x14>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3f4      	bcc.n	800087c <mdelay+0xe>
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <udelay>:

static void udelay(uint32_t cnt)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt *1); i++);
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e002      	b.n	80008b4 <udelay+0x14>
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d3f8      	bcc.n	80008ae <udelay+0xe>
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <mdelay>:
void number_to_string(uint8_t num, char* buf);
char* date_to_string(RTC_date_t *rtc_date);
static void mdelay(uint32_t cnt);

static void mdelay(uint32_t cnt)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt *1000); i++);
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e002      	b.n	80008de <mdelay+0x14>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3f4      	bcc.n	80008d8 <mdelay+0xe>
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <init_systick_timer>:


void init_systick_timer(uint32_t tick_hz)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <init_systick_timer+0x60>)
 8000906:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <init_systick_timer+0x64>)
 800090a:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 800090c:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <init_systick_timer+0x68>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	fbb2 f3f3 	udiv	r3, r2, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f043 0202 	orr.w	r2, r3, #2
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f043 0204 	orr.w	r2, r3, #4
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f043 0201 	orr.w	r2, r3, #1
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	601a      	str	r2, [r3, #0]

}
 800094e:	bf00      	nop
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e014 	.word	0xe000e014
 8000960:	e000e010 	.word	0xe000e010
 8000964:	00f42400 	.word	0x00f42400

08000968 <get_day_of_week>:



char* get_day_of_week(uint8_t i)
{
 8000968:	b4b0      	push	{r4, r5, r7}
 800096a:	b08b      	sub	sp, #44	@ 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"SUN","MON","TUES","WED","THRS","FRI","SAT"};
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <get_day_of_week+0x38>)
 8000974:	f107 040c 	add.w	r4, r7, #12
 8000978:	461d      	mov	r5, r3
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000982:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b01      	subs	r3, #1
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	3328      	adds	r3, #40	@ 0x28
 800098e:	443b      	add	r3, r7
 8000990:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000994:	4618      	mov	r0, r3
 8000996:	372c      	adds	r7, #44	@ 0x2c
 8000998:	46bd      	mov	sp, r7
 800099a:	bcb0      	pop	{r4, r5, r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	08002384 	.word	0x08002384

080009a4 <number_to_string>:

void number_to_string(uint8_t num, char* buf)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d809      	bhi.n	80009ca <number_to_string+0x26>
	{
		buf[0] = '0';
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2230      	movs	r2, #48	@ 0x30
 80009ba:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	3230      	adds	r2, #48	@ 0x30
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
	else if( num >= 10)
	{
		buf[0] = (num/10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 80009c8:	e01c      	b.n	8000a04 <number_to_string+0x60>
	else if( num >= 10)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b09      	cmp	r3, #9
 80009ce:	d919      	bls.n	8000a04 <number_to_string+0x60>
		buf[0] = (num/10) + 48;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <number_to_string+0x6c>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3330      	adds	r3, #48	@ 0x30
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 80009e4:	79fa      	ldrb	r2, [r7, #7]
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <number_to_string+0x6c>)
 80009e8:	fba3 1302 	umull	r1, r3, r3, r2
 80009ec:	08d9      	lsrs	r1, r3, #3
 80009ee:	460b      	mov	r3, r1
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	440b      	add	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	3230      	adds	r2, #48	@ 0x30
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	701a      	strb	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	cccccccd 	.word	0xcccccccd

08000a14 <time_to_string>:

//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <time_to_string+0x48>)
 8000a1e:	223a      	movs	r2, #58	@ 0x3a
 8000a20:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <time_to_string+0x48>)
 8000a24:	223a      	movs	r2, #58	@ 0x3a
 8000a26:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	789b      	ldrb	r3, [r3, #2]
 8000a2c:	490b      	ldr	r1, [pc, #44]	@ (8000a5c <time_to_string+0x48>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffb8 	bl	80009a4 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	4909      	ldr	r1, [pc, #36]	@ (8000a60 <time_to_string+0x4c>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffb2 	bl	80009a4 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <time_to_string+0x50>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffac 	bl	80009a4 <number_to_string>

	buf[8] = '\0';
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <time_to_string+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a52:	4b02      	ldr	r3, [pc, #8]	@ (8000a5c <time_to_string+0x48>)
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000b4 	.word	0x200000b4
 8000a60:	200000b7 	.word	0x200000b7
 8000a64:	200000ba 	.word	0x200000ba

08000a68 <date_to_string>:

char* date_to_string(RTC_date_t *rtc_date)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <date_to_string+0x48>)
 8000a72:	222f      	movs	r2, #47	@ 0x2f
 8000a74:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <date_to_string+0x48>)
 8000a78:	222f      	movs	r2, #47	@ 0x2f
 8000a7a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	490b      	ldr	r1, [pc, #44]	@ (8000ab0 <date_to_string+0x48>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff8e 	bl	80009a4 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	4909      	ldr	r1, [pc, #36]	@ (8000ab4 <date_to_string+0x4c>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff88 	bl	80009a4 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	4907      	ldr	r1, [pc, #28]	@ (8000ab8 <date_to_string+0x50>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff82 	bl	80009a4 <number_to_string>

	buf[8] = '\0';
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <date_to_string+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	721a      	strb	r2, [r3, #8]

	return buf;
 8000aa6:	4b02      	ldr	r3, [pc, #8]	@ (8000ab0 <date_to_string+0x48>)
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000c0 	.word	0x200000c0
 8000ab4:	200000c3 	.word	0x200000c3
 8000ab8:	200000c6 	.word	0x200000c6

08000abc <main>:

int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	printf("RTC test\n");
 8000ac2:	4836      	ldr	r0, [pc, #216]	@ (8000b9c <main+0xe0>)
 8000ac4:	f001 f8ac 	bl	8001c20 <puts>

	lcd_init();
 8000ac8:	f7ff fdbe 	bl	8000648 <lcd_init>

	lcd_print_string("RTC Test...");
 8000acc:	4834      	ldr	r0, [pc, #208]	@ (8000ba0 <main+0xe4>)
 8000ace:	f7ff fda7 	bl	8000620 <lcd_print_string>

	mdelay(2000);
 8000ad2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad6:	f7ff fef8 	bl	80008ca <mdelay>

	lcd_display_clear();
 8000ada:	f7ff fe8d 	bl	80007f8 <lcd_display_clear>
	lcd_display_return_home();
 8000ade:	f7ff fe95 	bl	800080c <lcd_display_return_home>

	if(ds1307_init()){
 8000ae2:	f7ff fb71 	bl	80001c8 <ds1307_init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <main+0x3a>
		printf("RTC init has failed \n");
 8000aec:	482d      	ldr	r0, [pc, #180]	@ (8000ba4 <main+0xe8>)
 8000aee:	f001 f897 	bl	8001c20 <puts>
		while(1);
 8000af2:	bf00      	nop
 8000af4:	e7fd      	b.n	8000af2 <main+0x36>
	}

	init_systick_timer(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ff00 	bl	80008fc <init_systick_timer>

	current_date.day = SUNDAY;
 8000afc:	2301      	movs	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
	current_date.date = 16;
 8000b00:	2310      	movs	r3, #16
 8000b02:	713b      	strb	r3, [r7, #4]
	current_date.month = 3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	717b      	strb	r3, [r7, #5]
	current_date.year = 25;
 8000b08:	2319      	movs	r3, #25
 8000b0a:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 28;
 8000b10:	231c      	movs	r3, #28
 8000b12:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 41;
 8000b14:	2329      	movs	r3, #41	@ 0x29
 8000b16:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc02 	bl	8000328 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb6b 	bl	8000204 <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc29 	bl	8000388 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fbab 	bl	8000296 <ds1307_get_current_time>


	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000b40:	7afb      	ldrb	r3, [r7, #11]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d013      	beq.n	8000b6e <main+0xb2>
	{
		char *am_pm;
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <main+0x94>
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <main+0xec>)
 8000b4e:	e000      	b.n	8000b52 <main+0x96>
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <main+0xf0>)
 8000b52:	60fb      	str	r3, [r7, #12]
		lcd_print_string(time_to_string(&current_time));
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5b 	bl	8000a14 <time_to_string>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd5d 	bl	8000620 <lcd_print_string>
		lcd_print_string(am_pm);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff fd5a 	bl	8000620 <lcd_print_string>
 8000b6c:	e008      	b.n	8000b80 <main+0xc4>
	}
	else
	{
		lcd_print_string(time_to_string(&current_time));
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff4e 	bl	8000a14 <time_to_string>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fd50 	bl	8000620 <lcd_print_string>
	}

	lcd_set_cursor(2, 1);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fe4c 	bl	8000820 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff6c 	bl	8000a68 <date_to_string>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fd44 	bl	8000620 <lcd_print_string>

	while(1);
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <main+0xdc>
 8000b9c:	080023a0 	.word	0x080023a0
 8000ba0:	080023ac 	.word	0x080023ac
 8000ba4:	080023b8 	.word	0x080023b8
 8000ba8:	080023d0 	.word	0x080023d0
 8000bac:	080023d4 	.word	0x080023d4

08000bb0 <SysTick_Handler>:

	return 0;
}

void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb6b 	bl	8000296 <ds1307_get_current_time>

	lcd_set_cursor(1, 1);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe2c 	bl	8000820 <lcd_set_cursor>
		if(current_time.time_format != TIME_FORMAT_24HRS)
 8000bc8:	7afb      	ldrb	r3, [r7, #11]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d013      	beq.n	8000bf6 <SysTick_Handler+0x46>
		{
			char *am_pm;
			am_pm = (current_time.time_format) ? "PM" : "AM";
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SysTick_Handler+0x28>
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <SysTick_Handler+0x9c>)
 8000bd6:	e000      	b.n	8000bda <SysTick_Handler+0x2a>
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <SysTick_Handler+0xa0>)
 8000bda:	60fb      	str	r3, [r7, #12]
			//printf("Current time = %s %s \n", time_to_string(&current_time),am_pm);
			lcd_print_string(time_to_string(&current_time));
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff17 	bl	8000a14 <time_to_string>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fd19 	bl	8000620 <lcd_print_string>
			lcd_print_string(am_pm);
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fd16 	bl	8000620 <lcd_print_string>
 8000bf4:	e008      	b.n	8000c08 <SysTick_Handler+0x58>
		}
		else
		{
			//printf("Current time = %s \n", time_to_string(&current_time));
			lcd_print_string(time_to_string(&current_time));
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff0a 	bl	8000a14 <time_to_string>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd0c 	bl	8000620 <lcd_print_string>
		}

	ds1307_get_current_date(&current_date);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fbbc 	bl	8000388 <ds1307_get_current_date>
	lcd_set_cursor(2, 1);
 8000c10:	2101      	movs	r1, #1
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fe04 	bl	8000820 <lcd_set_cursor>
	//printf("Current date = %s <%s> \n", date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_print_string(date_to_string(&current_date));
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff24 	bl	8000a68 <date_to_string>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fcfc 	bl	8000620 <lcd_print_string>
	lcd_print_char('<');
 8000c28:	203c      	movs	r0, #60	@ 0x3c
 8000c2a:	f7ff fcd7 	bl	80005dc <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe99 	bl	8000968 <get_day_of_week>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcf1 	bl	8000620 <lcd_print_string>
	lcd_print_char('>');
 8000c3e:	203e      	movs	r0, #62	@ 0x3e
 8000c40:	f7ff fccc 	bl	80005dc <lcd_print_char>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	080023d0 	.word	0x080023d0
 8000c50:	080023d4 	.word	0x080023d4

08000c54 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <ITM_SendChar+0x48>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <ITM_SendChar+0x48>)
 8000c64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c68:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <ITM_SendChar+0x4c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <ITM_SendChar+0x4c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c76:	bf00      	nop
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f8      	beq.n	8000c78 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c86:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000edfc 	.word	0xe000edfc
 8000ca0:	e0000e00 	.word	0xe0000e00

08000ca4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ffab 	bl	8000c54 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>

  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f001 f864 	bl	8001e7c <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200000cc 	.word	0x200000cc
 8000de8:	20000220 	.word	0x20000220

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f001 f835 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fe4d 	bl	8000abc <main>

08000e22 <LoopForever>:

LoopForever:
  b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e30:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 8000e34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e38:	2000021c 	.word	0x2000021c

08000e3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <GPIO_PeriClckCtrl>:
 */

#include "stm32f407_gpio_driver.h"

void GPIO_PeriClckCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d162      	bne.n	8000f18 <GPIO_PeriClckCtrl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a64      	ldr	r2, [pc, #400]	@ (8000fe8 <GPIO_PeriClckCtrl+0x1a8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <GPIO_PeriClckCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e5a:	4b64      	ldr	r3, [pc, #400]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a63      	ldr	r2, [pc, #396]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000e66:	e0b9      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a61      	ldr	r2, [pc, #388]	@ (8000ff0 <GPIO_PeriClckCtrl+0x1b0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d106      	bne.n	8000e7e <GPIO_PeriClckCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000e70:	4b5e      	ldr	r3, [pc, #376]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a5d      	ldr	r2, [pc, #372]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e7c:	e0ae      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff4 <GPIO_PeriClckCtrl+0x1b4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d106      	bne.n	8000e94 <GPIO_PeriClckCtrl+0x54>
			GPIOC_PCLK_EN();
 8000e86:	4b59      	ldr	r3, [pc, #356]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a58      	ldr	r2, [pc, #352]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e92:	e0a3      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a58      	ldr	r2, [pc, #352]	@ (8000ff8 <GPIO_PeriClckCtrl+0x1b8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d106      	bne.n	8000eaa <GPIO_PeriClckCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	4a52      	ldr	r2, [pc, #328]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ea8:	e098      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a53      	ldr	r2, [pc, #332]	@ (8000ffc <GPIO_PeriClckCtrl+0x1bc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d106      	bne.n	8000ec0 <GPIO_PeriClckCtrl+0x80>
			GPIOE_PCLK_EN();
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ebe:	e08d      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8001000 <GPIO_PeriClckCtrl+0x1c0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d106      	bne.n	8000ed6 <GPIO_PeriClckCtrl+0x96>
			GPIOF_PCLK_EN();
 8000ec8:	4b48      	ldr	r3, [pc, #288]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a47      	ldr	r2, [pc, #284]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ed4:	e082      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8001004 <GPIO_PeriClckCtrl+0x1c4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d106      	bne.n	8000eec <GPIO_PeriClckCtrl+0xac>
			GPIOG_PCLK_EN();
 8000ede:	4b43      	ldr	r3, [pc, #268]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a42      	ldr	r2, [pc, #264]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eea:	e077      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a46      	ldr	r2, [pc, #280]	@ (8001008 <GPIO_PeriClckCtrl+0x1c8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d106      	bne.n	8000f02 <GPIO_PeriClckCtrl+0xc2>
			GPIOH_PCLK_EN();
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f00:	e06c      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a41      	ldr	r2, [pc, #260]	@ (800100c <GPIO_PeriClckCtrl+0x1cc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d168      	bne.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_EN();
 8000f0a:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a37      	ldr	r2, [pc, #220]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f16:	e061      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		if(pGPIOx == GPIOA)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a33      	ldr	r2, [pc, #204]	@ (8000fe8 <GPIO_PeriClckCtrl+0x1a8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d106      	bne.n	8000f2e <GPIO_PeriClckCtrl+0xee>
			GPIOA_PCLK_DI();
 8000f20:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f2c:	e056      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <GPIO_PeriClckCtrl+0x1b0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d106      	bne.n	8000f44 <GPIO_PeriClckCtrl+0x104>
			GPIOB_PCLK_DI();
 8000f36:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f42:	e04b      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff4 <GPIO_PeriClckCtrl+0x1b4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d106      	bne.n	8000f5a <GPIO_PeriClckCtrl+0x11a>
			GPIOC_PCLK_DI();
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f52:	f023 0304 	bic.w	r3, r3, #4
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f58:	e040      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <GPIO_PeriClckCtrl+0x1b8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d106      	bne.n	8000f70 <GPIO_PeriClckCtrl+0x130>
			GPIOD_PCLK_DI();
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f68:	f023 0308 	bic.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f6e:	e035      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <GPIO_PeriClckCtrl+0x1bc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d106      	bne.n	8000f86 <GPIO_PeriClckCtrl+0x146>
			GPIOE_PCLK_DI();
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f7e:	f023 0310 	bic.w	r3, r3, #16
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f84:	e02a      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	@ (8001000 <GPIO_PeriClckCtrl+0x1c0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <GPIO_PeriClckCtrl+0x15c>
			GPIOF_PCLK_DI();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000f94:	f023 0320 	bic.w	r3, r3, #32
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f9a:	e01f      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <GPIO_PeriClckCtrl+0x1c4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d106      	bne.n	8000fb2 <GPIO_PeriClckCtrl+0x172>
			GPIOG_PCLK_DI();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fb0:	e014      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <GPIO_PeriClckCtrl+0x1c8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d106      	bne.n	8000fc8 <GPIO_PeriClckCtrl+0x188>
			GPIOH_PCLK_DI();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fc6:	e009      	b.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <GPIO_PeriClckCtrl+0x1cc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d105      	bne.n	8000fdc <GPIO_PeriClckCtrl+0x19c>
			GPIOI_PCLK_DI();
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <GPIO_PeriClckCtrl+0x1ac>)
 8000fd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40021400 	.word	0x40021400
 8001004:	40021800 	.word	0x40021800
 8001008:	40021c00 	.word	0x40021c00
 800100c:	40022000 	.word	0x40022000

08001010 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

	GPIO_PeriClckCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff0c 	bl	8000e40 <GPIO_PeriClckCtrl>

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	795b      	ldrb	r3, [r3, #5]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d820      	bhi.n	8001072 <GPIO_Init+0x62>
	{
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing bits
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	791b      	ldrb	r3, [r3, #4]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2103      	movs	r1, #3
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting bits
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e0cb      	b.n	800120a <GPIO_Init+0x1fa>

	}else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d117      	bne.n	80010aa <GPIO_Init+0x9a>
		{

			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800107a:	4b4b      	ldr	r3, [pc, #300]	@ (80011a8 <GPIO_Init+0x198>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7912      	ldrb	r2, [r2, #4]
 8001082:	4611      	mov	r1, r2
 8001084:	2201      	movs	r2, #1
 8001086:	408a      	lsls	r2, r1
 8001088:	4611      	mov	r1, r2
 800108a:	4a47      	ldr	r2, [pc, #284]	@ (80011a8 <GPIO_Init+0x198>)
 800108c:	430b      	orrs	r3, r1
 800108e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001090:	4b45      	ldr	r3, [pc, #276]	@ (80011a8 <GPIO_Init+0x198>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	7912      	ldrb	r2, [r2, #4]
 8001098:	4611      	mov	r1, r2
 800109a:	2201      	movs	r2, #1
 800109c:	408a      	lsls	r2, r1
 800109e:	43d2      	mvns	r2, r2
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a41      	ldr	r2, [pc, #260]	@ (80011a8 <GPIO_Init+0x198>)
 80010a4:	400b      	ands	r3, r1
 80010a6:	6093      	str	r3, [r2, #8]
 80010a8:	e035      	b.n	8001116 <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d117      	bne.n	80010e2 <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	@ (80011a8 <GPIO_Init+0x198>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	7912      	ldrb	r2, [r2, #4]
 80010ba:	4611      	mov	r1, r2
 80010bc:	2201      	movs	r2, #1
 80010be:	408a      	lsls	r2, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a39      	ldr	r2, [pc, #228]	@ (80011a8 <GPIO_Init+0x198>)
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010c8:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <GPIO_Init+0x198>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	7912      	ldrb	r2, [r2, #4]
 80010d0:	4611      	mov	r1, r2
 80010d2:	2201      	movs	r2, #1
 80010d4:	408a      	lsls	r2, r1
 80010d6:	43d2      	mvns	r2, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a33      	ldr	r2, [pc, #204]	@ (80011a8 <GPIO_Init+0x198>)
 80010dc:	400b      	ands	r3, r1
 80010de:	60d3      	str	r3, [r2, #12]
 80010e0:	e019      	b.n	8001116 <GPIO_Init+0x106>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	795b      	ldrb	r3, [r3, #5]
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d115      	bne.n	8001116 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ea:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <GPIO_Init+0x198>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	7912      	ldrb	r2, [r2, #4]
 80010f2:	4611      	mov	r1, r2
 80010f4:	2201      	movs	r2, #1
 80010f6:	408a      	lsls	r2, r1
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <GPIO_Init+0x198>)
 80010fc:	430b      	orrs	r3, r1
 80010fe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <GPIO_Init+0x198>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	7912      	ldrb	r2, [r2, #4]
 8001108:	4611      	mov	r1, r2
 800110a:	2201      	movs	r2, #1
 800110c:	408a      	lsls	r2, r1
 800110e:	4611      	mov	r1, r2
 8001110:	4a25      	ldr	r2, [pc, #148]	@ (80011a8 <GPIO_Init+0x198>)
 8001112:	430b      	orrs	r3, r1
 8001114:	6093      	str	r3, [r2, #8]

		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <GPIO_Init+0x19c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d04e      	beq.n	80011d0 <GPIO_Init+0x1c0>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <GPIO_Init+0x1a0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d032      	beq.n	80011a2 <GPIO_Init+0x192>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <GPIO_Init+0x1a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <GPIO_Init+0x18e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <GPIO_Init+0x1a8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d024      	beq.n	800119a <GPIO_Init+0x18a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <GPIO_Init+0x1ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d01d      	beq.n	8001196 <GPIO_Init+0x186>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <GPIO_Init+0x1b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d016      	beq.n	8001192 <GPIO_Init+0x182>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a16      	ldr	r2, [pc, #88]	@ (80011c4 <GPIO_Init+0x1b4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00f      	beq.n	800118e <GPIO_Init+0x17e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <GPIO_Init+0x1b8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d008      	beq.n	800118a <GPIO_Init+0x17a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <GPIO_Init+0x1bc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <GPIO_Init+0x176>
 8001182:	2308      	movs	r3, #8
 8001184:	e025      	b.n	80011d2 <GPIO_Init+0x1c2>
 8001186:	2300      	movs	r3, #0
 8001188:	e023      	b.n	80011d2 <GPIO_Init+0x1c2>
 800118a:	2307      	movs	r3, #7
 800118c:	e021      	b.n	80011d2 <GPIO_Init+0x1c2>
 800118e:	2306      	movs	r3, #6
 8001190:	e01f      	b.n	80011d2 <GPIO_Init+0x1c2>
 8001192:	2305      	movs	r3, #5
 8001194:	e01d      	b.n	80011d2 <GPIO_Init+0x1c2>
 8001196:	2304      	movs	r3, #4
 8001198:	e01b      	b.n	80011d2 <GPIO_Init+0x1c2>
 800119a:	2303      	movs	r3, #3
 800119c:	e019      	b.n	80011d2 <GPIO_Init+0x1c2>
 800119e:	2302      	movs	r3, #2
 80011a0:	e017      	b.n	80011d2 <GPIO_Init+0x1c2>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e015      	b.n	80011d2 <GPIO_Init+0x1c2>
 80011a6:	bf00      	nop
 80011a8:	40013c00 	.word	0x40013c00
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40022000 	.word	0x40022000
 80011d0:	2300      	movs	r3, #0
 80011d2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001348 <GPIO_Init+0x338>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d8:	4a5b      	ldr	r2, [pc, #364]	@ (8001348 <GPIO_Init+0x338>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80011e0:	7c7a      	ldrb	r2, [r7, #17]
 80011e2:	7cbb      	ldrb	r3, [r7, #18]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fa02 f103 	lsl.w	r1, r2, r3
 80011ea:	4a58      	ldr	r2, [pc, #352]	@ (800134c <GPIO_Init+0x33c>)
 80011ec:	7cfb      	ldrb	r3, [r7, #19]
 80011ee:	3302      	adds	r3, #2
 80011f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80011f4:	4b56      	ldr	r3, [pc, #344]	@ (8001350 <GPIO_Init+0x340>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	7912      	ldrb	r2, [r2, #4]
 80011fc:	4611      	mov	r1, r2
 80011fe:	2201      	movs	r2, #1
 8001200:	408a      	lsls	r2, r1
 8001202:	4611      	mov	r1, r2
 8001204:	4a52      	ldr	r2, [pc, #328]	@ (8001350 <GPIO_Init+0x340>)
 8001206:	430b      	orrs	r3, r1
 8001208:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	4619      	mov	r1, r3
 800122c:	2303      	movs	r3, #3
 800122e:	408b      	lsls	r3, r1
 8001230:	43db      	mvns	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6899      	ldr	r1, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	430a      	orrs	r2, r1
 800124a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]


	//3. configure pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	79db      	ldrb	r3, [r3, #7]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	791b      	ldrb	r3, [r3, #4]
 800126c:	4619      	mov	r1, r3
 800126e:	2303      	movs	r3, #3
 8001270:	408b      	lsls	r3, r1
 8001272:	43db      	mvns	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	400a      	ands	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68d9      	ldr	r1, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	430a      	orrs	r2, r1
 800128c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7a1b      	ldrb	r3, [r3, #8]
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing bits
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	4619      	mov	r1, r3
 80012ae:	2301      	movs	r3, #1
 80012b0:	408b      	lsls	r3, r1
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	400a      	ands	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
	temp = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	795b      	ldrb	r3, [r3, #5]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d131      	bne.n	800133e <GPIO_Init+0x32e>
	{
		//configure alt fun registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	791b      	ldrb	r3, [r3, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	7c3a      	ldrb	r2, [r7, #16]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7c3a      	ldrb	r2, [r7, #16]
 800130c:	4001      	ands	r1, r0
 800130e:	3208      	adds	r2, #8
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	7c3a      	ldrb	r2, [r7, #16]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7a5b      	ldrb	r3, [r3, #9]
 8001324:	461a      	mov	r2, r3
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	7c3a      	ldrb	r2, [r7, #16]
 8001336:	4301      	orrs	r1, r0
 8001338:	3208      	adds	r2, #8
 800133a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40013c00 	.word	0x40013c00

08001354 <GPIO_WriteToOutputPin>:
	return value;
}


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001364:	78bb      	ldrb	r3, [r7, #2]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d109      	bne.n	800137e <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to ODR at the bit filed corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	78fa      	ldrb	r2, [r7, #3]
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f202 	lsl.w	r2, r1, r2
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 800137c:	e009      	b.n	8001392 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	43d2      	mvns	r2, r2
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	615a      	str	r2, [r3, #20]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <I2C_PeriClckCtrl>:

static void I2C_MasterHanldeRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHanldeTXEInterrupt(I2C_Handle_t *pI2CHandle);

void I2C_PeriClckCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d120      	bne.n	80013f4 <I2C_PeriClckCtrl+0x54>
	{
		if(pI2Cx == I2C1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <I2C_PeriClckCtrl+0xa0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d106      	bne.n	80013c8 <I2C_PeriClckCtrl+0x28>
		{
			I2C1_PCLK_EN();
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
		{
			I2C3_PCLK_DI();
		}

	}
}
 80013c6:	e035      	b.n	8001434 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <I2C_PeriClckCtrl+0xa8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d106      	bne.n	80013de <I2C_PeriClckCtrl+0x3e>
			I2C2_PCLK_EN();
 80013d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013dc:	e02a      	b.n	8001434 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	@ (800144c <I2C_PeriClckCtrl+0xac>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d126      	bne.n	8001434 <I2C_PeriClckCtrl+0x94>
			I2C3_PCLK_EN();
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013f2:	e01f      	b.n	8001434 <I2C_PeriClckCtrl+0x94>
		if(pI2Cx == I2C1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <I2C_PeriClckCtrl+0xa0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d106      	bne.n	800140a <I2C_PeriClckCtrl+0x6a>
			I2C1_PCLK_DI();
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 8001402:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001408:	e014      	b.n	8001434 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <I2C_PeriClckCtrl+0xa8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d106      	bne.n	8001420 <I2C_PeriClckCtrl+0x80>
			I2C2_PCLK_DI();
 8001412:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 8001418:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800141e:	e009      	b.n	8001434 <I2C_PeriClckCtrl+0x94>
		else if(pI2Cx == I2C3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <I2C_PeriClckCtrl+0xac>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d105      	bne.n	8001434 <I2C_PeriClckCtrl+0x94>
			I2C3_PCLK_DI();
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <I2C_PeriClckCtrl+0xa4>)
 800142e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40005400 	.word	0x40005400
 8001444:	40023800 	.word	0x40023800
 8001448:	40005800 	.word	0x40005800
 800144c:	40005c00 	.word	0x40005c00

08001450 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800146e:	e005      	b.n	800147c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 0201 	bic.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <I2C_GetFlagStatus>:



uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]

	//enable the clock for i2cx peripheral
	I2C_PeriClckCtrl(pI2CHandle->pI2Cx, ENABLE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff6c 	bl	80013a0 <I2C_PeriClckCtrl>


	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7a5b      	ldrb	r3, [r3, #9]
 80014cc:	029b      	lsls	r3, r3, #10
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80014e0:	f000 fa26 	bl	8001930 <RCC_GetPCLK1Value>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a47      	ldr	r2, [pc, #284]	@ (8001604 <I2C_Init+0x154>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80014fe:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7a1b      	ldrb	r3, [r3, #8]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001516:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a36      	ldr	r2, [pc, #216]	@ (8001608 <I2C_Init+0x158>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d80f      	bhi.n	8001552 <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001532:	f000 f9fd 	bl	8001930 <RCC_GetPCLK1Value>
 8001536:	4602      	mov	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e02c      	b.n	80015ac <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= (1 << 15);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001558:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	039b      	lsls	r3, r3, #14
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7a9b      	ldrb	r3, [r3, #10]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10b      	bne.n	8001586 <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800156e:	f000 f9df 	bl	8001930 <RCC_GetPCLK1Value>
 8001572:	4601      	mov	r1, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001582:	817b      	strh	r3, [r7, #10]
 8001584:	e00c      	b.n	80015a0 <I2C_Init+0xf0>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001586:	f000 f9d3 	bl	8001930 <RCC_GetPCLK1Value>
 800158a:	4601      	mov	r1, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009a      	lsls	r2, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	fbb1 f3f3 	udiv	r3, r1, r3
 800159e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xfff);
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR = tempreg;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a13      	ldr	r2, [pc, #76]	@ (8001608 <I2C_Init+0x158>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d809      	bhi.n	80015d2 <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80015be:	f000 f9b7 	bl	8001930 <RCC_GetPCLK1Value>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <I2C_Init+0x154>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e00d      	b.n	80015ee <I2C_Init+0x13e>

	}else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80015d2:	f000 f9ad 	bl	8001930 <RCC_GetPCLK1Value>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	0a5b      	lsrs	r3, r3, #9
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <I2C_Init+0x15c>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	09db      	lsrs	r3, r3, #7
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3f);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80015f8:	621a      	str	r2, [r3, #32]
	//3. Configure the device address (Applicable when device is slave)

	//4. Enable the Acking

	//5. Configure the rise time for I2C pins
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	431bde83 	.word	0x431bde83
 8001608:	000186a0 	.word	0x000186a0
 800160c:	00044b83 	.word	0x00044b83

08001610 <I2C_MasterSendData>:
		I2C3_REG_RESET();
	}
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t RepeatStart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f901 	bl	800182a <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) );
 8001628:	bf00      	nop
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff29 	bl	8001488 <I2C_GetFlagStatus>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f6      	beq.n	800162a <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f910 	bl	800186a <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm the address phase is completed by checking the ADDR flag in the SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 800164a:	bf00      	nop
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2102      	movs	r1, #2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff18 	bl	8001488 <I2C_GetFlagStatus>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f6      	beq.n	800164c <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	// note: until ADDR is cleared SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle);
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f92f 	bl	80018c2 <I2C_ClearADDRFlag>

	//6. send data until len becomes 0
	while(Len > 0)
 8001664:	e014      	b.n	8001690 <I2C_MasterSendData+0x80>
	{
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) ); // wait until TXE is set
 8001666:	bf00      	nop
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff0a 	bl	8001488 <I2C_GetFlagStatus>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f6      	beq.n	8001668 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3301      	adds	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
		Len--;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3b01      	subs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e7      	bne.n	8001666 <I2C_MasterSendData+0x56>
	}

	//7. When Len becomes 0 wait for TXE=1 and BTF=1 before generating the STOP condition
	// Note: TXE=1 , BTF=1 means that both SR and DRare empty and next transmission should begin
	// when BTF=1 SCL will be stretched
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) );
 8001696:	bf00      	nop
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fef2 	bl	8001488 <I2C_GetFlagStatus>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f6      	beq.n	8001698 <I2C_MasterSendData+0x88>

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) );
 80016aa:	bf00      	nop
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fee8 	bl	8001488 <I2C_GetFlagStatus>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f6      	beq.n	80016ac <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	// NOTE: Generating STOP, automatically clears BTF
	if(RepeatStart == I2C_DISABLE_REPEAT_START)
 80016be:	7e3b      	ldrb	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <I2C_MasterSendData+0xbe>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f8be 	bl	800184a <I2C_GenerateStopCondition>
	}
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t RepeatStart)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f89e 	bl	800182a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) );
 80016ee:	bf00      	nop
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fec6 	bl	8001488 <I2C_GetFlagStatus>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f6      	beq.n	80016f0 <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f8c3 	bl	8001896 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) );
 8001710:	bf00      	nop
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2102      	movs	r1, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff feb5 	bl	8001488 <I2C_GetFlagStatus>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f6      	beq.n	8001712 <I2C_MasterReceiveData+0x3c>

	//procedure to read only 1 byte from slave
	if(Len == 1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d121      	bne.n	800176e <I2C_MasterReceiveData+0x98>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f85e 	bl	80017f2 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f8c3 	bl	80018c2 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) );
 800173c:	bf00      	nop
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2140      	movs	r1, #64	@ 0x40
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe9f 	bl	8001488 <I2C_GetFlagStatus>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f6      	beq.n	800173e <I2C_MasterReceiveData+0x68>

		//generate STOP condition
		if(RepeatStart == I2C_DISABLE_REPEAT_START)
 8001750:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <I2C_MasterReceiveData+0x8c>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f874 	bl	800184a <I2C_GenerateStopCondition>
		}

		//read data into buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	701a      	strb	r2, [r3, #0]

	}

	if(Len > 1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d930      	bls.n	80017d6 <I2C_MasterReceiveData+0x100>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f8a4 	bl	80018c2 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for(uint32_t i = Len; i > 0; i--){
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e027      	b.n	80017d0 <I2C_MasterReceiveData+0xfa>

			//wait until RXNE becomes 1
			while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) );
 8001780:	bf00      	nop
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2140      	movs	r1, #64	@ 0x40
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe7d 	bl	8001488 <I2C_GetFlagStatus>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f6      	beq.n	8001782 <I2C_MasterReceiveData+0xac>

			if(i == 2) //if last 2 bytes are remaining
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d10e      	bne.n	80017b8 <I2C_MasterReceiveData+0xe2>
			{
				//Disable ACKing
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f826 	bl	80017f2 <I2C_ManageAcking>

				//generate STOP condition
				if(RepeatStart == I2C_DISABLE_REPEAT_START)
 80017a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <I2C_MasterReceiveData+0xe2>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f849 	bl	800184a <I2C_GenerateStopCondition>
				}
			}

			//read the data from data register in to buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxbuffer++;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--){
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1d4      	bne.n	8001780 <I2C_MasterReceiveData+0xaa>
	}
}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	7a5b      	ldrb	r3, [r3, #9]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d105      	bne.n	80017ea <I2C_MasterReceiveData+0x114>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2101      	movs	r1, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f804 	bl	80017f2 <I2C_ManageAcking>
	}

}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <I2C_ManageAcking+0x20>
	{
		//enalbe the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001810:	e005      	b.n	800181e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // SlaveAddr is Slave addr + r/nw bit=0
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; // SlaveAddr is Slave addr + r/nw bit=1
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;

	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01f      	beq.n	8001918 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d112      	bne.n	8001906 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11f      	bne.n	8001928 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff7f 	bl	80017f2 <I2C_ManageAcking>

				//clear the ADDR flat (read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag (read SR1, read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001904:	e010      	b.n	8001928 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	60fb      	str	r3, [r7, #12]
}
 8001916:	e007      	b.n	8001928 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	60fb      	str	r3, [r7, #12]
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <RCC_GetPCLK1Value+0x9c>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8001944:	7a7b      	ldrb	r3, [r7, #9]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <RCC_GetPCLK1Value+0xa0>)
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e00b      	b.n	8001968 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8001950:	7a7b      	ldrb	r3, [r7, #9]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001956:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <RCC_GetPCLK1Value+0xa4>)
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e005      	b.n	8001968 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 800195c:	7a7b      	ldrb	r3, [r7, #9]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d102      	bne.n	8001968 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutPutClock();
 8001962:	f000 f83d 	bl	80019e0 <RCC_GetPLLOutPutClock>
 8001966:	60f8      	str	r0, [r7, #12]
	}

	temp = (RCC->CFGR >> 4) & 0xf;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <RCC_GetPCLK1Value+0x9c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001976:	7a3b      	ldrb	r3, [r7, #8]
 8001978:	2b07      	cmp	r3, #7
 800197a:	d802      	bhi.n	8001982 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	72fb      	strb	r3, [r7, #11]
 8001980:	e005      	b.n	800198e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001982:	7a3b      	ldrb	r3, [r7, #8]
 8001984:	3b08      	subs	r3, #8
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <RCC_GetPCLK1Value+0xa8>)
 8001988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800198c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 10) & 0x7;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <RCC_GetPCLK1Value+0x9c>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800199c:	7a3b      	ldrb	r3, [r7, #8]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d802      	bhi.n	80019a8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	72bb      	strb	r3, [r7, #10]
 80019a6:	e004      	b.n	80019b2 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 80019a8:	7a3b      	ldrb	r3, [r7, #8]
 80019aa:	3b04      	subs	r3, #4
 80019ac:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <RCC_GetPCLK1Value+0xac>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	72bb      	strb	r3, [r7, #10]
	}

		pclk1 = (SystemClk / ahbp) / apb1p;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ba:	7abb      	ldrb	r3, [r7, #10]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000010 	.word	0x20000010

080019e0 <RCC_GetPLLOutPutClock>:

	return pclk2;
}

uint32_t RCC_GetPLLOutPutClock()
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	// TODO
}
 80019e4:	bf00      	nop
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <std>:
 80019f0:	2300      	movs	r3, #0
 80019f2:	b510      	push	{r4, lr}
 80019f4:	4604      	mov	r4, r0
 80019f6:	e9c0 3300 	strd	r3, r3, [r0]
 80019fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019fe:	6083      	str	r3, [r0, #8]
 8001a00:	8181      	strh	r1, [r0, #12]
 8001a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8001a04:	81c2      	strh	r2, [r0, #14]
 8001a06:	6183      	str	r3, [r0, #24]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	305c      	adds	r0, #92	@ 0x5c
 8001a0e:	f000 f9e7 	bl	8001de0 <memset>
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <std+0x58>)
 8001a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <std+0x5c>)
 8001a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <std+0x60>)
 8001a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <std+0x64>)
 8001a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <std+0x68>)
 8001a24:	6224      	str	r4, [r4, #32]
 8001a26:	429c      	cmp	r4, r3
 8001a28:	d006      	beq.n	8001a38 <std+0x48>
 8001a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a2e:	4294      	cmp	r4, r2
 8001a30:	d002      	beq.n	8001a38 <std+0x48>
 8001a32:	33d0      	adds	r3, #208	@ 0xd0
 8001a34:	429c      	cmp	r4, r3
 8001a36:	d105      	bne.n	8001a44 <std+0x54>
 8001a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a40:	f000 ba46 	b.w	8001ed0 <__retarget_lock_init_recursive>
 8001a44:	bd10      	pop	{r4, pc}
 8001a46:	bf00      	nop
 8001a48:	08001c31 	.word	0x08001c31
 8001a4c:	08001c53 	.word	0x08001c53
 8001a50:	08001c8b 	.word	0x08001c8b
 8001a54:	08001caf 	.word	0x08001caf
 8001a58:	200000d0 	.word	0x200000d0

08001a5c <stdio_exit_handler>:
 8001a5c:	4a02      	ldr	r2, [pc, #8]	@ (8001a68 <stdio_exit_handler+0xc>)
 8001a5e:	4903      	ldr	r1, [pc, #12]	@ (8001a6c <stdio_exit_handler+0x10>)
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <stdio_exit_handler+0x14>)
 8001a62:	f000 b869 	b.w	8001b38 <_fwalk_sglue>
 8001a66:	bf00      	nop
 8001a68:	20000014 	.word	0x20000014
 8001a6c:	080021d1 	.word	0x080021d1
 8001a70:	20000024 	.word	0x20000024

08001a74 <cleanup_stdio>:
 8001a74:	6841      	ldr	r1, [r0, #4]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <cleanup_stdio+0x34>)
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	b510      	push	{r4, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	d001      	beq.n	8001a84 <cleanup_stdio+0x10>
 8001a80:	f000 fba6 	bl	80021d0 <_fflush_r>
 8001a84:	68a1      	ldr	r1, [r4, #8]
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <cleanup_stdio+0x38>)
 8001a88:	4299      	cmp	r1, r3
 8001a8a:	d002      	beq.n	8001a92 <cleanup_stdio+0x1e>
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 fb9f 	bl	80021d0 <_fflush_r>
 8001a92:	68e1      	ldr	r1, [r4, #12]
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <cleanup_stdio+0x3c>)
 8001a96:	4299      	cmp	r1, r3
 8001a98:	d004      	beq.n	8001aa4 <cleanup_stdio+0x30>
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aa0:	f000 bb96 	b.w	80021d0 <_fflush_r>
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200000d0 	.word	0x200000d0
 8001aac:	20000138 	.word	0x20000138
 8001ab0:	200001a0 	.word	0x200001a0

08001ab4 <global_stdio_init.part.0>:
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <global_stdio_init.part.0+0x30>)
 8001ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8001ae8 <global_stdio_init.part.0+0x34>)
 8001aba:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <global_stdio_init.part.0+0x38>)
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	4620      	mov	r0, r4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	f7ff ff94 	bl	80019f0 <std>
 8001ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001acc:	2201      	movs	r2, #1
 8001ace:	2109      	movs	r1, #9
 8001ad0:	f7ff ff8e 	bl	80019f0 <std>
 8001ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ad8:	2202      	movs	r2, #2
 8001ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ade:	2112      	movs	r1, #18
 8001ae0:	f7ff bf86 	b.w	80019f0 <std>
 8001ae4:	20000208 	.word	0x20000208
 8001ae8:	200000d0 	.word	0x200000d0
 8001aec:	08001a5d 	.word	0x08001a5d

08001af0 <__sfp_lock_acquire>:
 8001af0:	4801      	ldr	r0, [pc, #4]	@ (8001af8 <__sfp_lock_acquire+0x8>)
 8001af2:	f000 b9ee 	b.w	8001ed2 <__retarget_lock_acquire_recursive>
 8001af6:	bf00      	nop
 8001af8:	20000211 	.word	0x20000211

08001afc <__sfp_lock_release>:
 8001afc:	4801      	ldr	r0, [pc, #4]	@ (8001b04 <__sfp_lock_release+0x8>)
 8001afe:	f000 b9e9 	b.w	8001ed4 <__retarget_lock_release_recursive>
 8001b02:	bf00      	nop
 8001b04:	20000211 	.word	0x20000211

08001b08 <__sinit>:
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	f7ff fff0 	bl	8001af0 <__sfp_lock_acquire>
 8001b10:	6a23      	ldr	r3, [r4, #32]
 8001b12:	b11b      	cbz	r3, 8001b1c <__sinit+0x14>
 8001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b18:	f7ff bff0 	b.w	8001afc <__sfp_lock_release>
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <__sinit+0x28>)
 8001b1e:	6223      	str	r3, [r4, #32]
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__sinit+0x2c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f5      	bne.n	8001b14 <__sinit+0xc>
 8001b28:	f7ff ffc4 	bl	8001ab4 <global_stdio_init.part.0>
 8001b2c:	e7f2      	b.n	8001b14 <__sinit+0xc>
 8001b2e:	bf00      	nop
 8001b30:	08001a75 	.word	0x08001a75
 8001b34:	20000208 	.word	0x20000208

08001b38 <_fwalk_sglue>:
 8001b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b3c:	4607      	mov	r7, r0
 8001b3e:	4688      	mov	r8, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	2600      	movs	r6, #0
 8001b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b48:	f1b9 0901 	subs.w	r9, r9, #1
 8001b4c:	d505      	bpl.n	8001b5a <_fwalk_sglue+0x22>
 8001b4e:	6824      	ldr	r4, [r4, #0]
 8001b50:	2c00      	cmp	r4, #0
 8001b52:	d1f7      	bne.n	8001b44 <_fwalk_sglue+0xc>
 8001b54:	4630      	mov	r0, r6
 8001b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d907      	bls.n	8001b70 <_fwalk_sglue+0x38>
 8001b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b64:	3301      	adds	r3, #1
 8001b66:	d003      	beq.n	8001b70 <_fwalk_sglue+0x38>
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	47c0      	blx	r8
 8001b6e:	4306      	orrs	r6, r0
 8001b70:	3568      	adds	r5, #104	@ 0x68
 8001b72:	e7e9      	b.n	8001b48 <_fwalk_sglue+0x10>

08001b74 <_puts_r>:
 8001b74:	6a03      	ldr	r3, [r0, #32]
 8001b76:	b570      	push	{r4, r5, r6, lr}
 8001b78:	6884      	ldr	r4, [r0, #8]
 8001b7a:	4605      	mov	r5, r0
 8001b7c:	460e      	mov	r6, r1
 8001b7e:	b90b      	cbnz	r3, 8001b84 <_puts_r+0x10>
 8001b80:	f7ff ffc2 	bl	8001b08 <__sinit>
 8001b84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b86:	07db      	lsls	r3, r3, #31
 8001b88:	d405      	bmi.n	8001b96 <_puts_r+0x22>
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	0598      	lsls	r0, r3, #22
 8001b8e:	d402      	bmi.n	8001b96 <_puts_r+0x22>
 8001b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b92:	f000 f99e 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 8001b96:	89a3      	ldrh	r3, [r4, #12]
 8001b98:	0719      	lsls	r1, r3, #28
 8001b9a:	d502      	bpl.n	8001ba2 <_puts_r+0x2e>
 8001b9c:	6923      	ldr	r3, [r4, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d135      	bne.n	8001c0e <_puts_r+0x9a>
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f000 f8c5 	bl	8001d34 <__swsetup_r>
 8001baa:	b380      	cbz	r0, 8001c0e <_puts_r+0x9a>
 8001bac:	f04f 35ff 	mov.w	r5, #4294967295
 8001bb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bb2:	07da      	lsls	r2, r3, #31
 8001bb4:	d405      	bmi.n	8001bc2 <_puts_r+0x4e>
 8001bb6:	89a3      	ldrh	r3, [r4, #12]
 8001bb8:	059b      	lsls	r3, r3, #22
 8001bba:	d402      	bmi.n	8001bc2 <_puts_r+0x4e>
 8001bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bbe:	f000 f989 	bl	8001ed4 <__retarget_lock_release_recursive>
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da04      	bge.n	8001bd4 <_puts_r+0x60>
 8001bca:	69a2      	ldr	r2, [r4, #24]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dc17      	bgt.n	8001c00 <_puts_r+0x8c>
 8001bd0:	290a      	cmp	r1, #10
 8001bd2:	d015      	beq.n	8001c00 <_puts_r+0x8c>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	6022      	str	r2, [r4, #0]
 8001bda:	7019      	strb	r1, [r3, #0]
 8001bdc:	68a3      	ldr	r3, [r4, #8]
 8001bde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60a3      	str	r3, [r4, #8]
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d1ed      	bne.n	8001bc6 <_puts_r+0x52>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da11      	bge.n	8001c12 <_puts_r+0x9e>
 8001bee:	4622      	mov	r2, r4
 8001bf0:	210a      	movs	r1, #10
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 f85f 	bl	8001cb6 <__swbuf_r>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d0d7      	beq.n	8001bac <_puts_r+0x38>
 8001bfc:	250a      	movs	r5, #10
 8001bfe:	e7d7      	b.n	8001bb0 <_puts_r+0x3c>
 8001c00:	4622      	mov	r2, r4
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 f857 	bl	8001cb6 <__swbuf_r>
 8001c08:	3001      	adds	r0, #1
 8001c0a:	d1e7      	bne.n	8001bdc <_puts_r+0x68>
 8001c0c:	e7ce      	b.n	8001bac <_puts_r+0x38>
 8001c0e:	3e01      	subs	r6, #1
 8001c10:	e7e4      	b.n	8001bdc <_puts_r+0x68>
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	6022      	str	r2, [r4, #0]
 8001c18:	220a      	movs	r2, #10
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e7ee      	b.n	8001bfc <_puts_r+0x88>
	...

08001c20 <puts>:
 8001c20:	4b02      	ldr	r3, [pc, #8]	@ (8001c2c <puts+0xc>)
 8001c22:	4601      	mov	r1, r0
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	f7ff bfa5 	b.w	8001b74 <_puts_r>
 8001c2a:	bf00      	nop
 8001c2c:	20000020 	.word	0x20000020

08001c30 <__sread>:
 8001c30:	b510      	push	{r4, lr}
 8001c32:	460c      	mov	r4, r1
 8001c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c38:	f000 f8fc 	bl	8001e34 <_read_r>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	bfab      	itete	ge
 8001c40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c42:	89a3      	ldrhlt	r3, [r4, #12]
 8001c44:	181b      	addge	r3, r3, r0
 8001c46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c4a:	bfac      	ite	ge
 8001c4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c4e:	81a3      	strhlt	r3, [r4, #12]
 8001c50:	bd10      	pop	{r4, pc}

08001c52 <__swrite>:
 8001c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c56:	461f      	mov	r7, r3
 8001c58:	898b      	ldrh	r3, [r1, #12]
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	4616      	mov	r6, r2
 8001c62:	d505      	bpl.n	8001c70 <__swrite+0x1e>
 8001c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f000 f8d0 	bl	8001e10 <_lseek_r>
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c7a:	81a3      	strh	r3, [r4, #12]
 8001c7c:	4632      	mov	r2, r6
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4628      	mov	r0, r5
 8001c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c86:	f000 b8e7 	b.w	8001e58 <_write_r>

08001c8a <__sseek>:
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c92:	f000 f8bd 	bl	8001e10 <_lseek_r>
 8001c96:	1c43      	adds	r3, r0, #1
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	bf15      	itete	ne
 8001c9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001ca2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001ca6:	81a3      	strheq	r3, [r4, #12]
 8001ca8:	bf18      	it	ne
 8001caa:	81a3      	strhne	r3, [r4, #12]
 8001cac:	bd10      	pop	{r4, pc}

08001cae <__sclose>:
 8001cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb2:	f000 b89d 	b.w	8001df0 <_close_r>

08001cb6 <__swbuf_r>:
 8001cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb8:	460e      	mov	r6, r1
 8001cba:	4614      	mov	r4, r2
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	b118      	cbz	r0, 8001cc8 <__swbuf_r+0x12>
 8001cc0:	6a03      	ldr	r3, [r0, #32]
 8001cc2:	b90b      	cbnz	r3, 8001cc8 <__swbuf_r+0x12>
 8001cc4:	f7ff ff20 	bl	8001b08 <__sinit>
 8001cc8:	69a3      	ldr	r3, [r4, #24]
 8001cca:	60a3      	str	r3, [r4, #8]
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	071a      	lsls	r2, r3, #28
 8001cd0:	d501      	bpl.n	8001cd6 <__swbuf_r+0x20>
 8001cd2:	6923      	ldr	r3, [r4, #16]
 8001cd4:	b943      	cbnz	r3, 8001ce8 <__swbuf_r+0x32>
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f000 f82b 	bl	8001d34 <__swsetup_r>
 8001cde:	b118      	cbz	r0, 8001ce8 <__swbuf_r+0x32>
 8001ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	6922      	ldr	r2, [r4, #16]
 8001cec:	1a98      	subs	r0, r3, r2
 8001cee:	6963      	ldr	r3, [r4, #20]
 8001cf0:	b2f6      	uxtb	r6, r6
 8001cf2:	4283      	cmp	r3, r0
 8001cf4:	4637      	mov	r7, r6
 8001cf6:	dc05      	bgt.n	8001d04 <__swbuf_r+0x4e>
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 fa68 	bl	80021d0 <_fflush_r>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d1ed      	bne.n	8001ce0 <__swbuf_r+0x2a>
 8001d04:	68a3      	ldr	r3, [r4, #8]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60a3      	str	r3, [r4, #8]
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	6022      	str	r2, [r4, #0]
 8001d10:	701e      	strb	r6, [r3, #0]
 8001d12:	6962      	ldr	r2, [r4, #20]
 8001d14:	1c43      	adds	r3, r0, #1
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d004      	beq.n	8001d24 <__swbuf_r+0x6e>
 8001d1a:	89a3      	ldrh	r3, [r4, #12]
 8001d1c:	07db      	lsls	r3, r3, #31
 8001d1e:	d5e1      	bpl.n	8001ce4 <__swbuf_r+0x2e>
 8001d20:	2e0a      	cmp	r6, #10
 8001d22:	d1df      	bne.n	8001ce4 <__swbuf_r+0x2e>
 8001d24:	4621      	mov	r1, r4
 8001d26:	4628      	mov	r0, r5
 8001d28:	f000 fa52 	bl	80021d0 <_fflush_r>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d0d9      	beq.n	8001ce4 <__swbuf_r+0x2e>
 8001d30:	e7d6      	b.n	8001ce0 <__swbuf_r+0x2a>
	...

08001d34 <__swsetup_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <__swsetup_r+0xa8>)
 8001d38:	4605      	mov	r5, r0
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	b118      	cbz	r0, 8001d48 <__swsetup_r+0x14>
 8001d40:	6a03      	ldr	r3, [r0, #32]
 8001d42:	b90b      	cbnz	r3, 8001d48 <__swsetup_r+0x14>
 8001d44:	f7ff fee0 	bl	8001b08 <__sinit>
 8001d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d4c:	0719      	lsls	r1, r3, #28
 8001d4e:	d422      	bmi.n	8001d96 <__swsetup_r+0x62>
 8001d50:	06da      	lsls	r2, r3, #27
 8001d52:	d407      	bmi.n	8001d64 <__swsetup_r+0x30>
 8001d54:	2209      	movs	r2, #9
 8001d56:	602a      	str	r2, [r5, #0]
 8001d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5c:	81a3      	strh	r3, [r4, #12]
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d62:	e033      	b.n	8001dcc <__swsetup_r+0x98>
 8001d64:	0758      	lsls	r0, r3, #29
 8001d66:	d512      	bpl.n	8001d8e <__swsetup_r+0x5a>
 8001d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d6a:	b141      	cbz	r1, 8001d7e <__swsetup_r+0x4a>
 8001d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d70:	4299      	cmp	r1, r3
 8001d72:	d002      	beq.n	8001d7a <__swsetup_r+0x46>
 8001d74:	4628      	mov	r0, r5
 8001d76:	f000 f8af 	bl	8001ed8 <_free_r>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d7e:	89a3      	ldrh	r3, [r4, #12]
 8001d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d84:	81a3      	strh	r3, [r4, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	6063      	str	r3, [r4, #4]
 8001d8a:	6923      	ldr	r3, [r4, #16]
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	b94b      	cbnz	r3, 8001dae <__swsetup_r+0x7a>
 8001d9a:	89a3      	ldrh	r3, [r4, #12]
 8001d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da4:	d003      	beq.n	8001dae <__swsetup_r+0x7a>
 8001da6:	4621      	mov	r1, r4
 8001da8:	4628      	mov	r0, r5
 8001daa:	f000 fa5f 	bl	800226c <__smakebuf_r>
 8001dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db2:	f013 0201 	ands.w	r2, r3, #1
 8001db6:	d00a      	beq.n	8001dce <__swsetup_r+0x9a>
 8001db8:	2200      	movs	r2, #0
 8001dba:	60a2      	str	r2, [r4, #8]
 8001dbc:	6962      	ldr	r2, [r4, #20]
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	61a2      	str	r2, [r4, #24]
 8001dc2:	6922      	ldr	r2, [r4, #16]
 8001dc4:	b942      	cbnz	r2, 8001dd8 <__swsetup_r+0xa4>
 8001dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001dca:	d1c5      	bne.n	8001d58 <__swsetup_r+0x24>
 8001dcc:	bd38      	pop	{r3, r4, r5, pc}
 8001dce:	0799      	lsls	r1, r3, #30
 8001dd0:	bf58      	it	pl
 8001dd2:	6962      	ldrpl	r2, [r4, #20]
 8001dd4:	60a2      	str	r2, [r4, #8]
 8001dd6:	e7f4      	b.n	8001dc2 <__swsetup_r+0x8e>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e7f7      	b.n	8001dcc <__swsetup_r+0x98>
 8001ddc:	20000020 	.word	0x20000020

08001de0 <memset>:
 8001de0:	4402      	add	r2, r0
 8001de2:	4603      	mov	r3, r0
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d100      	bne.n	8001dea <memset+0xa>
 8001de8:	4770      	bx	lr
 8001dea:	f803 1b01 	strb.w	r1, [r3], #1
 8001dee:	e7f9      	b.n	8001de4 <memset+0x4>

08001df0 <_close_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4d06      	ldr	r5, [pc, #24]	@ (8001e0c <_close_r+0x1c>)
 8001df4:	2300      	movs	r3, #0
 8001df6:	4604      	mov	r4, r0
 8001df8:	4608      	mov	r0, r1
 8001dfa:	602b      	str	r3, [r5, #0]
 8001dfc:	f7fe ff8b 	bl	8000d16 <_close>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d102      	bne.n	8001e0a <_close_r+0x1a>
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	b103      	cbz	r3, 8001e0a <_close_r+0x1a>
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	2000020c 	.word	0x2000020c

08001e10 <_lseek_r>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4d07      	ldr	r5, [pc, #28]	@ (8001e30 <_lseek_r+0x20>)
 8001e14:	4604      	mov	r4, r0
 8001e16:	4608      	mov	r0, r1
 8001e18:	4611      	mov	r1, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	602a      	str	r2, [r5, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7fe ffa0 	bl	8000d64 <_lseek>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d102      	bne.n	8001e2e <_lseek_r+0x1e>
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	b103      	cbz	r3, 8001e2e <_lseek_r+0x1e>
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	2000020c 	.word	0x2000020c

08001e34 <_read_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4d07      	ldr	r5, [pc, #28]	@ (8001e54 <_read_r+0x20>)
 8001e38:	4604      	mov	r4, r0
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	602a      	str	r2, [r5, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f7fe ff2e 	bl	8000ca4 <_read>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d102      	bne.n	8001e52 <_read_r+0x1e>
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	b103      	cbz	r3, 8001e52 <_read_r+0x1e>
 8001e50:	6023      	str	r3, [r4, #0]
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
 8001e54:	2000020c 	.word	0x2000020c

08001e58 <_write_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4d07      	ldr	r5, [pc, #28]	@ (8001e78 <_write_r+0x20>)
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	4608      	mov	r0, r1
 8001e60:	4611      	mov	r1, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	602a      	str	r2, [r5, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f7fe ff39 	bl	8000cde <_write>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_write_r+0x1e>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_write_r+0x1e>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	2000020c 	.word	0x2000020c

08001e7c <__errno>:
 8001e7c:	4b01      	ldr	r3, [pc, #4]	@ (8001e84 <__errno+0x8>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000020 	.word	0x20000020

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8001ec0 <__libc_init_array+0x38>)
 8001e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8001ec4 <__libc_init_array+0x3c>)
 8001e8e:	1b64      	subs	r4, r4, r5
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	2600      	movs	r6, #0
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	4d0b      	ldr	r5, [pc, #44]	@ (8001ec8 <__libc_init_array+0x40>)
 8001e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8001ecc <__libc_init_array+0x44>)
 8001e9c:	f000 fa54 	bl	8002348 <_init>
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	080023d8 	.word	0x080023d8
 8001ec4:	080023d8 	.word	0x080023d8
 8001ec8:	080023d8 	.word	0x080023d8
 8001ecc:	080023dc 	.word	0x080023dc

08001ed0 <__retarget_lock_init_recursive>:
 8001ed0:	4770      	bx	lr

08001ed2 <__retarget_lock_acquire_recursive>:
 8001ed2:	4770      	bx	lr

08001ed4 <__retarget_lock_release_recursive>:
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_free_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4605      	mov	r5, r0
 8001edc:	2900      	cmp	r1, #0
 8001ede:	d041      	beq.n	8001f64 <_free_r+0x8c>
 8001ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee4:	1f0c      	subs	r4, r1, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bfb8      	it	lt
 8001eea:	18e4      	addlt	r4, r4, r3
 8001eec:	f000 f8e0 	bl	80020b0 <__malloc_lock>
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <_free_r+0x90>)
 8001ef2:	6813      	ldr	r3, [r2, #0]
 8001ef4:	b933      	cbnz	r3, 8001f04 <_free_r+0x2c>
 8001ef6:	6063      	str	r3, [r4, #4]
 8001ef8:	6014      	str	r4, [r2, #0]
 8001efa:	4628      	mov	r0, r5
 8001efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f00:	f000 b8dc 	b.w	80020bc <__malloc_unlock>
 8001f04:	42a3      	cmp	r3, r4
 8001f06:	d908      	bls.n	8001f1a <_free_r+0x42>
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	1821      	adds	r1, r4, r0
 8001f0c:	428b      	cmp	r3, r1
 8001f0e:	bf01      	itttt	eq
 8001f10:	6819      	ldreq	r1, [r3, #0]
 8001f12:	685b      	ldreq	r3, [r3, #4]
 8001f14:	1809      	addeq	r1, r1, r0
 8001f16:	6021      	streq	r1, [r4, #0]
 8001f18:	e7ed      	b.n	8001ef6 <_free_r+0x1e>
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	b10b      	cbz	r3, 8001f24 <_free_r+0x4c>
 8001f20:	42a3      	cmp	r3, r4
 8001f22:	d9fa      	bls.n	8001f1a <_free_r+0x42>
 8001f24:	6811      	ldr	r1, [r2, #0]
 8001f26:	1850      	adds	r0, r2, r1
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	d10b      	bne.n	8001f44 <_free_r+0x6c>
 8001f2c:	6820      	ldr	r0, [r4, #0]
 8001f2e:	4401      	add	r1, r0
 8001f30:	1850      	adds	r0, r2, r1
 8001f32:	4283      	cmp	r3, r0
 8001f34:	6011      	str	r1, [r2, #0]
 8001f36:	d1e0      	bne.n	8001efa <_free_r+0x22>
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	6053      	str	r3, [r2, #4]
 8001f3e:	4408      	add	r0, r1
 8001f40:	6010      	str	r0, [r2, #0]
 8001f42:	e7da      	b.n	8001efa <_free_r+0x22>
 8001f44:	d902      	bls.n	8001f4c <_free_r+0x74>
 8001f46:	230c      	movs	r3, #12
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	e7d6      	b.n	8001efa <_free_r+0x22>
 8001f4c:	6820      	ldr	r0, [r4, #0]
 8001f4e:	1821      	adds	r1, r4, r0
 8001f50:	428b      	cmp	r3, r1
 8001f52:	bf04      	itt	eq
 8001f54:	6819      	ldreq	r1, [r3, #0]
 8001f56:	685b      	ldreq	r3, [r3, #4]
 8001f58:	6063      	str	r3, [r4, #4]
 8001f5a:	bf04      	itt	eq
 8001f5c:	1809      	addeq	r1, r1, r0
 8001f5e:	6021      	streq	r1, [r4, #0]
 8001f60:	6054      	str	r4, [r2, #4]
 8001f62:	e7ca      	b.n	8001efa <_free_r+0x22>
 8001f64:	bd38      	pop	{r3, r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	20000218 	.word	0x20000218

08001f6c <sbrk_aligned>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8001fac <sbrk_aligned+0x40>)
 8001f70:	460c      	mov	r4, r1
 8001f72:	6831      	ldr	r1, [r6, #0]
 8001f74:	4605      	mov	r5, r0
 8001f76:	b911      	cbnz	r1, 8001f7e <sbrk_aligned+0x12>
 8001f78:	f000 f9d6 	bl	8002328 <_sbrk_r>
 8001f7c:	6030      	str	r0, [r6, #0]
 8001f7e:	4621      	mov	r1, r4
 8001f80:	4628      	mov	r0, r5
 8001f82:	f000 f9d1 	bl	8002328 <_sbrk_r>
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	d103      	bne.n	8001f92 <sbrk_aligned+0x26>
 8001f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8001f8e:	4620      	mov	r0, r4
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
 8001f92:	1cc4      	adds	r4, r0, #3
 8001f94:	f024 0403 	bic.w	r4, r4, #3
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	d0f8      	beq.n	8001f8e <sbrk_aligned+0x22>
 8001f9c:	1a21      	subs	r1, r4, r0
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 f9c2 	bl	8002328 <_sbrk_r>
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d1f2      	bne.n	8001f8e <sbrk_aligned+0x22>
 8001fa8:	e7ef      	b.n	8001f8a <sbrk_aligned+0x1e>
 8001faa:	bf00      	nop
 8001fac:	20000214 	.word	0x20000214

08001fb0 <_malloc_r>:
 8001fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fb4:	1ccd      	adds	r5, r1, #3
 8001fb6:	f025 0503 	bic.w	r5, r5, #3
 8001fba:	3508      	adds	r5, #8
 8001fbc:	2d0c      	cmp	r5, #12
 8001fbe:	bf38      	it	cc
 8001fc0:	250c      	movcc	r5, #12
 8001fc2:	2d00      	cmp	r5, #0
 8001fc4:	4606      	mov	r6, r0
 8001fc6:	db01      	blt.n	8001fcc <_malloc_r+0x1c>
 8001fc8:	42a9      	cmp	r1, r5
 8001fca:	d904      	bls.n	8001fd6 <_malloc_r+0x26>
 8001fcc:	230c      	movs	r3, #12
 8001fce:	6033      	str	r3, [r6, #0]
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020ac <_malloc_r+0xfc>
 8001fda:	f000 f869 	bl	80020b0 <__malloc_lock>
 8001fde:	f8d8 3000 	ldr.w	r3, [r8]
 8001fe2:	461c      	mov	r4, r3
 8001fe4:	bb44      	cbnz	r4, 8002038 <_malloc_r+0x88>
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f7ff ffbf 	bl	8001f6c <sbrk_aligned>
 8001fee:	1c43      	adds	r3, r0, #1
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	d158      	bne.n	80020a6 <_malloc_r+0xf6>
 8001ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8001ff8:	4627      	mov	r7, r4
 8001ffa:	2f00      	cmp	r7, #0
 8001ffc:	d143      	bne.n	8002086 <_malloc_r+0xd6>
 8001ffe:	2c00      	cmp	r4, #0
 8002000:	d04b      	beq.n	800209a <_malloc_r+0xea>
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	4639      	mov	r1, r7
 8002006:	4630      	mov	r0, r6
 8002008:	eb04 0903 	add.w	r9, r4, r3
 800200c:	f000 f98c 	bl	8002328 <_sbrk_r>
 8002010:	4581      	cmp	r9, r0
 8002012:	d142      	bne.n	800209a <_malloc_r+0xea>
 8002014:	6821      	ldr	r1, [r4, #0]
 8002016:	1a6d      	subs	r5, r5, r1
 8002018:	4629      	mov	r1, r5
 800201a:	4630      	mov	r0, r6
 800201c:	f7ff ffa6 	bl	8001f6c <sbrk_aligned>
 8002020:	3001      	adds	r0, #1
 8002022:	d03a      	beq.n	800209a <_malloc_r+0xea>
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	442b      	add	r3, r5
 8002028:	6023      	str	r3, [r4, #0]
 800202a:	f8d8 3000 	ldr.w	r3, [r8]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	bb62      	cbnz	r2, 800208c <_malloc_r+0xdc>
 8002032:	f8c8 7000 	str.w	r7, [r8]
 8002036:	e00f      	b.n	8002058 <_malloc_r+0xa8>
 8002038:	6822      	ldr	r2, [r4, #0]
 800203a:	1b52      	subs	r2, r2, r5
 800203c:	d420      	bmi.n	8002080 <_malloc_r+0xd0>
 800203e:	2a0b      	cmp	r2, #11
 8002040:	d917      	bls.n	8002072 <_malloc_r+0xc2>
 8002042:	1961      	adds	r1, r4, r5
 8002044:	42a3      	cmp	r3, r4
 8002046:	6025      	str	r5, [r4, #0]
 8002048:	bf18      	it	ne
 800204a:	6059      	strne	r1, [r3, #4]
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	bf08      	it	eq
 8002050:	f8c8 1000 	streq.w	r1, [r8]
 8002054:	5162      	str	r2, [r4, r5]
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	4630      	mov	r0, r6
 800205a:	f000 f82f 	bl	80020bc <__malloc_unlock>
 800205e:	f104 000b 	add.w	r0, r4, #11
 8002062:	1d23      	adds	r3, r4, #4
 8002064:	f020 0007 	bic.w	r0, r0, #7
 8002068:	1ac2      	subs	r2, r0, r3
 800206a:	bf1c      	itt	ne
 800206c:	1a1b      	subne	r3, r3, r0
 800206e:	50a3      	strne	r3, [r4, r2]
 8002070:	e7af      	b.n	8001fd2 <_malloc_r+0x22>
 8002072:	6862      	ldr	r2, [r4, #4]
 8002074:	42a3      	cmp	r3, r4
 8002076:	bf0c      	ite	eq
 8002078:	f8c8 2000 	streq.w	r2, [r8]
 800207c:	605a      	strne	r2, [r3, #4]
 800207e:	e7eb      	b.n	8002058 <_malloc_r+0xa8>
 8002080:	4623      	mov	r3, r4
 8002082:	6864      	ldr	r4, [r4, #4]
 8002084:	e7ae      	b.n	8001fe4 <_malloc_r+0x34>
 8002086:	463c      	mov	r4, r7
 8002088:	687f      	ldr	r7, [r7, #4]
 800208a:	e7b6      	b.n	8001ffa <_malloc_r+0x4a>
 800208c:	461a      	mov	r2, r3
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	42a3      	cmp	r3, r4
 8002092:	d1fb      	bne.n	800208c <_malloc_r+0xdc>
 8002094:	2300      	movs	r3, #0
 8002096:	6053      	str	r3, [r2, #4]
 8002098:	e7de      	b.n	8002058 <_malloc_r+0xa8>
 800209a:	230c      	movs	r3, #12
 800209c:	6033      	str	r3, [r6, #0]
 800209e:	4630      	mov	r0, r6
 80020a0:	f000 f80c 	bl	80020bc <__malloc_unlock>
 80020a4:	e794      	b.n	8001fd0 <_malloc_r+0x20>
 80020a6:	6005      	str	r5, [r0, #0]
 80020a8:	e7d6      	b.n	8002058 <_malloc_r+0xa8>
 80020aa:	bf00      	nop
 80020ac:	20000218 	.word	0x20000218

080020b0 <__malloc_lock>:
 80020b0:	4801      	ldr	r0, [pc, #4]	@ (80020b8 <__malloc_lock+0x8>)
 80020b2:	f7ff bf0e 	b.w	8001ed2 <__retarget_lock_acquire_recursive>
 80020b6:	bf00      	nop
 80020b8:	20000210 	.word	0x20000210

080020bc <__malloc_unlock>:
 80020bc:	4801      	ldr	r0, [pc, #4]	@ (80020c4 <__malloc_unlock+0x8>)
 80020be:	f7ff bf09 	b.w	8001ed4 <__retarget_lock_release_recursive>
 80020c2:	bf00      	nop
 80020c4:	20000210 	.word	0x20000210

080020c8 <__sflush_r>:
 80020c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80020cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d0:	0716      	lsls	r6, r2, #28
 80020d2:	4605      	mov	r5, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	d454      	bmi.n	8002182 <__sflush_r+0xba>
 80020d8:	684b      	ldr	r3, [r1, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	dc02      	bgt.n	80020e4 <__sflush_r+0x1c>
 80020de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	dd48      	ble.n	8002176 <__sflush_r+0xae>
 80020e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	d045      	beq.n	8002176 <__sflush_r+0xae>
 80020ea:	2300      	movs	r3, #0
 80020ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80020f0:	682f      	ldr	r7, [r5, #0]
 80020f2:	6a21      	ldr	r1, [r4, #32]
 80020f4:	602b      	str	r3, [r5, #0]
 80020f6:	d030      	beq.n	800215a <__sflush_r+0x92>
 80020f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	0759      	lsls	r1, r3, #29
 80020fe:	d505      	bpl.n	800210c <__sflush_r+0x44>
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	1ad2      	subs	r2, r2, r3
 8002104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002106:	b10b      	cbz	r3, 800210c <__sflush_r+0x44>
 8002108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002110:	6a21      	ldr	r1, [r4, #32]
 8002112:	4628      	mov	r0, r5
 8002114:	47b0      	blx	r6
 8002116:	1c43      	adds	r3, r0, #1
 8002118:	89a3      	ldrh	r3, [r4, #12]
 800211a:	d106      	bne.n	800212a <__sflush_r+0x62>
 800211c:	6829      	ldr	r1, [r5, #0]
 800211e:	291d      	cmp	r1, #29
 8002120:	d82b      	bhi.n	800217a <__sflush_r+0xb2>
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <__sflush_r+0x104>)
 8002124:	410a      	asrs	r2, r1
 8002126:	07d6      	lsls	r6, r2, #31
 8002128:	d427      	bmi.n	800217a <__sflush_r+0xb2>
 800212a:	2200      	movs	r2, #0
 800212c:	6062      	str	r2, [r4, #4]
 800212e:	04d9      	lsls	r1, r3, #19
 8002130:	6922      	ldr	r2, [r4, #16]
 8002132:	6022      	str	r2, [r4, #0]
 8002134:	d504      	bpl.n	8002140 <__sflush_r+0x78>
 8002136:	1c42      	adds	r2, r0, #1
 8002138:	d101      	bne.n	800213e <__sflush_r+0x76>
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	b903      	cbnz	r3, 8002140 <__sflush_r+0x78>
 800213e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002142:	602f      	str	r7, [r5, #0]
 8002144:	b1b9      	cbz	r1, 8002176 <__sflush_r+0xae>
 8002146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800214a:	4299      	cmp	r1, r3
 800214c:	d002      	beq.n	8002154 <__sflush_r+0x8c>
 800214e:	4628      	mov	r0, r5
 8002150:	f7ff fec2 	bl	8001ed8 <_free_r>
 8002154:	2300      	movs	r3, #0
 8002156:	6363      	str	r3, [r4, #52]	@ 0x34
 8002158:	e00d      	b.n	8002176 <__sflush_r+0xae>
 800215a:	2301      	movs	r3, #1
 800215c:	4628      	mov	r0, r5
 800215e:	47b0      	blx	r6
 8002160:	4602      	mov	r2, r0
 8002162:	1c50      	adds	r0, r2, #1
 8002164:	d1c9      	bne.n	80020fa <__sflush_r+0x32>
 8002166:	682b      	ldr	r3, [r5, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0c6      	beq.n	80020fa <__sflush_r+0x32>
 800216c:	2b1d      	cmp	r3, #29
 800216e:	d001      	beq.n	8002174 <__sflush_r+0xac>
 8002170:	2b16      	cmp	r3, #22
 8002172:	d11e      	bne.n	80021b2 <__sflush_r+0xea>
 8002174:	602f      	str	r7, [r5, #0]
 8002176:	2000      	movs	r0, #0
 8002178:	e022      	b.n	80021c0 <__sflush_r+0xf8>
 800217a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800217e:	b21b      	sxth	r3, r3
 8002180:	e01b      	b.n	80021ba <__sflush_r+0xf2>
 8002182:	690f      	ldr	r7, [r1, #16]
 8002184:	2f00      	cmp	r7, #0
 8002186:	d0f6      	beq.n	8002176 <__sflush_r+0xae>
 8002188:	0793      	lsls	r3, r2, #30
 800218a:	680e      	ldr	r6, [r1, #0]
 800218c:	bf08      	it	eq
 800218e:	694b      	ldreq	r3, [r1, #20]
 8002190:	600f      	str	r7, [r1, #0]
 8002192:	bf18      	it	ne
 8002194:	2300      	movne	r3, #0
 8002196:	eba6 0807 	sub.w	r8, r6, r7
 800219a:	608b      	str	r3, [r1, #8]
 800219c:	f1b8 0f00 	cmp.w	r8, #0
 80021a0:	dde9      	ble.n	8002176 <__sflush_r+0xae>
 80021a2:	6a21      	ldr	r1, [r4, #32]
 80021a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80021a6:	4643      	mov	r3, r8
 80021a8:	463a      	mov	r2, r7
 80021aa:	4628      	mov	r0, r5
 80021ac:	47b0      	blx	r6
 80021ae:	2800      	cmp	r0, #0
 80021b0:	dc08      	bgt.n	80021c4 <__sflush_r+0xfc>
 80021b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ba:	81a3      	strh	r3, [r4, #12]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c4:	4407      	add	r7, r0
 80021c6:	eba8 0800 	sub.w	r8, r8, r0
 80021ca:	e7e7      	b.n	800219c <__sflush_r+0xd4>
 80021cc:	dfbffffe 	.word	0xdfbffffe

080021d0 <_fflush_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	690b      	ldr	r3, [r1, #16]
 80021d4:	4605      	mov	r5, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	b913      	cbnz	r3, 80021e0 <_fflush_r+0x10>
 80021da:	2500      	movs	r5, #0
 80021dc:	4628      	mov	r0, r5
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	b118      	cbz	r0, 80021ea <_fflush_r+0x1a>
 80021e2:	6a03      	ldr	r3, [r0, #32]
 80021e4:	b90b      	cbnz	r3, 80021ea <_fflush_r+0x1a>
 80021e6:	f7ff fc8f 	bl	8001b08 <__sinit>
 80021ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f3      	beq.n	80021da <_fflush_r+0xa>
 80021f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021f4:	07d0      	lsls	r0, r2, #31
 80021f6:	d404      	bmi.n	8002202 <_fflush_r+0x32>
 80021f8:	0599      	lsls	r1, r3, #22
 80021fa:	d402      	bmi.n	8002202 <_fflush_r+0x32>
 80021fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021fe:	f7ff fe68 	bl	8001ed2 <__retarget_lock_acquire_recursive>
 8002202:	4628      	mov	r0, r5
 8002204:	4621      	mov	r1, r4
 8002206:	f7ff ff5f 	bl	80020c8 <__sflush_r>
 800220a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800220c:	07da      	lsls	r2, r3, #31
 800220e:	4605      	mov	r5, r0
 8002210:	d4e4      	bmi.n	80021dc <_fflush_r+0xc>
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	059b      	lsls	r3, r3, #22
 8002216:	d4e1      	bmi.n	80021dc <_fflush_r+0xc>
 8002218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800221a:	f7ff fe5b 	bl	8001ed4 <__retarget_lock_release_recursive>
 800221e:	e7dd      	b.n	80021dc <_fflush_r+0xc>

08002220 <__swhatbuf_r>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	460c      	mov	r4, r1
 8002224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002228:	2900      	cmp	r1, #0
 800222a:	b096      	sub	sp, #88	@ 0x58
 800222c:	4615      	mov	r5, r2
 800222e:	461e      	mov	r6, r3
 8002230:	da0d      	bge.n	800224e <__swhatbuf_r+0x2e>
 8002232:	89a3      	ldrh	r3, [r4, #12]
 8002234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	bf14      	ite	ne
 800223e:	2340      	movne	r3, #64	@ 0x40
 8002240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002244:	2000      	movs	r0, #0
 8002246:	6031      	str	r1, [r6, #0]
 8002248:	602b      	str	r3, [r5, #0]
 800224a:	b016      	add	sp, #88	@ 0x58
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	466a      	mov	r2, sp
 8002250:	f000 f848 	bl	80022e4 <_fstat_r>
 8002254:	2800      	cmp	r0, #0
 8002256:	dbec      	blt.n	8002232 <__swhatbuf_r+0x12>
 8002258:	9901      	ldr	r1, [sp, #4]
 800225a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800225e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002262:	4259      	negs	r1, r3
 8002264:	4159      	adcs	r1, r3
 8002266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226a:	e7eb      	b.n	8002244 <__swhatbuf_r+0x24>

0800226c <__smakebuf_r>:
 800226c:	898b      	ldrh	r3, [r1, #12]
 800226e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002270:	079d      	lsls	r5, r3, #30
 8002272:	4606      	mov	r6, r0
 8002274:	460c      	mov	r4, r1
 8002276:	d507      	bpl.n	8002288 <__smakebuf_r+0x1c>
 8002278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	6123      	str	r3, [r4, #16]
 8002280:	2301      	movs	r3, #1
 8002282:	6163      	str	r3, [r4, #20]
 8002284:	b003      	add	sp, #12
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	ab01      	add	r3, sp, #4
 800228a:	466a      	mov	r2, sp
 800228c:	f7ff ffc8 	bl	8002220 <__swhatbuf_r>
 8002290:	9f00      	ldr	r7, [sp, #0]
 8002292:	4605      	mov	r5, r0
 8002294:	4639      	mov	r1, r7
 8002296:	4630      	mov	r0, r6
 8002298:	f7ff fe8a 	bl	8001fb0 <_malloc_r>
 800229c:	b948      	cbnz	r0, 80022b2 <__smakebuf_r+0x46>
 800229e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022a2:	059a      	lsls	r2, r3, #22
 80022a4:	d4ee      	bmi.n	8002284 <__smakebuf_r+0x18>
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	81a3      	strh	r3, [r4, #12]
 80022b0:	e7e2      	b.n	8002278 <__smakebuf_r+0xc>
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	6020      	str	r0, [r4, #0]
 80022b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ba:	81a3      	strh	r3, [r4, #12]
 80022bc:	9b01      	ldr	r3, [sp, #4]
 80022be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80022c2:	b15b      	cbz	r3, 80022dc <__smakebuf_r+0x70>
 80022c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022c8:	4630      	mov	r0, r6
 80022ca:	f000 f81d 	bl	8002308 <_isatty_r>
 80022ce:	b128      	cbz	r0, 80022dc <__smakebuf_r+0x70>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	81a3      	strh	r3, [r4, #12]
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	431d      	orrs	r5, r3
 80022e0:	81a5      	strh	r5, [r4, #12]
 80022e2:	e7cf      	b.n	8002284 <__smakebuf_r+0x18>

080022e4 <_fstat_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4d07      	ldr	r5, [pc, #28]	@ (8002304 <_fstat_r+0x20>)
 80022e8:	2300      	movs	r3, #0
 80022ea:	4604      	mov	r4, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	f7fe fd1c 	bl	8000d2e <_fstat>
 80022f6:	1c43      	adds	r3, r0, #1
 80022f8:	d102      	bne.n	8002300 <_fstat_r+0x1c>
 80022fa:	682b      	ldr	r3, [r5, #0]
 80022fc:	b103      	cbz	r3, 8002300 <_fstat_r+0x1c>
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	bd38      	pop	{r3, r4, r5, pc}
 8002302:	bf00      	nop
 8002304:	2000020c 	.word	0x2000020c

08002308 <_isatty_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	4d06      	ldr	r5, [pc, #24]	@ (8002324 <_isatty_r+0x1c>)
 800230c:	2300      	movs	r3, #0
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	602b      	str	r3, [r5, #0]
 8002314:	f7fe fd1b 	bl	8000d4e <_isatty>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_isatty_r+0x1a>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_isatty_r+0x1a>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	2000020c 	.word	0x2000020c

08002328 <_sbrk_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4d06      	ldr	r5, [pc, #24]	@ (8002344 <_sbrk_r+0x1c>)
 800232c:	2300      	movs	r3, #0
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	f7fe fd24 	bl	8000d80 <_sbrk>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_sbrk_r+0x1a>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_sbrk_r+0x1a>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	2000020c 	.word	0x2000020c

08002348 <_init>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	bf00      	nop
 800234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234e:	bc08      	pop	{r3}
 8002350:	469e      	mov	lr, r3
 8002352:	4770      	bx	lr

08002354 <_fini>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr
